// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: AFMsgPreGame.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AFMsg {

  /// <summary>Holder for reflection information generated from AFMsgPreGame.proto</summary>
  public static partial class AFMsgPreGameReflection {

    #region Descriptor
    /// <summary>File descriptor for AFMsgPreGame.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AFMsgPreGameReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJBRk1zZ1ByZUdhbWUucHJvdG8SBUFGTXNnGg5BRkRlZmluZS5wcm90bxoP",
            "QUZNc2dCYXNlLnByb3RvItcBChBTZXJ2ZXJJbmZvUmVwb3J0EhEKCXNlcnZl",
            "cl9pZBgBIAEoBRITCgtzZXJ2ZXJfbmFtZRgCIAEoCRIRCglzZXJ2ZXJfaXAY",
            "AyABKAkSEwoLc2VydmVyX3BvcnQYBCABKAUSGQoRc2VydmVyX21heF9vbmxp",
            "bmUYBSABKAUSGAoQc2VydmVyX2N1cl9jb3VudBgGIAEoBRIpCgxzZXJ2ZXJf",
            "c3RhdGUYByABKA4yEy5BRk1zZy5FU2VydmVyU3RhdGUSEwoLc2VydmVyX3R5",
            "cGUYCCABKAUiRAoUU2VydmVySW5mb1JlcG9ydExpc3QSLAoLc2VydmVyX2xp",
            "c3QYASADKAsyFy5BRk1zZy5TZXJ2ZXJJbmZvUmVwb3J0IoMBCg5BY2tFdmVu",
            "dFJlc3VsdBIpCgpldmVudF9jb2RlGAEgASgOMhUuQUZNc2cuRUdhbWVFdmVu",
            "dENvZGUSIgoMZXZlbnRfb2JqZWN0GAIgASgLMgwuQUZNc2cuSWRlbnQSIgoM",
            "ZXZlbnRfY2xpZW50GAMgASgLMgwuQUZNc2cuSWRlbnQi7AEKD1JlcUFjY291",
            "bnRMb2dpbhIPCgdhY2NvdW50GAIgASgJEhAKCHBhc3N3b3JkGAMgASgJEhUK",
            "DXNlY3VyaXR5X2NvZGUYBCABKAkSEAoIc2lnbkJ1ZmYYBSABKAkSFQoNY2xp",
            "ZW50VmVyc2lvbhgGIAEoBRIRCglsb2dpbk1vZGUYByABKAUSEAoIY2xpZW50",
            "SVAYCCABKAUSEQoJY2xpZW50TUFDGAkgASgDEhMKC2RldmljZV9pbmZvGAog",
            "ASgJEhIKCmV4dHJhX2luZm8YCyABKAkSFQoNcGxhdGZvcm1fdHlwZRgMIAEo",
            "BSI3ChBSZXFBY2NvdW50TG9nb3V0Eg8KB2FjY291bnQYAiABKAkSEgoKZXh0",
            "cmFfaW5mbxgDIAEoCSJmCgpTZXJ2ZXJJbmZvEhEKCXNlcnZlcl9pZBgBIAEo",
            "BRIMCgRuYW1lGAIgASgJEhIKCndhaXRfY291bnQYAyABKAUSIwoGc3RhdHVz",
            "GAQgASgOMhMuQUZNc2cuRVNlcnZlclN0YXRlIjcKDVJlcVNlcnZlckxpc3QS",
            "JgoEdHlwZRgBIAEoDjIYLkFGTXNnLlJlcVNlcnZlckxpc3RUeXBlIlgKDUFj",
            "a1NlcnZlckxpc3QSJgoEdHlwZRgBIAEoDjIYLkFGTXNnLlJlcVNlcnZlckxp",
            "c3RUeXBlEh8KBGluZm8YAiADKAsyES5BRk1zZy5TZXJ2ZXJJbmZvImQKD1Jl",
            "cUNvbm5lY3RXb3JsZBIQCgh3b3JsZF9pZBgBIAEoBRIPCgdhY2NvdW50GAIg",
            "ASgJEhwKBnNlbmRlchgDIAEoCzIMLkFGTXNnLklkZW50EhAKCGxvZ2luX2lk",
            "GAQgASgFIqMBChVBY2tDb25uZWN0V29ybGRSZXN1bHQSEAoId29ybGRfaWQY",
            "ASABKAUSHAoGc2VuZGVyGAIgASgLMgwuQUZNc2cuSWRlbnQSEAoIbG9naW5f",
            "aWQYAyABKAUSDwoHYWNjb3VudBgEIAEoCRIQCgh3b3JsZF9pcBgFIAEoCRIS",
            "Cgp3b3JsZF9wb3J0GAYgASgFEhEKCXdvcmxkX2tleRgHIAEoCSIjCg9SZXFT",
            "ZWxlY3RTZXJ2ZXISEAoId29ybGRfaWQYASABKAUiNQoQUmVxS2lja0Zyb21X",
            "b3JsZBIQCgh3b3JsZF9pZBgBIAEoBRIPCgdhY2NvdW50GAIgASgJIi8KC1Jl",
            "cVJvbGVMaXN0Eg8KB2dhbWVfaWQYASABKAUSDwoHYWNjb3VudBgCIAEoCSL7",
            "AQoMUm9sZUxpdGVJbmZvEhgKAmlkGAEgASgLMgwuQUZNc2cuSWRlbnQSDgoG",
            "Y2FyZWVyGAIgASgFEgsKA3NleBgDIAEoBRIMCgRyYWNlGAQgASgFEhEKCW5v",
            "b2JfbmFtZRgFIAEoCRIPCgdnYW1lX2lkGAYgASgFEhIKCnJvbGVfbGV2ZWwY",
            "ByABKAUSEwoLZGVsZXRlX3RpbWUYCCABKAUSEAoIcmVnX3RpbWUYCSABKAUS",
            "GQoRbGFzdF9vZmZsaW5lX3RpbWUYCiABKAUSFwoPbGFzdF9vZmZsaW5lX2lw",
            "GAsgASgFEhMKC3ZpZXdfcmVjb3JkGAwgASgJIj0KE0Fja1JvbGVMaXRlSW5m",
            "b0xpc3QSJgoJY2hhcl9kYXRhGAEgAygLMhMuQUZNc2cuUm9sZUxpdGVJbmZv",
            "Im8KDVJlcUNyZWF0ZVJvbGUSDwoHYWNjb3VudBgBIAEoCRIOCgZjYXJlZXIY",
            "AiABKAUSCwoDc2V4GAMgASgFEgwKBHJhY2UYBCABKAUSEQoJbm9vYl9uYW1l",
            "GAUgASgJEg8KB2dhbWVfaWQYBiABKAUiPwoNUmVxRGVsZXRlUm9sZRIPCgdh",
            "Y2NvdW50GAEgASgJEgwKBG5hbWUYAiABKAkSDwoHZ2FtZV9pZBgDIAEoBSJA",
            "Cg5SZXFSZWNvdmVyUm9sZRIPCgdhY2NvdW50GAEgASgJEgwKBG5hbWUYAiAB",
            "KAkSDwoHZ2FtZV9pZBgDIAEoBSIgCg9TZXJ2ZXJIZWFydEJlYXQSDQoFY291",
            "bnQYASABKAUiLwoQUm9sZU9ubGluZU5vdGlmeRIbCgVndWlsZBgBIAEoCzIM",
            "LkFGTXNnLklkZW50IjAKEVJvbGVPZmZsaW5lTm90aWZ5EhsKBWd1aWxkGAEg",
            "ASgLMgwuQUZNc2cuSWRlbnQqWgoMRVNlcnZlclN0YXRlEg0KCUVTVF9DUkFT",
            "SBAAEg4KCkVTVF9OQVJNQUwQARIMCghFU1RfQlVTWRACEgwKCEVTVF9GSVJF",
            "EAMSDwoLRVNUX01BSU5URU4QBCpAChFSZXFTZXJ2ZXJMaXN0VHlwZRIVChFS",
            "U0xUX1dPUkxEX1NFUlZFUhAAEhQKEFJTTFRfR0FNRVNfRVJWRVIQAWIGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::AFMsg.AFDefineReflection.Descriptor, global::AFMsg.AFMsgBaseReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::AFMsg.EServerState), typeof(global::AFMsg.ReqServerListType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ServerInfoReport), global::AFMsg.ServerInfoReport.Parser, new[]{ "ServerId", "ServerName", "ServerIp", "ServerPort", "ServerMaxOnline", "ServerCurCount", "ServerState", "ServerType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ServerInfoReportList), global::AFMsg.ServerInfoReportList.Parser, new[]{ "ServerList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.AckEventResult), global::AFMsg.AckEventResult.Parser, new[]{ "EventCode", "EventObject", "EventClient" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqAccountLogin), global::AFMsg.ReqAccountLogin.Parser, new[]{ "Account", "Password", "SecurityCode", "SignBuff", "ClientVersion", "LoginMode", "ClientIP", "ClientMAC", "DeviceInfo", "ExtraInfo", "PlatformType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqAccountLogout), global::AFMsg.ReqAccountLogout.Parser, new[]{ "Account", "ExtraInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ServerInfo), global::AFMsg.ServerInfo.Parser, new[]{ "ServerId", "Name", "WaitCount", "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqServerList), global::AFMsg.ReqServerList.Parser, new[]{ "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.AckServerList), global::AFMsg.AckServerList.Parser, new[]{ "Type", "Info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqConnectWorld), global::AFMsg.ReqConnectWorld.Parser, new[]{ "WorldId", "Account", "Sender", "LoginId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.AckConnectWorldResult), global::AFMsg.AckConnectWorldResult.Parser, new[]{ "WorldId", "Sender", "LoginId", "Account", "WorldIp", "WorldPort", "WorldKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqSelectServer), global::AFMsg.ReqSelectServer.Parser, new[]{ "WorldId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqKickFromWorld), global::AFMsg.ReqKickFromWorld.Parser, new[]{ "WorldId", "Account" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqRoleList), global::AFMsg.ReqRoleList.Parser, new[]{ "GameId", "Account" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.RoleLiteInfo), global::AFMsg.RoleLiteInfo.Parser, new[]{ "Id", "Career", "Sex", "Race", "NoobName", "GameId", "RoleLevel", "DeleteTime", "RegTime", "LastOfflineTime", "LastOfflineIp", "ViewRecord" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.AckRoleLiteInfoList), global::AFMsg.AckRoleLiteInfoList.Parser, new[]{ "CharData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqCreateRole), global::AFMsg.ReqCreateRole.Parser, new[]{ "Account", "Career", "Sex", "Race", "NoobName", "GameId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqDeleteRole), global::AFMsg.ReqDeleteRole.Parser, new[]{ "Account", "Name", "GameId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqRecoverRole), global::AFMsg.ReqRecoverRole.Parser, new[]{ "Account", "Name", "GameId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ServerHeartBeat), global::AFMsg.ServerHeartBeat.Parser, new[]{ "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.RoleOnlineNotify), global::AFMsg.RoleOnlineNotify.Parser, new[]{ "Guild" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.RoleOfflineNotify), global::AFMsg.RoleOfflineNotify.Parser, new[]{ "Guild" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum EServerState {
    [pbr::OriginalName("EST_CRASH")] EstCrash = 0,
    [pbr::OriginalName("EST_NARMAL")] EstNarmal = 1,
    [pbr::OriginalName("EST_BUSY")] EstBusy = 2,
    [pbr::OriginalName("EST_FIRE")] EstFire = 3,
    [pbr::OriginalName("EST_MAINTEN")] EstMainten = 4,
  }

  /// <summary>
  ///请求大世界服务器列表，请求单世界游戏服务器列表
  /// </summary>
  public enum ReqServerListType {
    [pbr::OriginalName("RSLT_WORLD_SERVER")] RsltWorldServer = 0,
    [pbr::OriginalName("RSLT_GAMES_ERVER")] RsltGamesErver = 1,
  }

  #endregion

  #region Messages
  public sealed partial class ServerInfoReport : pb::IMessage<ServerInfoReport> {
    private static readonly pb::MessageParser<ServerInfoReport> _parser = new pb::MessageParser<ServerInfoReport>(() => new ServerInfoReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerInfoReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgPreGameReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInfoReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInfoReport(ServerInfoReport other) : this() {
      serverId_ = other.serverId_;
      serverName_ = other.serverName_;
      serverIp_ = other.serverIp_;
      serverPort_ = other.serverPort_;
      serverMaxOnline_ = other.serverMaxOnline_;
      serverCurCount_ = other.serverCurCount_;
      serverState_ = other.serverState_;
      serverType_ = other.serverType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInfoReport Clone() {
      return new ServerInfoReport(this);
    }

    /// <summary>Field number for the "server_id" field.</summary>
    public const int ServerIdFieldNumber = 1;
    private int serverId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "server_name" field.</summary>
    public const int ServerNameFieldNumber = 2;
    private string serverName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerName {
      get { return serverName_; }
      set {
        serverName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "server_ip" field.</summary>
    public const int ServerIpFieldNumber = 3;
    private string serverIp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerIp {
      get { return serverIp_; }
      set {
        serverIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "server_port" field.</summary>
    public const int ServerPortFieldNumber = 4;
    private int serverPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerPort {
      get { return serverPort_; }
      set {
        serverPort_ = value;
      }
    }

    /// <summary>Field number for the "server_max_online" field.</summary>
    public const int ServerMaxOnlineFieldNumber = 5;
    private int serverMaxOnline_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerMaxOnline {
      get { return serverMaxOnline_; }
      set {
        serverMaxOnline_ = value;
      }
    }

    /// <summary>Field number for the "server_cur_count" field.</summary>
    public const int ServerCurCountFieldNumber = 6;
    private int serverCurCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerCurCount {
      get { return serverCurCount_; }
      set {
        serverCurCount_ = value;
      }
    }

    /// <summary>Field number for the "server_state" field.</summary>
    public const int ServerStateFieldNumber = 7;
    private global::AFMsg.EServerState serverState_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.EServerState ServerState {
      get { return serverState_; }
      set {
        serverState_ = value;
      }
    }

    /// <summary>Field number for the "server_type" field.</summary>
    public const int ServerTypeFieldNumber = 8;
    private int serverType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerType {
      get { return serverType_; }
      set {
        serverType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerInfoReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerInfoReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerId != other.ServerId) return false;
      if (ServerName != other.ServerName) return false;
      if (ServerIp != other.ServerIp) return false;
      if (ServerPort != other.ServerPort) return false;
      if (ServerMaxOnline != other.ServerMaxOnline) return false;
      if (ServerCurCount != other.ServerCurCount) return false;
      if (ServerState != other.ServerState) return false;
      if (ServerType != other.ServerType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServerId != 0) hash ^= ServerId.GetHashCode();
      if (ServerName.Length != 0) hash ^= ServerName.GetHashCode();
      if (ServerIp.Length != 0) hash ^= ServerIp.GetHashCode();
      if (ServerPort != 0) hash ^= ServerPort.GetHashCode();
      if (ServerMaxOnline != 0) hash ^= ServerMaxOnline.GetHashCode();
      if (ServerCurCount != 0) hash ^= ServerCurCount.GetHashCode();
      if (ServerState != 0) hash ^= ServerState.GetHashCode();
      if (ServerType != 0) hash ^= ServerType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ServerId);
      }
      if (ServerName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ServerName);
      }
      if (ServerIp.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ServerIp);
      }
      if (ServerPort != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ServerPort);
      }
      if (ServerMaxOnline != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ServerMaxOnline);
      }
      if (ServerCurCount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ServerCurCount);
      }
      if (ServerState != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) ServerState);
      }
      if (ServerType != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ServerType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerId);
      }
      if (ServerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerName);
      }
      if (ServerIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerIp);
      }
      if (ServerPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerPort);
      }
      if (ServerMaxOnline != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerMaxOnline);
      }
      if (ServerCurCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerCurCount);
      }
      if (ServerState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ServerState);
      }
      if (ServerType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerInfoReport other) {
      if (other == null) {
        return;
      }
      if (other.ServerId != 0) {
        ServerId = other.ServerId;
      }
      if (other.ServerName.Length != 0) {
        ServerName = other.ServerName;
      }
      if (other.ServerIp.Length != 0) {
        ServerIp = other.ServerIp;
      }
      if (other.ServerPort != 0) {
        ServerPort = other.ServerPort;
      }
      if (other.ServerMaxOnline != 0) {
        ServerMaxOnline = other.ServerMaxOnline;
      }
      if (other.ServerCurCount != 0) {
        ServerCurCount = other.ServerCurCount;
      }
      if (other.ServerState != 0) {
        ServerState = other.ServerState;
      }
      if (other.ServerType != 0) {
        ServerType = other.ServerType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ServerId = input.ReadInt32();
            break;
          }
          case 18: {
            ServerName = input.ReadString();
            break;
          }
          case 26: {
            ServerIp = input.ReadString();
            break;
          }
          case 32: {
            ServerPort = input.ReadInt32();
            break;
          }
          case 40: {
            ServerMaxOnline = input.ReadInt32();
            break;
          }
          case 48: {
            ServerCurCount = input.ReadInt32();
            break;
          }
          case 56: {
            serverState_ = (global::AFMsg.EServerState) input.ReadEnum();
            break;
          }
          case 64: {
            ServerType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ServerInfoReportList : pb::IMessage<ServerInfoReportList> {
    private static readonly pb::MessageParser<ServerInfoReportList> _parser = new pb::MessageParser<ServerInfoReportList>(() => new ServerInfoReportList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerInfoReportList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgPreGameReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInfoReportList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInfoReportList(ServerInfoReportList other) : this() {
      serverList_ = other.serverList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInfoReportList Clone() {
      return new ServerInfoReportList(this);
    }

    /// <summary>Field number for the "server_list" field.</summary>
    public const int ServerListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AFMsg.ServerInfoReport> _repeated_serverList_codec
        = pb::FieldCodec.ForMessage(10, global::AFMsg.ServerInfoReport.Parser);
    private readonly pbc::RepeatedField<global::AFMsg.ServerInfoReport> serverList_ = new pbc::RepeatedField<global::AFMsg.ServerInfoReport>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AFMsg.ServerInfoReport> ServerList {
      get { return serverList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerInfoReportList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerInfoReportList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!serverList_.Equals(other.serverList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= serverList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      serverList_.WriteTo(output, _repeated_serverList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += serverList_.CalculateSize(_repeated_serverList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerInfoReportList other) {
      if (other == null) {
        return;
      }
      serverList_.Add(other.serverList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            serverList_.AddEntriesFrom(input, _repeated_serverList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AckEventResult : pb::IMessage<AckEventResult> {
    private static readonly pb::MessageParser<AckEventResult> _parser = new pb::MessageParser<AckEventResult>(() => new AckEventResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckEventResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgPreGameReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckEventResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckEventResult(AckEventResult other) : this() {
      eventCode_ = other.eventCode_;
      EventObject = other.eventObject_ != null ? other.EventObject.Clone() : null;
      EventClient = other.eventClient_ != null ? other.EventClient.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckEventResult Clone() {
      return new AckEventResult(this);
    }

    /// <summary>Field number for the "event_code" field.</summary>
    public const int EventCodeFieldNumber = 1;
    private global::AFMsg.EGameEventCode eventCode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.EGameEventCode EventCode {
      get { return eventCode_; }
      set {
        eventCode_ = value;
      }
    }

    /// <summary>Field number for the "event_object" field.</summary>
    public const int EventObjectFieldNumber = 2;
    private global::AFMsg.Ident eventObject_;
    /// <summary>
    ///playerID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident EventObject {
      get { return eventObject_; }
      set {
        eventObject_ = value;
      }
    }

    /// <summary>Field number for the "event_client" field.</summary>
    public const int EventClientFieldNumber = 3;
    private global::AFMsg.Ident eventClient_;
    /// <summary>
    ///clientID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident EventClient {
      get { return eventClient_; }
      set {
        eventClient_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckEventResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckEventResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventCode != other.EventCode) return false;
      if (!object.Equals(EventObject, other.EventObject)) return false;
      if (!object.Equals(EventClient, other.EventClient)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EventCode != 0) hash ^= EventCode.GetHashCode();
      if (eventObject_ != null) hash ^= EventObject.GetHashCode();
      if (eventClient_ != null) hash ^= EventClient.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EventCode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) EventCode);
      }
      if (eventObject_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(EventObject);
      }
      if (eventClient_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(EventClient);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventCode);
      }
      if (eventObject_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventObject);
      }
      if (eventClient_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventClient);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckEventResult other) {
      if (other == null) {
        return;
      }
      if (other.EventCode != 0) {
        EventCode = other.EventCode;
      }
      if (other.eventObject_ != null) {
        if (eventObject_ == null) {
          eventObject_ = new global::AFMsg.Ident();
        }
        EventObject.MergeFrom(other.EventObject);
      }
      if (other.eventClient_ != null) {
        if (eventClient_ == null) {
          eventClient_ = new global::AFMsg.Ident();
        }
        EventClient.MergeFrom(other.EventClient);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            eventCode_ = (global::AFMsg.EGameEventCode) input.ReadEnum();
            break;
          }
          case 18: {
            if (eventObject_ == null) {
              eventObject_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(eventObject_);
            break;
          }
          case 26: {
            if (eventClient_ == null) {
              eventClient_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(eventClient_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /////////////////////////////////////////////////////
  /// </summary>
  public sealed partial class ReqAccountLogin : pb::IMessage<ReqAccountLogin> {
    private static readonly pb::MessageParser<ReqAccountLogin> _parser = new pb::MessageParser<ReqAccountLogin>(() => new ReqAccountLogin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAccountLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgPreGameReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAccountLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAccountLogin(ReqAccountLogin other) : this() {
      account_ = other.account_;
      password_ = other.password_;
      securityCode_ = other.securityCode_;
      signBuff_ = other.signBuff_;
      clientVersion_ = other.clientVersion_;
      loginMode_ = other.loginMode_;
      clientIP_ = other.clientIP_;
      clientMAC_ = other.clientMAC_;
      deviceInfo_ = other.deviceInfo_;
      extraInfo_ = other.extraInfo_;
      platformType_ = other.platformType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAccountLogin Clone() {
      return new ReqAccountLogin(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 2;
    private string account_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 3;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "security_code" field.</summary>
    public const int SecurityCodeFieldNumber = 4;
    private string securityCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SecurityCode {
      get { return securityCode_; }
      set {
        securityCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "signBuff" field.</summary>
    public const int SignBuffFieldNumber = 5;
    private string signBuff_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SignBuff {
      get { return signBuff_; }
      set {
        signBuff_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clientVersion" field.</summary>
    public const int ClientVersionFieldNumber = 6;
    private int clientVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ClientVersion {
      get { return clientVersion_; }
      set {
        clientVersion_ = value;
      }
    }

    /// <summary>Field number for the "loginMode" field.</summary>
    public const int LoginModeFieldNumber = 7;
    private int loginMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LoginMode {
      get { return loginMode_; }
      set {
        loginMode_ = value;
      }
    }

    /// <summary>Field number for the "clientIP" field.</summary>
    public const int ClientIPFieldNumber = 8;
    private int clientIP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ClientIP {
      get { return clientIP_; }
      set {
        clientIP_ = value;
      }
    }

    /// <summary>Field number for the "clientMAC" field.</summary>
    public const int ClientMACFieldNumber = 9;
    private long clientMAC_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ClientMAC {
      get { return clientMAC_; }
      set {
        clientMAC_ = value;
      }
    }

    /// <summary>Field number for the "device_info" field.</summary>
    public const int DeviceInfoFieldNumber = 10;
    private string deviceInfo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceInfo {
      get { return deviceInfo_; }
      set {
        deviceInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extra_info" field.</summary>
    public const int ExtraInfoFieldNumber = 11;
    private string extraInfo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExtraInfo {
      get { return extraInfo_; }
      set {
        extraInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "platform_type" field.</summary>
    public const int PlatformTypeFieldNumber = 12;
    private int platformType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlatformType {
      get { return platformType_; }
      set {
        platformType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAccountLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAccountLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      if (Password != other.Password) return false;
      if (SecurityCode != other.SecurityCode) return false;
      if (SignBuff != other.SignBuff) return false;
      if (ClientVersion != other.ClientVersion) return false;
      if (LoginMode != other.LoginMode) return false;
      if (ClientIP != other.ClientIP) return false;
      if (ClientMAC != other.ClientMAC) return false;
      if (DeviceInfo != other.DeviceInfo) return false;
      if (ExtraInfo != other.ExtraInfo) return false;
      if (PlatformType != other.PlatformType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (SecurityCode.Length != 0) hash ^= SecurityCode.GetHashCode();
      if (SignBuff.Length != 0) hash ^= SignBuff.GetHashCode();
      if (ClientVersion != 0) hash ^= ClientVersion.GetHashCode();
      if (LoginMode != 0) hash ^= LoginMode.GetHashCode();
      if (ClientIP != 0) hash ^= ClientIP.GetHashCode();
      if (ClientMAC != 0L) hash ^= ClientMAC.GetHashCode();
      if (DeviceInfo.Length != 0) hash ^= DeviceInfo.GetHashCode();
      if (ExtraInfo.Length != 0) hash ^= ExtraInfo.GetHashCode();
      if (PlatformType != 0) hash ^= PlatformType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Account);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Password);
      }
      if (SecurityCode.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SecurityCode);
      }
      if (SignBuff.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SignBuff);
      }
      if (ClientVersion != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ClientVersion);
      }
      if (LoginMode != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(LoginMode);
      }
      if (ClientIP != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ClientIP);
      }
      if (ClientMAC != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(ClientMAC);
      }
      if (DeviceInfo.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(DeviceInfo);
      }
      if (ExtraInfo.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ExtraInfo);
      }
      if (PlatformType != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(PlatformType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (SecurityCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SecurityCode);
      }
      if (SignBuff.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SignBuff);
      }
      if (ClientVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientVersion);
      }
      if (LoginMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LoginMode);
      }
      if (ClientIP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientIP);
      }
      if (ClientMAC != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ClientMAC);
      }
      if (DeviceInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceInfo);
      }
      if (ExtraInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExtraInfo);
      }
      if (PlatformType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlatformType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAccountLogin other) {
      if (other == null) {
        return;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.SecurityCode.Length != 0) {
        SecurityCode = other.SecurityCode;
      }
      if (other.SignBuff.Length != 0) {
        SignBuff = other.SignBuff;
      }
      if (other.ClientVersion != 0) {
        ClientVersion = other.ClientVersion;
      }
      if (other.LoginMode != 0) {
        LoginMode = other.LoginMode;
      }
      if (other.ClientIP != 0) {
        ClientIP = other.ClientIP;
      }
      if (other.ClientMAC != 0L) {
        ClientMAC = other.ClientMAC;
      }
      if (other.DeviceInfo.Length != 0) {
        DeviceInfo = other.DeviceInfo;
      }
      if (other.ExtraInfo.Length != 0) {
        ExtraInfo = other.ExtraInfo;
      }
      if (other.PlatformType != 0) {
        PlatformType = other.PlatformType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            Account = input.ReadString();
            break;
          }
          case 26: {
            Password = input.ReadString();
            break;
          }
          case 34: {
            SecurityCode = input.ReadString();
            break;
          }
          case 42: {
            SignBuff = input.ReadString();
            break;
          }
          case 48: {
            ClientVersion = input.ReadInt32();
            break;
          }
          case 56: {
            LoginMode = input.ReadInt32();
            break;
          }
          case 64: {
            ClientIP = input.ReadInt32();
            break;
          }
          case 72: {
            ClientMAC = input.ReadInt64();
            break;
          }
          case 82: {
            DeviceInfo = input.ReadString();
            break;
          }
          case 90: {
            ExtraInfo = input.ReadString();
            break;
          }
          case 96: {
            PlatformType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqAccountLogout : pb::IMessage<ReqAccountLogout> {
    private static readonly pb::MessageParser<ReqAccountLogout> _parser = new pb::MessageParser<ReqAccountLogout>(() => new ReqAccountLogout());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAccountLogout> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgPreGameReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAccountLogout() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAccountLogout(ReqAccountLogout other) : this() {
      account_ = other.account_;
      extraInfo_ = other.extraInfo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAccountLogout Clone() {
      return new ReqAccountLogout(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 2;
    private string account_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extra_info" field.</summary>
    public const int ExtraInfoFieldNumber = 3;
    private string extraInfo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExtraInfo {
      get { return extraInfo_; }
      set {
        extraInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAccountLogout);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAccountLogout other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      if (ExtraInfo != other.ExtraInfo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (ExtraInfo.Length != 0) hash ^= ExtraInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Account);
      }
      if (ExtraInfo.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ExtraInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (ExtraInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExtraInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAccountLogout other) {
      if (other == null) {
        return;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.ExtraInfo.Length != 0) {
        ExtraInfo = other.ExtraInfo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            Account = input.ReadString();
            break;
          }
          case 26: {
            ExtraInfo = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ServerInfo : pb::IMessage<ServerInfo> {
    private static readonly pb::MessageParser<ServerInfo> _parser = new pb::MessageParser<ServerInfo>(() => new ServerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgPreGameReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInfo(ServerInfo other) : this() {
      serverId_ = other.serverId_;
      name_ = other.name_;
      waitCount_ = other.waitCount_;
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInfo Clone() {
      return new ServerInfo(this);
    }

    /// <summary>Field number for the "server_id" field.</summary>
    public const int ServerIdFieldNumber = 1;
    private int serverId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "wait_count" field.</summary>
    public const int WaitCountFieldNumber = 3;
    private int waitCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WaitCount {
      get { return waitCount_; }
      set {
        waitCount_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 4;
    private global::AFMsg.EServerState status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.EServerState Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerId != other.ServerId) return false;
      if (Name != other.Name) return false;
      if (WaitCount != other.WaitCount) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServerId != 0) hash ^= ServerId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (WaitCount != 0) hash ^= WaitCount.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ServerId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (WaitCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(WaitCount);
      }
      if (Status != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (WaitCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WaitCount);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerInfo other) {
      if (other == null) {
        return;
      }
      if (other.ServerId != 0) {
        ServerId = other.ServerId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.WaitCount != 0) {
        WaitCount = other.WaitCount;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ServerId = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            WaitCount = input.ReadInt32();
            break;
          }
          case 32: {
            status_ = (global::AFMsg.EServerState) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqServerList : pb::IMessage<ReqServerList> {
    private static readonly pb::MessageParser<ReqServerList> _parser = new pb::MessageParser<ReqServerList>(() => new ReqServerList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqServerList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgPreGameReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqServerList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqServerList(ReqServerList other) : this() {
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqServerList Clone() {
      return new ReqServerList(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::AFMsg.ReqServerListType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.ReqServerListType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqServerList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqServerList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqServerList other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::AFMsg.ReqServerListType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AckServerList : pb::IMessage<AckServerList> {
    private static readonly pb::MessageParser<AckServerList> _parser = new pb::MessageParser<AckServerList>(() => new AckServerList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckServerList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgPreGameReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckServerList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckServerList(AckServerList other) : this() {
      type_ = other.type_;
      info_ = other.info_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckServerList Clone() {
      return new AckServerList(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::AFMsg.ReqServerListType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.ReqServerListType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::AFMsg.ServerInfo> _repeated_info_codec
        = pb::FieldCodec.ForMessage(18, global::AFMsg.ServerInfo.Parser);
    private readonly pbc::RepeatedField<global::AFMsg.ServerInfo> info_ = new pbc::RepeatedField<global::AFMsg.ServerInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AFMsg.ServerInfo> Info {
      get { return info_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckServerList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckServerList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if(!info_.Equals(other.info_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      hash ^= info_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      info_.WriteTo(output, _repeated_info_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += info_.CalculateSize(_repeated_info_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckServerList other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      info_.Add(other.info_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::AFMsg.ReqServerListType) input.ReadEnum();
            break;
          }
          case 18: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqConnectWorld : pb::IMessage<ReqConnectWorld> {
    private static readonly pb::MessageParser<ReqConnectWorld> _parser = new pb::MessageParser<ReqConnectWorld>(() => new ReqConnectWorld());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqConnectWorld> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgPreGameReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqConnectWorld() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqConnectWorld(ReqConnectWorld other) : this() {
      worldId_ = other.worldId_;
      account_ = other.account_;
      Sender = other.sender_ != null ? other.Sender.Clone() : null;
      loginId_ = other.loginId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqConnectWorld Clone() {
      return new ReqConnectWorld(this);
    }

    /// <summary>Field number for the "world_id" field.</summary>
    public const int WorldIdFieldNumber = 1;
    private int worldId_;
    /// <summary>
    ///想去的世界ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WorldId {
      get { return worldId_; }
      set {
        worldId_ = value;
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 2;
    private string account_ = "";
    /// <summary>
    ///玩家帐号--客户度发送时可以不填--转发需填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sender" field.</summary>
    public const int SenderFieldNumber = 3;
    private global::AFMsg.Ident sender_;
    /// <summary>
    ///玩家临时ID--客户度发送时可以不填--转发需填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident Sender {
      get { return sender_; }
      set {
        sender_ = value;
      }
    }

    /// <summary>Field number for the "login_id" field.</summary>
    public const int LoginIdFieldNumber = 4;
    private int loginId_;
    /// <summary>
    ///登录服务器ID--客户度发送时可以不填--转发需填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LoginId {
      get { return loginId_; }
      set {
        loginId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqConnectWorld);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqConnectWorld other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WorldId != other.WorldId) return false;
      if (Account != other.Account) return false;
      if (!object.Equals(Sender, other.Sender)) return false;
      if (LoginId != other.LoginId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WorldId != 0) hash ^= WorldId.GetHashCode();
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (sender_ != null) hash ^= Sender.GetHashCode();
      if (LoginId != 0) hash ^= LoginId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WorldId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WorldId);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Account);
      }
      if (sender_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Sender);
      }
      if (LoginId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(LoginId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WorldId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WorldId);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (sender_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sender);
      }
      if (LoginId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LoginId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqConnectWorld other) {
      if (other == null) {
        return;
      }
      if (other.WorldId != 0) {
        WorldId = other.WorldId;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.sender_ != null) {
        if (sender_ == null) {
          sender_ = new global::AFMsg.Ident();
        }
        Sender.MergeFrom(other.Sender);
      }
      if (other.LoginId != 0) {
        LoginId = other.LoginId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            WorldId = input.ReadInt32();
            break;
          }
          case 18: {
            Account = input.ReadString();
            break;
          }
          case 26: {
            if (sender_ == null) {
              sender_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(sender_);
            break;
          }
          case 32: {
            LoginId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AckConnectWorldResult : pb::IMessage<AckConnectWorldResult> {
    private static readonly pb::MessageParser<AckConnectWorldResult> _parser = new pb::MessageParser<AckConnectWorldResult>(() => new AckConnectWorldResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckConnectWorldResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgPreGameReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckConnectWorldResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckConnectWorldResult(AckConnectWorldResult other) : this() {
      worldId_ = other.worldId_;
      Sender = other.sender_ != null ? other.Sender.Clone() : null;
      loginId_ = other.loginId_;
      account_ = other.account_;
      worldIp_ = other.worldIp_;
      worldPort_ = other.worldPort_;
      worldKey_ = other.worldKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckConnectWorldResult Clone() {
      return new AckConnectWorldResult(this);
    }

    /// <summary>Field number for the "world_id" field.</summary>
    public const int WorldIdFieldNumber = 1;
    private int worldId_;
    /// <summary>
    ///申请者想去的世界ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WorldId {
      get { return worldId_; }
      set {
        worldId_ = value;
      }
    }

    /// <summary>Field number for the "sender" field.</summary>
    public const int SenderFieldNumber = 2;
    private global::AFMsg.Ident sender_;
    /// <summary>
    ///申请者临时ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident Sender {
      get { return sender_; }
      set {
        sender_ = value;
      }
    }

    /// <summary>Field number for the "login_id" field.</summary>
    public const int LoginIdFieldNumber = 3;
    private int loginId_;
    /// <summary>
    ///申请者所在的登录服务器ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LoginId {
      get { return loginId_; }
      set {
        loginId_ = value;
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 4;
    private string account_ = "";
    /// <summary>
    ///申请者的帐号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "world_ip" field.</summary>
    public const int WorldIpFieldNumber = 5;
    private string worldIp_ = "";
    /// <summary>
    ///得到的世界服务器分配的网关IP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WorldIp {
      get { return worldIp_; }
      set {
        worldIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "world_port" field.</summary>
    public const int WorldPortFieldNumber = 6;
    private int worldPort_;
    /// <summary>
    ///得到的世界服务器分配的端口
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WorldPort {
      get { return worldPort_; }
      set {
        worldPort_ = value;
      }
    }

    /// <summary>Field number for the "world_key" field.</summary>
    public const int WorldKeyFieldNumber = 7;
    private string worldKey_ = "";
    /// <summary>
    ///得到的握手KEY
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WorldKey {
      get { return worldKey_; }
      set {
        worldKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckConnectWorldResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckConnectWorldResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WorldId != other.WorldId) return false;
      if (!object.Equals(Sender, other.Sender)) return false;
      if (LoginId != other.LoginId) return false;
      if (Account != other.Account) return false;
      if (WorldIp != other.WorldIp) return false;
      if (WorldPort != other.WorldPort) return false;
      if (WorldKey != other.WorldKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WorldId != 0) hash ^= WorldId.GetHashCode();
      if (sender_ != null) hash ^= Sender.GetHashCode();
      if (LoginId != 0) hash ^= LoginId.GetHashCode();
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (WorldIp.Length != 0) hash ^= WorldIp.GetHashCode();
      if (WorldPort != 0) hash ^= WorldPort.GetHashCode();
      if (WorldKey.Length != 0) hash ^= WorldKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WorldId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WorldId);
      }
      if (sender_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Sender);
      }
      if (LoginId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LoginId);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Account);
      }
      if (WorldIp.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(WorldIp);
      }
      if (WorldPort != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(WorldPort);
      }
      if (WorldKey.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(WorldKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WorldId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WorldId);
      }
      if (sender_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sender);
      }
      if (LoginId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LoginId);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (WorldIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WorldIp);
      }
      if (WorldPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WorldPort);
      }
      if (WorldKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WorldKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckConnectWorldResult other) {
      if (other == null) {
        return;
      }
      if (other.WorldId != 0) {
        WorldId = other.WorldId;
      }
      if (other.sender_ != null) {
        if (sender_ == null) {
          sender_ = new global::AFMsg.Ident();
        }
        Sender.MergeFrom(other.Sender);
      }
      if (other.LoginId != 0) {
        LoginId = other.LoginId;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.WorldIp.Length != 0) {
        WorldIp = other.WorldIp;
      }
      if (other.WorldPort != 0) {
        WorldPort = other.WorldPort;
      }
      if (other.WorldKey.Length != 0) {
        WorldKey = other.WorldKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            WorldId = input.ReadInt32();
            break;
          }
          case 18: {
            if (sender_ == null) {
              sender_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(sender_);
            break;
          }
          case 24: {
            LoginId = input.ReadInt32();
            break;
          }
          case 34: {
            Account = input.ReadString();
            break;
          }
          case 42: {
            WorldIp = input.ReadString();
            break;
          }
          case 48: {
            WorldPort = input.ReadInt32();
            break;
          }
          case 58: {
            WorldKey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqSelectServer : pb::IMessage<ReqSelectServer> {
    private static readonly pb::MessageParser<ReqSelectServer> _parser = new pb::MessageParser<ReqSelectServer>(() => new ReqSelectServer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqSelectServer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgPreGameReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSelectServer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSelectServer(ReqSelectServer other) : this() {
      worldId_ = other.worldId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSelectServer Clone() {
      return new ReqSelectServer(this);
    }

    /// <summary>Field number for the "world_id" field.</summary>
    public const int WorldIdFieldNumber = 1;
    private int worldId_;
    /// <summary>
    ///想去的服务器ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WorldId {
      get { return worldId_; }
      set {
        worldId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqSelectServer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqSelectServer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WorldId != other.WorldId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WorldId != 0) hash ^= WorldId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WorldId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WorldId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WorldId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WorldId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqSelectServer other) {
      if (other == null) {
        return;
      }
      if (other.WorldId != 0) {
        WorldId = other.WorldId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            WorldId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqKickFromWorld : pb::IMessage<ReqKickFromWorld> {
    private static readonly pb::MessageParser<ReqKickFromWorld> _parser = new pb::MessageParser<ReqKickFromWorld>(() => new ReqKickFromWorld());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqKickFromWorld> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgPreGameReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqKickFromWorld() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqKickFromWorld(ReqKickFromWorld other) : this() {
      worldId_ = other.worldId_;
      account_ = other.account_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqKickFromWorld Clone() {
      return new ReqKickFromWorld(this);
    }

    /// <summary>Field number for the "world_id" field.</summary>
    public const int WorldIdFieldNumber = 1;
    private int worldId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WorldId {
      get { return worldId_; }
      set {
        worldId_ = value;
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 2;
    private string account_ = "";
    /// <summary>
    ///帐号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqKickFromWorld);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqKickFromWorld other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WorldId != other.WorldId) return false;
      if (Account != other.Account) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WorldId != 0) hash ^= WorldId.GetHashCode();
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WorldId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WorldId);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Account);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WorldId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WorldId);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqKickFromWorld other) {
      if (other == null) {
        return;
      }
      if (other.WorldId != 0) {
        WorldId = other.WorldId;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            WorldId = input.ReadInt32();
            break;
          }
          case 18: {
            Account = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /////////////////////////////////////////////
  /// </summary>
  public sealed partial class ReqRoleList : pb::IMessage<ReqRoleList> {
    private static readonly pb::MessageParser<ReqRoleList> _parser = new pb::MessageParser<ReqRoleList>(() => new ReqRoleList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqRoleList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgPreGameReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqRoleList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqRoleList(ReqRoleList other) : this() {
      gameId_ = other.gameId_;
      account_ = other.account_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqRoleList Clone() {
      return new ReqRoleList(this);
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 1;
    private int gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 2;
    private string account_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqRoleList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqRoleList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameId != other.GameId) return false;
      if (Account != other.Account) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameId != 0) hash ^= GameId.GetHashCode();
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GameId);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Account);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameId);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqRoleList other) {
      if (other == null) {
        return;
      }
      if (other.GameId != 0) {
        GameId = other.GameId;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GameId = input.ReadInt32();
            break;
          }
          case 18: {
            Account = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoleLiteInfo : pb::IMessage<RoleLiteInfo> {
    private static readonly pb::MessageParser<RoleLiteInfo> _parser = new pb::MessageParser<RoleLiteInfo>(() => new RoleLiteInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleLiteInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgPreGameReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleLiteInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleLiteInfo(RoleLiteInfo other) : this() {
      Id = other.id_ != null ? other.Id.Clone() : null;
      career_ = other.career_;
      sex_ = other.sex_;
      race_ = other.race_;
      noobName_ = other.noobName_;
      gameId_ = other.gameId_;
      roleLevel_ = other.roleLevel_;
      deleteTime_ = other.deleteTime_;
      regTime_ = other.regTime_;
      lastOfflineTime_ = other.lastOfflineTime_;
      lastOfflineIp_ = other.lastOfflineIp_;
      viewRecord_ = other.viewRecord_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleLiteInfo Clone() {
      return new RoleLiteInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::AFMsg.Ident id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "career" field.</summary>
    public const int CareerFieldNumber = 2;
    private int career_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Career {
      get { return career_; }
      set {
        career_ = value;
      }
    }

    /// <summary>Field number for the "sex" field.</summary>
    public const int SexFieldNumber = 3;
    private int sex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    /// <summary>Field number for the "race" field.</summary>
    public const int RaceFieldNumber = 4;
    private int race_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Race {
      get { return race_; }
      set {
        race_ = value;
      }
    }

    /// <summary>Field number for the "noob_name" field.</summary>
    public const int NoobNameFieldNumber = 5;
    private string noobName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NoobName {
      get { return noobName_; }
      set {
        noobName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 6;
    private int gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    /// <summary>Field number for the "role_level" field.</summary>
    public const int RoleLevelFieldNumber = 7;
    private int roleLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleLevel {
      get { return roleLevel_; }
      set {
        roleLevel_ = value;
      }
    }

    /// <summary>Field number for the "delete_time" field.</summary>
    public const int DeleteTimeFieldNumber = 8;
    private int deleteTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeleteTime {
      get { return deleteTime_; }
      set {
        deleteTime_ = value;
      }
    }

    /// <summary>Field number for the "reg_time" field.</summary>
    public const int RegTimeFieldNumber = 9;
    private int regTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RegTime {
      get { return regTime_; }
      set {
        regTime_ = value;
      }
    }

    /// <summary>Field number for the "last_offline_time" field.</summary>
    public const int LastOfflineTimeFieldNumber = 10;
    private int lastOfflineTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastOfflineTime {
      get { return lastOfflineTime_; }
      set {
        lastOfflineTime_ = value;
      }
    }

    /// <summary>Field number for the "last_offline_ip" field.</summary>
    public const int LastOfflineIpFieldNumber = 11;
    private int lastOfflineIp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastOfflineIp {
      get { return lastOfflineIp_; }
      set {
        lastOfflineIp_ = value;
      }
    }

    /// <summary>Field number for the "view_record" field.</summary>
    public const int ViewRecordFieldNumber = 12;
    private string viewRecord_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ViewRecord {
      get { return viewRecord_; }
      set {
        viewRecord_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoleLiteInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoleLiteInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      if (Career != other.Career) return false;
      if (Sex != other.Sex) return false;
      if (Race != other.Race) return false;
      if (NoobName != other.NoobName) return false;
      if (GameId != other.GameId) return false;
      if (RoleLevel != other.RoleLevel) return false;
      if (DeleteTime != other.DeleteTime) return false;
      if (RegTime != other.RegTime) return false;
      if (LastOfflineTime != other.LastOfflineTime) return false;
      if (LastOfflineIp != other.LastOfflineIp) return false;
      if (ViewRecord != other.ViewRecord) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      if (Career != 0) hash ^= Career.GetHashCode();
      if (Sex != 0) hash ^= Sex.GetHashCode();
      if (Race != 0) hash ^= Race.GetHashCode();
      if (NoobName.Length != 0) hash ^= NoobName.GetHashCode();
      if (GameId != 0) hash ^= GameId.GetHashCode();
      if (RoleLevel != 0) hash ^= RoleLevel.GetHashCode();
      if (DeleteTime != 0) hash ^= DeleteTime.GetHashCode();
      if (RegTime != 0) hash ^= RegTime.GetHashCode();
      if (LastOfflineTime != 0) hash ^= LastOfflineTime.GetHashCode();
      if (LastOfflineIp != 0) hash ^= LastOfflineIp.GetHashCode();
      if (ViewRecord.Length != 0) hash ^= ViewRecord.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (Career != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Career);
      }
      if (Sex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Sex);
      }
      if (Race != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Race);
      }
      if (NoobName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(NoobName);
      }
      if (GameId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(GameId);
      }
      if (RoleLevel != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(RoleLevel);
      }
      if (DeleteTime != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(DeleteTime);
      }
      if (RegTime != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(RegTime);
      }
      if (LastOfflineTime != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(LastOfflineTime);
      }
      if (LastOfflineIp != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(LastOfflineIp);
      }
      if (ViewRecord.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(ViewRecord);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (Career != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Career);
      }
      if (Sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sex);
      }
      if (Race != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Race);
      }
      if (NoobName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NoobName);
      }
      if (GameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameId);
      }
      if (RoleLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleLevel);
      }
      if (DeleteTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeleteTime);
      }
      if (RegTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RegTime);
      }
      if (LastOfflineTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastOfflineTime);
      }
      if (LastOfflineIp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastOfflineIp);
      }
      if (ViewRecord.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ViewRecord);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoleLiteInfo other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          id_ = new global::AFMsg.Ident();
        }
        Id.MergeFrom(other.Id);
      }
      if (other.Career != 0) {
        Career = other.Career;
      }
      if (other.Sex != 0) {
        Sex = other.Sex;
      }
      if (other.Race != 0) {
        Race = other.Race;
      }
      if (other.NoobName.Length != 0) {
        NoobName = other.NoobName;
      }
      if (other.GameId != 0) {
        GameId = other.GameId;
      }
      if (other.RoleLevel != 0) {
        RoleLevel = other.RoleLevel;
      }
      if (other.DeleteTime != 0) {
        DeleteTime = other.DeleteTime;
      }
      if (other.RegTime != 0) {
        RegTime = other.RegTime;
      }
      if (other.LastOfflineTime != 0) {
        LastOfflineTime = other.LastOfflineTime;
      }
      if (other.LastOfflineIp != 0) {
        LastOfflineIp = other.LastOfflineIp;
      }
      if (other.ViewRecord.Length != 0) {
        ViewRecord = other.ViewRecord;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (id_ == null) {
              id_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(id_);
            break;
          }
          case 16: {
            Career = input.ReadInt32();
            break;
          }
          case 24: {
            Sex = input.ReadInt32();
            break;
          }
          case 32: {
            Race = input.ReadInt32();
            break;
          }
          case 42: {
            NoobName = input.ReadString();
            break;
          }
          case 48: {
            GameId = input.ReadInt32();
            break;
          }
          case 56: {
            RoleLevel = input.ReadInt32();
            break;
          }
          case 64: {
            DeleteTime = input.ReadInt32();
            break;
          }
          case 72: {
            RegTime = input.ReadInt32();
            break;
          }
          case 80: {
            LastOfflineTime = input.ReadInt32();
            break;
          }
          case 88: {
            LastOfflineIp = input.ReadInt32();
            break;
          }
          case 98: {
            ViewRecord = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AckRoleLiteInfoList : pb::IMessage<AckRoleLiteInfoList> {
    private static readonly pb::MessageParser<AckRoleLiteInfoList> _parser = new pb::MessageParser<AckRoleLiteInfoList>(() => new AckRoleLiteInfoList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckRoleLiteInfoList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgPreGameReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckRoleLiteInfoList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckRoleLiteInfoList(AckRoleLiteInfoList other) : this() {
      charData_ = other.charData_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckRoleLiteInfoList Clone() {
      return new AckRoleLiteInfoList(this);
    }

    /// <summary>Field number for the "char_data" field.</summary>
    public const int CharDataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AFMsg.RoleLiteInfo> _repeated_charData_codec
        = pb::FieldCodec.ForMessage(10, global::AFMsg.RoleLiteInfo.Parser);
    private readonly pbc::RepeatedField<global::AFMsg.RoleLiteInfo> charData_ = new pbc::RepeatedField<global::AFMsg.RoleLiteInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AFMsg.RoleLiteInfo> CharData {
      get { return charData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckRoleLiteInfoList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckRoleLiteInfoList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!charData_.Equals(other.charData_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= charData_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      charData_.WriteTo(output, _repeated_charData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += charData_.CalculateSize(_repeated_charData_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckRoleLiteInfoList other) {
      if (other == null) {
        return;
      }
      charData_.Add(other.charData_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            charData_.AddEntriesFrom(input, _repeated_charData_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqCreateRole : pb::IMessage<ReqCreateRole> {
    private static readonly pb::MessageParser<ReqCreateRole> _parser = new pb::MessageParser<ReqCreateRole>(() => new ReqCreateRole());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqCreateRole> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgPreGameReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqCreateRole() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqCreateRole(ReqCreateRole other) : this() {
      account_ = other.account_;
      career_ = other.career_;
      sex_ = other.sex_;
      race_ = other.race_;
      noobName_ = other.noobName_;
      gameId_ = other.gameId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqCreateRole Clone() {
      return new ReqCreateRole(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private string account_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "career" field.</summary>
    public const int CareerFieldNumber = 2;
    private int career_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Career {
      get { return career_; }
      set {
        career_ = value;
      }
    }

    /// <summary>Field number for the "sex" field.</summary>
    public const int SexFieldNumber = 3;
    private int sex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    /// <summary>Field number for the "race" field.</summary>
    public const int RaceFieldNumber = 4;
    private int race_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Race {
      get { return race_; }
      set {
        race_ = value;
      }
    }

    /// <summary>Field number for the "noob_name" field.</summary>
    public const int NoobNameFieldNumber = 5;
    private string noobName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NoobName {
      get { return noobName_; }
      set {
        noobName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 6;
    private int gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqCreateRole);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqCreateRole other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      if (Career != other.Career) return false;
      if (Sex != other.Sex) return false;
      if (Race != other.Race) return false;
      if (NoobName != other.NoobName) return false;
      if (GameId != other.GameId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Career != 0) hash ^= Career.GetHashCode();
      if (Sex != 0) hash ^= Sex.GetHashCode();
      if (Race != 0) hash ^= Race.GetHashCode();
      if (NoobName.Length != 0) hash ^= NoobName.GetHashCode();
      if (GameId != 0) hash ^= GameId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (Career != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Career);
      }
      if (Sex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Sex);
      }
      if (Race != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Race);
      }
      if (NoobName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(NoobName);
      }
      if (GameId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(GameId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Career != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Career);
      }
      if (Sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sex);
      }
      if (Race != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Race);
      }
      if (NoobName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NoobName);
      }
      if (GameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqCreateRole other) {
      if (other == null) {
        return;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Career != 0) {
        Career = other.Career;
      }
      if (other.Sex != 0) {
        Sex = other.Sex;
      }
      if (other.Race != 0) {
        Race = other.Race;
      }
      if (other.NoobName.Length != 0) {
        NoobName = other.NoobName;
      }
      if (other.GameId != 0) {
        GameId = other.GameId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 16: {
            Career = input.ReadInt32();
            break;
          }
          case 24: {
            Sex = input.ReadInt32();
            break;
          }
          case 32: {
            Race = input.ReadInt32();
            break;
          }
          case 42: {
            NoobName = input.ReadString();
            break;
          }
          case 48: {
            GameId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqDeleteRole : pb::IMessage<ReqDeleteRole> {
    private static readonly pb::MessageParser<ReqDeleteRole> _parser = new pb::MessageParser<ReqDeleteRole>(() => new ReqDeleteRole());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqDeleteRole> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgPreGameReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqDeleteRole() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqDeleteRole(ReqDeleteRole other) : this() {
      account_ = other.account_;
      name_ = other.name_;
      gameId_ = other.gameId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqDeleteRole Clone() {
      return new ReqDeleteRole(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private string account_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 3;
    private int gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqDeleteRole);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqDeleteRole other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      if (Name != other.Name) return false;
      if (GameId != other.GameId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (GameId != 0) hash ^= GameId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (GameId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GameId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (GameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqDeleteRole other) {
      if (other == null) {
        return;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.GameId != 0) {
        GameId = other.GameId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            GameId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqRecoverRole : pb::IMessage<ReqRecoverRole> {
    private static readonly pb::MessageParser<ReqRecoverRole> _parser = new pb::MessageParser<ReqRecoverRole>(() => new ReqRecoverRole());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqRecoverRole> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgPreGameReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqRecoverRole() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqRecoverRole(ReqRecoverRole other) : this() {
      account_ = other.account_;
      name_ = other.name_;
      gameId_ = other.gameId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqRecoverRole Clone() {
      return new ReqRecoverRole(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private string account_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 3;
    private int gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqRecoverRole);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqRecoverRole other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      if (Name != other.Name) return false;
      if (GameId != other.GameId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (GameId != 0) hash ^= GameId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (GameId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GameId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (GameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqRecoverRole other) {
      if (other == null) {
        return;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.GameId != 0) {
        GameId = other.GameId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            GameId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ServerHeartBeat : pb::IMessage<ServerHeartBeat> {
    private static readonly pb::MessageParser<ServerHeartBeat> _parser = new pb::MessageParser<ServerHeartBeat>(() => new ServerHeartBeat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerHeartBeat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgPreGameReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerHeartBeat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerHeartBeat(ServerHeartBeat other) : this() {
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerHeartBeat Clone() {
      return new ServerHeartBeat(this);
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private int count_;
    /// <summary>
    /// 数量，暂时没用到，以后可以用来做角色数量报告等
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerHeartBeat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerHeartBeat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Count != 0) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerHeartBeat other) {
      if (other == null) {
        return;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoleOnlineNotify : pb::IMessage<RoleOnlineNotify> {
    private static readonly pb::MessageParser<RoleOnlineNotify> _parser = new pb::MessageParser<RoleOnlineNotify>(() => new RoleOnlineNotify());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleOnlineNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgPreGameReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleOnlineNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleOnlineNotify(RoleOnlineNotify other) : this() {
      Guild = other.guild_ != null ? other.Guild.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleOnlineNotify Clone() {
      return new RoleOnlineNotify(this);
    }

    /// <summary>Field number for the "guild" field.</summary>
    public const int GuildFieldNumber = 1;
    private global::AFMsg.Ident guild_;
    /// <summary>
    /// 公会ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident Guild {
      get { return guild_; }
      set {
        guild_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoleOnlineNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoleOnlineNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Guild, other.Guild)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (guild_ != null) hash ^= Guild.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (guild_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Guild);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (guild_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Guild);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoleOnlineNotify other) {
      if (other == null) {
        return;
      }
      if (other.guild_ != null) {
        if (guild_ == null) {
          guild_ = new global::AFMsg.Ident();
        }
        Guild.MergeFrom(other.Guild);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (guild_ == null) {
              guild_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(guild_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoleOfflineNotify : pb::IMessage<RoleOfflineNotify> {
    private static readonly pb::MessageParser<RoleOfflineNotify> _parser = new pb::MessageParser<RoleOfflineNotify>(() => new RoleOfflineNotify());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleOfflineNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgPreGameReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleOfflineNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleOfflineNotify(RoleOfflineNotify other) : this() {
      Guild = other.guild_ != null ? other.Guild.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleOfflineNotify Clone() {
      return new RoleOfflineNotify(this);
    }

    /// <summary>Field number for the "guild" field.</summary>
    public const int GuildFieldNumber = 1;
    private global::AFMsg.Ident guild_;
    /// <summary>
    /// 公会ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident Guild {
      get { return guild_; }
      set {
        guild_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoleOfflineNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoleOfflineNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Guild, other.Guild)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (guild_ != null) hash ^= Guild.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (guild_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Guild);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (guild_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Guild);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoleOfflineNotify other) {
      if (other == null) {
        return;
      }
      if (other.guild_ != null) {
        if (guild_ == null) {
          guild_ = new global::AFMsg.Ident();
        }
        Guild.MergeFrom(other.Guild);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (guild_ == null) {
              guild_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(guild_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
