// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: AFMsgShare.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AFMsg {

  /// <summary>Holder for reflection information generated from AFMsgShare.proto</summary>
  public static partial class AFMsgShareReflection {

    #region Descriptor
    /// <summary>File descriptor for AFMsgShare.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AFMsgShareReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBBRk1zZ1NoYXJlLnByb3RvEgVBRk1zZxoOQUZEZWZpbmUucHJvdG8aD0FG",
            "TXNnQmFzZS5wcm90byJeChJSZXFFbnRlckdhbWVTZXJ2ZXISGAoCaWQYASAB",
            "KAsyDC5BRk1zZy5JZGVudBIPCgdhY2NvdW50GAIgASgJEg8KB2dhbWVfaWQY",
            "AyABKAUSDAoEbmFtZRgEIAEoCSIOCgxSZXFIZWFydEJlYXQiFAoSUmVxTGVh",
            "dmVHYW1lU2VydmVyIrMBCg9QbGF5ZXJFbnRyeUluZm8SIQoLb2JqZWN0X2d1",
            "aWQYASABKAsyDC5BRk1zZy5JZGVudBIbCgNwb3MYAiABKAsyDi5BRk1zZy5Q",
            "b2ludDNEEhMKC2NhcmVlcl90eXBlGAMgASgFEhQKDHBsYXllcl9zdGF0ZRgE",
            "IAEoBRIRCgljb25maWdfaWQYBSABKAkSEAoIc2NlbmVfaWQYBiABKAUSEAoI",
            "Y2xhc3NfaWQYByABKAkiQQoSQWNrUGxheWVyRW50cnlMaXN0EisKC29iamVj",
            "dF9saXN0GAEgAygLMhYuQUZNc2cuUGxheWVyRW50cnlJbmZvIjcKEkFja1Bs",
            "YXllckxlYXZlTGlzdBIhCgtvYmplY3RfbGlzdBgBIAMoCzIMLkFGTXNnLklk",
            "ZW50IoYCCg1SZXFBY2tTeW5EYXRhEhsKBXN5c2VyGAEgASgLMgwuQUZNc2cu",
            "SWRlbnQSIQoLb2JqZWN0X2xpc3QYAiADKAsyDC5BRk1zZy5JZGVudBIMCgRk",
            "YXRhGAMgASgJEi4KCHN5bl90eXBlGAQgASgOMhwuQUZNc2cuUmVxQWNrU3lu",
            "RGF0YS5TeW5UeXBlEiEKBm1zZ19pZBgFIAEoDjIRLkFGTXNnLkVHYW1lTXNn",
            "SUQiVAoHU3luVHlwZRIMCghFU1RfTk9ORRAAEg0KCUVTVF9TQ0VORRABEg0K",
            "CUVTVF9HUk9VUBACEg0KCUVTVF9HVUlMRBADEg4KCkVTVF9GUklFTkQQBCKL",
            "AQoQUmVxQWNrUGxheWVyTW92ZRIbCgVtb3ZlchgBIAEoCzIMLkFGTXNnLklk",
            "ZW50EhAKCG1vdmVUeXBlGAIgASgFEiMKCnRhcmdldF9wb3MYAyADKAsyDy5B",
            "Rk1zZy5Qb3NpdGlvbhIjCgpzb3VyY2VfcG9zGAQgAygLMg8uQUZNc2cuUG9z",
            "aXRpb24iaAoNQ2hhdENvbnRhaW5lchIVCg1Db25UYWluZXJUeXBlGAIgASgF",
            "EhEKCWRhdGFfaW5mbxgDIAEoCSItCg1Db250YWluZXJUeXBlEg0KCUVHQ1Rf",
            "Tk9ORRAAEg0KCUVHQ1RfSVRFTRABIrICChBSZXFBY2tQbGF5ZXJDaGF0Eh0K",
            "B2NoYXRfaWQYASABKAsyDC5BRk1zZy5JZGVudBI4CgljaGF0X3R5cGUYAiAB",
            "KA4yJS5BRk1zZy5SZXFBY2tQbGF5ZXJDaGF0LkVHYW1lQ2hhdFR5cGUSEQoJ",
            "Y2hhdF9pbmZvGAMgASgJEhEKCWNoYXRfbmFtZRgEIAEoCRIfCgl0YXJnZXRf",
            "aWQYBSABKAsyDC5BRk1zZy5JZGVudBIsCg5Db250YWluZXJfZGF0YRgGIAMo",
            "CzIULkFGTXNnLkNoYXRDb250YWluZXIiUAoNRUdhbWVDaGF0VHlwZRIOCgpF",
            "R0NUX0dVSUxEEAASEAoMRUdDVF9QUklWQVRFEAESDQoJRUdDVF9URUFNEAIS",
            "DgoKRUdDVF9XT1JMRBADIrcBCgpFZmZlY3REYXRhEiIKDGVmZmVjdF9pZGVu",
            "dBgBIAEoCzIMLkFGTXNnLklkZW50EhQKDGVmZmVjdF92YWx1ZRgCIAEoBRIx",
            "CgplZmZlY3Rfcmx0GAMgASgOMh0uQUZNc2cuRWZmZWN0RGF0YS5FUmVzdWx0",
            "VHlwZSI8CgtFUmVzdWx0VHlwZRIPCgtFRVRfU1VDQ0VTUxAAEgwKCEVFVF9G",
            "QUlMEAESDgoKRUVUX1JFRlVTRRACIr0BCg5SZXFBY2tVc2VTa2lsbBIaCgR1",
            "c2VyGAEgASgLMgwuQUZNc2cuSWRlbnQSEAoIc2tpbGxfaWQYAiABKAkSIAoH",
            "bm93X3BvcxgDIAEoCzIPLkFGTXNnLlBvc2l0aW9uEiAKB3Rhcl9wb3MYBCAB",
            "KAsyDy5BRk1zZy5Qb3NpdGlvbhIRCgl1c2VfaW5kZXgYBSABKAUSJgoLZWZm",
            "ZWN0X2RhdGEYBiADKAsyES5BRk1zZy5FZmZlY3REYXRhIrUBCg1SZXFBY2tV",
            "c2VJdGVtEhoKBHVzZXIYASABKAsyDC5BRk1zZy5JZGVudBIfCglpdGVtX2d1",
            "aWQYAiABKAsyDC5BRk1zZy5JZGVudBImCgtlZmZlY3RfZGF0YRgDIAMoCzIR",
            "LkFGTXNnLkVmZmVjdERhdGESHwoEaXRlbRgEIAEoCzIRLkFGTXNnLkl0ZW1T",
            "dHJ1Y3QSHgoIdGFyZ2V0aWQYBSABKAsyDC5BRk1zZy5JZGVudCLlAQoPUmVx",
            "QWNrU3dhcFNjZW5lEjsKDXRyYW5zZmVyX3R5cGUYASABKA4yJC5BRk1zZy5S",
            "ZXFBY2tTd2FwU2NlbmUuRUdhbWVTd2FwVHlwZRIQCghzY2VuZV9pZBgCIAEo",
            "BRIPCgdsaW5lX2lkGAMgASgFEgkKAXgYBCABKAISCQoBeRgFIAEoAhIJCgF6",
            "GAYgASgCIlEKDUVHYW1lU3dhcFR5cGUSDwoLRUdTVF9OQVJNQUwQABIOCgpF",
            "R1NUX0NMT05FEAESDgoKRUdTVF9BUkVOQRACEg8KC0VHU1RfTUlSUk9SEAMi",
            "MQoKSXRlbVN0cnVjdBIPCgdpdGVtX2lkGAEgASgJEhIKCml0ZW1fY291bnQY",
            "AiABKAUiPwoOQ3VycmVuY3lTdHJ1Y3QSFQoNY3VycmVuY3lfdHlwZRgBIAEo",
            "BRIWCg5jdXJyZW5jeV9jb3VudBgCIAEoBSJkCg9SZXFBY2tFbmRCYXR0bGUS",
            "DQoFbW9uZXkYASABKAUSCwoDZXhwGAIgASgFEg8KB2RpYW1vbmQYAyABKAUS",
            "JAoJaXRlbV9saXN0GAQgAygLMhEuQUZNc2cuSXRlbVN0cnVjdCIyCg9SZXFQ",
            "aWNrRHJvcEl0ZW0SHwoJaXRlbV9ndWlkGAIgASgLMgwuQUZNc2cuSWRlbnQi",
            "IAoNUmVxQWNjZXB0VGFzaxIPCgd0YXNrX2lkGAEgASgJIiMKEFJlcUNvbXBl",
            "bGV0ZVRhc2sSDwoHdGFza19pZBgBIAEoCSLvAQoSUmVxQWNrSm9pbkFjdGl2",
            "aXR5EkIKDWFjdGl2aXR5X3R5cGUYASABKA4yKy5BRk1zZy5SZXFBY2tKb2lu",
            "QWN0aXZpdHkuRUdhbWVBY3Rpdml0eVR5cGUSSQoRc3ViX2FjdGl2aXR5X3R5",
            "cGUYAiABKA4yLi5BRk1zZy5SZXFBY2tKb2luQWN0aXZpdHkuRUdhbWVBY3Rp",
            "dml0eVN1YlR5cGUiIQoRRUdhbWVBY3Rpdml0eVR5cGUSDAoIRUdBVF9QVlAQ",
            "ACInChRFR2FtZUFjdGl2aXR5U3ViVHlwZRIPCgtFR0FUX05PUk1BTBAAIj4K",
            "E1JlcUFja1NlYXJjaE9wcG5lbnQSJwoLc2VhcmNoX3R5cGUYASABKA4yEi5B",
            "Rk1zZy5FQmF0dGxlVHlwZSI+ChNSZXFBY2tCYXR0bGVPcHBuZW50EicKC2Jh",
            "dHRsZV90eXBlGAEgASgOMhIuQUZNc2cuRUJhdHRsZVR5cGUiRwoRUmVxQWNr",
            "Q3JlYXRlR3VpbGQSHgoIZ3VpbGRfaWQYASABKAsyDC5BRk1zZy5JZGVudBIS",
            "CgpndWlsZF9uYW1lGAIgASgJIiQKDlJlcVNlYXJjaEd1aWxkEhIKCmd1aWxk",
            "X25hbWUYASABKAkikAIKDkFja1NlYXJjaEd1aWxkEjsKCmd1aWxkX2xpc3QY",
            "ASADKAsyJy5BRk1zZy5BY2tTZWFyY2hHdWlsZC5TZWFyY2hHdWlsZE9iamVj",
            "dBrAAQoRU2VhcmNoR3VpbGRPYmplY3QSHgoIZ3VpbGRfSUQYASABKAsyDC5B",
            "Rk1zZy5JZGVudBISCgpndWlsZF9uYW1lGAIgASgJEhIKCmd1aWxkX2ljb24Y",
            "AyABKAkSGgoSZ3VpbGRfbWVtYmVyX2NvdW50GAQgASgFEh4KFmd1aWxkX21l",
            "bWJlcl9tYXhfY291bnQYBSABKAUSEwoLZ3VpbGRfaG9ub3IYBiABKAUSEgoK",
            "Z3VpbGRfcmFuaxgHIAEoBSJFCg9SZXFBY2tKb2luR3VpbGQSHgoIZ3VpbGRf",
            "aWQYASABKAsyDC5BRk1zZy5JZGVudBISCgpndWlsZF9uYW1lGAIgASgJIkYK",
            "EFJlcUFja0xlYXZlR3VpbGQSHgoIZ3VpbGRfaWQYASABKAsyDC5BRk1zZy5J",
            "ZGVudBISCgpndWlsZF9uYW1lGAIgASgJIskCChRSZXFBY2tPcHJHdWlsZE1l",
            "bWJlchIeCghndWlsZF9pZBgBIAEoCzIMLkFGTXNnLklkZW50Eh8KCW1lbWJl",
            "cl9pZBgCIAEoCzIMLkFGTXNnLklkZW50Ej4KBHR5cGUYAyABKA4yMC5BRk1z",
            "Zy5SZXFBY2tPcHJHdWlsZE1lbWJlci5FR0d1aWxkTWVtYmVyT3ByVHlwZSKv",
            "AQoURUdHdWlsZE1lbWJlck9wclR5cGUSDQoJRUdBVF9ET1dOEAASCwoHRUdB",
            "VF9VUBABEg0KCUVHQVRfS0lDSxACEhAKDEVHQVRfQVBQT0lOVBADEg0KCUVH",
            "QVRfRklSRRAEEg8KC0VHQVRfREVNSVNFEAUSFAoQRUdBVF9BQ0NFUFRBUFBM",
            "WRAGEhIKDkVHQVRfREVOWUFQUExZEAcSEAoMRUdBVF9LSUNLT1VUEAgizAIK",
            "DlJlcUFja09wckd1aWxkEh4KCGd1aWxkX2lkGAEgASgLMgwuQUZNc2cuSWRl",
            "bnQSHwoJcGxheWVyX2lkGAIgASgLMgwuQUZNc2cuSWRlbnQSMgoEdHlwZRgD",
            "IAEoDjIkLkFGTXNnLlJlcUFja09wckd1aWxkLkVHR3VpbGRPcHJUeXBlEhQK",
            "DFJlY3J1aXRfZGF0YRgEIAEoCRIPCgdBZF9kYXRhGAUgASgJIp0BCg5FR0d1",
            "aWxkT3ByVHlwZRINCglFR0FUX05PTkUQABIVChFFR0FUX0FQUExZRElTTUlT",
            "UxABEhQKEEVHQVRfU1RPUERJU01JU1MQAhITCg9FR0FUX1NFVFJFQ1JVSVQQ",
            "AxIXChNFR0FUX1BVQkxJU0hSRUNSVUlUEAQSDwoLRUdBVF9FRElUQUQQBRIQ",
            "CgxFR0FUX0xFVkVMVVAQBiJ+ChVSZXFBY2tEb25hdGVHdWlsZEl0ZW0SHgoI",
            "Z3VpbGRfaWQYASABKAsyDC5BRk1zZy5JZGVudBIfCgl0YXJnZXRfaWQYAiAB",
            "KAsyDC5BRk1zZy5JZGVudBIkCglpdGVtX2xpc3QYAyADKAsyES5BRk1zZy5J",
            "dGVtU3RydWN0IlIKElJlcUd1aWxkRWN0eXBlSW5mbxIcCgZzZWxmaWQYASAB",
            "KAsyDC5BRk1zZy5JZGVudBIeCghndWlsZF9pZBgCIAEoCzIMLkFGTXNnLklk",
            "ZW50Im0KD0d1aWxkRWN0eXBlSW5mbxIeCghndWlsZF9pZBgBIAEoCzIMLkFG",
            "TXNnLklkZW50EhEKCXNlcnZlcl9pZBgCIAEoAxIRCglFY3R5cGVfaWQYAyAB",
            "KAMSFAoMRWN0eXBlX0dyb3VwGAQgASgDIl8KEkFja0d1aWxkRWN0eXBlSW5m",
            "bxIcCgZzZWxmaWQYASABKAsyDC5BRk1zZy5JZGVudBIrCgt4ZWN0eXBlaW5m",
            "bxgCIAEoCzIWLkFGTXNnLkd1aWxkRWN0eXBlSW5mbyJfChJTZXRHdWlsZEVj",
            "dHlwZUluZm8SHAoGc2VsZmlkGAEgASgLMgwuQUZNc2cuSWRlbnQSKwoLeGVj",
            "dHlwZWluZm8YAiABKAsyFi5BRk1zZy5HdWlsZEVjdHlwZUluZm8iMwoTUmVx",
            "RW50ZXJHdWlsZEVjdHlwZRIcCgZzZWxmaWQYASABKAsyDC5BRk1zZy5JZGVu",
            "dCLVAgoIQ2hhdEluZm8SLAoJY2hhdF90eXBlGAEgASgOMhkuQUZNc2cuQ2hh",
            "dEluZm8uRUNoYXRUeXBlEhEKCWNoYXRfaW5mbxgCIAEoCRIRCgljaGF0X3Rp",
            "bWUYAyABKAMSFgoOYWRkdGlvbmFsX2luZm8YBCABKAkSHQoHc2VuZF9pZBgF",
            "IAEoCzIMLkFGTXNnLklkZW50EhEKCXNlbmRfbmFtZRgGIAEoCRISCgpzZW5k",
            "X2xldmVsGAcgASgFEiAKCnJlY3ZpZXJfaWQYCCADKAsyDC5BRk1zZy5JZGVu",
            "dBIRCglndWlkX25hbWUYCSABKAkiYgoJRUNoYXRUeXBlEhQKEEVDSEFUVFlQ",
            "RV9OT1JNQUwQABIVChFFQ0hBVFRZUEVfUFJJVkFURRABEhMKD0VDSEFUVFlQ",
            "RV9HVUlMRBACEhMKD0VDSEFUVFlQRV9XT1JMRBADInkKFVJlcUFja0NyZWF0",
            "ZUNoYXRHcm91cBIMCgRuYW1lGAEgASgJEhwKBnNlbGZpZBgCIAEoCzIMLkFG",
            "TXNnLklkZW50EiIKDHhDaGF0R3JvdXBpZBgDIAEoCzIMLkFGTXNnLklkZW50",
            "EhAKCGNoYXRUeXBlGAQgASgFInkKE1JlcUFja2pvaW5DaGF0R3JvdXASHAoG",
            "c2VsZmlkGAEgASgLMgwuQUZNc2cuSWRlbnQSIgoMeENoYXRHcm91cGlkGAIg",
            "ASgLMgwuQUZNc2cuSWRlbnQSDgoGcmVzdWx0GAMgASgDEhAKCGNoYXRUeXBl",
            "GAQgASgFImcKE1JlcUFja1F1aXRDaGF0R3JvdXASHAoGc2VsZmlkGAEgASgL",
            "MgwuQUZNc2cuSWRlbnQSIgoMeENoYXRHcm91cGlkGAIgASgLMgwuQUZNc2cu",
            "SWRlbnQSDgoGcmVzdWx0GAMgASgDIlwKGFJlcVN1YnNjcmlwdGlvbkNoYXRH",
            "cm91cBIcCgZzZWxmaWQYASABKAsyDC5BRk1zZy5JZGVudBIiCgx4Q2hhdEdy",
            "b3VwaWQYAiADKAsyDC5BRk1zZy5JZGVudCJiCh5SZXFDYW5jZWxTdWJzY3Jp",
            "cHRpb25DaGF0R3JvdXASHAoGc2VsZmlkGAEgASgLMgwuQUZNc2cuSWRlbnQS",
            "IgoMeENoYXRHcm91cGlkGAIgAygLMgwuQUZNc2cuSWRlbnQiVwoYUmVxSW50",
            "ZW5zaWZ5bGV2ZWxUb0VxdWlwEhwKBnNlbGZpZBgBIAEoCzIMLkFGTXNnLklk",
            "ZW50Eh0KB2VxdWlwaWQYAiABKAsyDC5BRk1zZy5JZGVudCJnChhBY2tJbnRl",
            "bnNpZnlsZXZlbFRvRXF1aXASHAoGc2VsZmlkGAEgASgLMgwuQUZNc2cuSWRl",
            "bnQSHQoHZXF1aXBpZBgCIAEoCzIMLkFGTXNnLklkZW50Eg4KBnJlc3VsdBgD",
            "IAEoBSJNCg5SZXFIb2xlVG9FcXVpcBIcCgZzZWxmaWQYASABKAsyDC5BRk1z",
            "Zy5JZGVudBIdCgdlcXVpcGlkGAIgASgLMgwuQUZNc2cuSWRlbnQiXQoOQWNr",
            "SG9sZVRvRXF1aXASHAoGc2VsZmlkGAEgASgLMgwuQUZNc2cuSWRlbnQSHQoH",
            "ZXF1aXBpZBgCIAEoCzIMLkFGTXNnLklkZW50Eg4KBnJlc3VsdBgDIAEoBSJ4",
            "ChRSZXFJbmxheXN0b25lVG9FcXVpcBIcCgZzZWxmaWQYASABKAsyDC5BRk1z",
            "Zy5JZGVudBIdCgdlcXVpcGlkGAIgASgLMgwuQUZNc2cuSWRlbnQSDwoHc3Rv",
            "bmVpZBgDIAEoCRISCgpob2xlX2luZGV4GAQgASgFImMKFEFja0lubGF5c3Rv",
            "bmVUb0VxdWlwEhwKBnNlbGZpZBgBIAEoCzIMLkFGTXNnLklkZW50Eh0KB2Vx",
            "dWlwaWQYAiABKAsyDC5BRk1zZy5JZGVudBIOCgZyZXN1bHQYAyABKAUihAEK",
            "FlJlcUVsZW1lbnRsZXZlbFRvRXF1aXASHAoGc2VsZmlkGAEgASgLMgwuQUZN",
            "c2cuSWRlbnQSHQoHZXF1aXBpZBgCIAEoCzIMLkFGTXNnLklkZW50Ei0KDGVF",
            "bGVtZW50VHlwZRgDIAEoDjIXLkFGTXNnLkVHYW1lRWxlbWVudFR5cGUiZQoW",
            "QWNrRWxlbWVudGxldmVsVG9FcXVpcBIcCgZzZWxmaWQYASABKAsyDC5BRk1z",
            "Zy5JZGVudBIdCgdlcXVpcGlkGAIgASgLMgwuQUZNc2cuSWRlbnQSDgoGcmVz",
            "dWx0GAMgASgFIl8KD1JlcVNldEZpZ2h0SGVybxIcCgZzZWxmaWQYASABKAsy",
            "DC5BRk1zZy5JZGVudBIcCgZIZXJvaWQYAiABKAsyDC5BRk1zZy5JZGVudBIQ",
            "CghGaWdodFBvcxgDIAEoBSJrCgxSZXFXZWFyRXF1aXASHAoGc2VsZmlkGAEg",
            "ASgLMgwuQUZNc2cuSWRlbnQSHQoHZXF1aXBpZBgCIAEoCzIMLkFGTXNnLklk",
            "ZW50Eh4KCFRhcmdldGlkGAMgASgLMgwuQUZNc2cuSWRlbnQiawoMVGFrZU9m",
            "ZkVxdWlwEhwKBnNlbGZpZBgBIAEoCzIMLkFGTXNnLklkZW50Eh0KB2VxdWlw",
            "aWQYAiABKAsyDC5BRk1zZy5JZGVudBIeCghUYXJnZXRpZBgDIAEoCzIMLkFG",
            "TXNnLklkZW50IkQKDlJlcU1pbmluZ1RpdGxlEhwKBnNlbGZpZBgBIAEoCzIM",
            "LkFGTXNnLklkZW50EgkKAXgYAiABKAUSCQoBeRgDIAEoBSKfAQoLUmVxU2Vu",
            "ZE1haWwSHAoGc2VsZmlkGAEgASgLMgwuQUZNc2cuSWRlbnQSHgoIcmVjaWV2",
            "ZXIYAiABKAsyDC5BRk1zZy5JZGVudBIkCglpdGVtX2xpc3QYAyADKAsyES5B",
            "Rk1zZy5JdGVtU3RydWN0EiwKDWN1cnJlbmN5X2xpc3QYBCADKAsyFS5BRk1z",
            "Zy5DdXJyZW5jeVN0cnVjdCK5AQoPUmVxU3dpdGNoU2VydmVyEhwKBnNlbGZp",
            "ZBgBIAEoCzIMLkFGTXNnLklkZW50EhUKDXNlbGZfc2VydmVyaWQYAiABKAMS",
            "FwoPdGFyZ2V0X3NlcnZlcmlkGAMgASgDEhUKDWdhdGVfc2VydmVyaWQYBCAB",
            "KAMSDwoHU2NlbmVJRBgFIAEoAxIfCgljbGllbnRfaWQYBiABKAsyDC5BRk1z",
            "Zy5JZGVudBIPCgdncm91cElEGAcgASgDInYKD0Fja1N3aXRjaFNlcnZlchIc",
            "CgZzZWxmaWQYASABKAsyDC5BRk1zZy5JZGVudBIVCg1zZWxmX3NlcnZlcmlk",
            "GAIgASgDEhcKD3RhcmdldF9zZXJ2ZXJpZBgDIAEoAxIVCg1nYXRlX3NlcnZl",
            "cmlkGAQgASgDInoKCFRlYW1JbmZvEh0KB3RlYW1faWQYASABKAsyDC5BRk1z",
            "Zy5JZGVudBIgCgpjYXB0YWluX2lkGAIgASgLMgwuQUZNc2cuSWRlbnQSLQoO",
            "dGVhbW1lbWJlckluZm8YAyADKAsyFS5BRk1zZy5UZWFtbWVtYmVySW5mbyJu",
            "Cg5UZWFtbWVtYmVySW5mbxIfCglwbGF5ZXJfaWQYASABKAsyDC5BRk1zZy5J",
            "ZGVudBIMCgRuYW1lGAIgASgJEg4KBm5MZXZlbBgDIAEoBRILCgNqb2IYBCAB",
            "KAUSEAoISGVhZEljb24YBSABKAkiVQoQUmVxQWNrQ3JlYXRlVGVhbRIdCgd0",
            "ZWFtX2lkGAEgASgLMgwuQUZNc2cuSWRlbnQSIgoJeFRlYW1JbmZvGAIgASgL",
            "Mg8uQUZNc2cuVGVhbUluZm8iUwoOUmVxQWNrSm9pblRlYW0SHQoHdGVhbV9p",
            "ZBgBIAEoCzIMLkFGTXNnLklkZW50EiIKCXhUZWFtSW5mbxgCIAEoCzIPLkFG",
            "TXNnLlRlYW1JbmZvIlQKD1JlcUFja0xlYXZlVGVhbRIdCgd0ZWFtX2lkGAEg",
            "ASgLMgwuQUZNc2cuSWRlbnQSIgoJeFRlYW1JbmZvGAIgASgLMg8uQUZNc2cu",
            "VGVhbUluZm8i6AIKE1JlcUFja09wclRlYW1NZW1iZXISHQoHdGVhbV9pZBgB",
            "IAEoCzIMLkFGTXNnLklkZW50Eh8KCW1lbWJlcl9pZBgCIAEoCzIMLkFGTXNn",
            "LklkZW50EjwKBHR5cGUYAyABKA4yLi5BRk1zZy5SZXFBY2tPcHJUZWFtTWVt",
            "YmVyLkVHVGVhbU1lbWJlck9wclR5cGUSIgoJeFRlYW1JbmZvGAQgASgLMg8u",
            "QUZNc2cuVGVhbUluZm8irgEKE0VHVGVhbU1lbWJlck9wclR5cGUSDQoJRUdB",
            "VF9ET1dOEAASCwoHRUdBVF9VUBABEg0KCUVHQVRfS0lDSxACEhAKDEVHQVRf",
            "QVBQT0lOVBADEg0KCUVHQVRfRklSRRAEEg8KC0VHQVRfREVNSVNFEAUSFAoQ",
            "RUdBVF9BQ0NFUFRBUFBMWRAGEhIKDkVHQVRfREVOWUFQUExZEAcSEAoMRUdB",
            "VF9LSUNLT1VUEAgieAoQUmVxQWNrSW52aXRlVGVhbRIdCgd0ZWFtX2lkGAEg",
            "ASgLMgwuQUZNc2cuSWRlbnQSHQoHc2VsZl9pZBgCIAEoCzIMLkFGTXNnLklk",
            "ZW50EiYKEGludml0ZV90YXJnZXRfaWQYAyABKAsyDC5BRk1zZy5JZGVudCKb",
            "AQoSUmVxVGVhbUVudGVyRWN0eXBlEh0KB3RlYW1faWQYASABKAsyDC5BRk1z",
            "Zy5JZGVudBIdCgdzZWxmX2lkGAIgASgLMgwuQUZNc2cuSWRlbnQSEQoJbkVj",
            "dHlwZUlEGAMgASgFEhAKCG5Hcm91cElEGAQgASgFEg8KB25SZXN1bHQYBSAB",
            "KAUSEQoJblNlcnZlcklEGAYgASgFIogBChJBY2tUZWFtRW50ZXJFY3R5cGUS",
            "HQoHdGVhbV9pZBgBIAEoCzIMLkFGTXNnLklkZW50Eh0KB3NlbGZfaWQYAiAB",
            "KAsyDC5BRk1zZy5JZGVudBIRCgluRWN0eXBlSUQYAyABKAUSEAoIbkdyb3Vw",
            "SUQYBCABKAUSDwoHblJlc3VsdBgFIAEoBSJrChFHcmlkR3VpbGRCYXNlSW5m",
            "bxIYCgJpZBgBIAEoCzIMLkFGTXNnLklkZW50Eg0KBWxldmVsGAIgASgFEg0K",
            "BWNvdW50GAMgASgFEhAKCHJlc291cmNlGAQgASgFEgwKBGljb24YBSABKAki",
            "KQoRUmVxQmlnTWFwR3JpZEluZm8SFAoMbWFwX3RpdGxlX2lkGAEgAygJIroB",
            "ChJCaWdNYXBHcmlkQmFzZUluZm8SCgoCaWQYASABKAkSLAoKZ3VpbGRfaW5m",
            "bxgCIAEoCzIYLkFGTXNnLkdyaWRHdWlsZEJhc2VJbmZvEhQKDGtpbmd3YXJf",
            "dGltZRgKIAEoBRIgCgpraW5nd2FycmVyGAsgASgLMgwuQUZNc2cuSWRlbnQS",
            "FAoMaHVydGluZ190aW1lGBQgASgFEhwKBmh1cnRlchgVIAEoCzIMLkFGTXNn",
            "LklkZW50InoKDkJpZ01hcExlYXZlTXNnEhsKBW93bmVyGAEgASgLMgwuQUZN",
            "c2cuSWRlbnQSEgoKb3duZXJfbmFtZRgCIAEoCRIQCghtc2dfZGF0YRgDIAEo",
            "CRIQCghtc2dfdGltZRgEIAEoBRITCgtvd25lcl9sZXZlbBgFIAEoBSKeAQoQ",
            "QmlnTWFwV2FySGlzdG9yeRIqCghyZWRfaW5mbxgBIAEoCzIYLkFGTXNnLkdy",
            "aWRHdWlsZEJhc2VJbmZvEisKCWJsdWVfaW5mbxgCIAEoCzIYLkFGTXNnLkdy",
            "aWRHdWlsZEJhc2VJbmZvEh8KCXdpbm5lcl9pZBgKIAEoCzIMLkFGTXNnLklk",
            "ZW50EhAKCHdhcl90aW1lGAsgASgFItMBChRCaWdNYXBHcmlkRGV0YWlsSW5m",
            "bxIxCg5ncmlkX2Jhc2VfaW5mbxgBIAEoCzIZLkFGTXNnLkJpZ01hcEdyaWRC",
            "YXNlSW5mbxIwCg5zdGF5X2d1aWRfbGlzdBgCIAMoCzIYLkFGTXNnLkdyaWRH",
            "dWlsZEJhc2VJbmZvEigKCWxlYXZlX21zZxgDIAMoCzIVLkFGTXNnLkJpZ01h",
            "cExlYXZlTXNnEiwKC3dhcl9oaXN0b3J5GAQgAygLMhcuQUZNc2cuQmlnTWFw",
            "V2FySGlzdG9yeSJCChFBY2tCaWdNYXBHcmlkSW5mbxItCghtYXBfZGF0YRgB",
            "IAMoCzIbLkFGTXNnLkJpZ01hcEdyaWREZXRhaWxJbmZvIg8KDVJlcUJpZ01h",
            "cEluZm8iQgoNQWNrQmlnTWFwSW5mbxIxCg5ncmlkX2Jhc2VfaW5mbxgBIAMo",
            "CzIZLkFGTXNnLkJpZ01hcEdyaWRCYXNlSW5mbyJGCg5SZXFIb2xkTWFwR3Jp",
            "ZBIUCgxtYXBfdGl0bGVfaWQYASABKAkSHgoIZ3VpbGRfaWQYAiABKAsyDC5B",
            "Rk1zZy5JZGVudCIQCg5BY2tIb2xkTWFwR3JpZCJQCg5SZXFMZWF2ZU1hcE1z",
            "ZxIUCgxtYXBfdGl0bGVfaWQYASABKAkSKAoJbGVhdmVfbXNnGAIgASgLMhUu",
            "QUZNc2cuQmlnTWFwTGVhdmVNc2ciEAoOQWNrTGVhdmVNYXBNc2ciJgoOUmVx",
            "R2V0TWFwQXdhcmQSFAoMbWFwX3RpdGxlX2lkGAEgASgJIhAKDkFja0dldE1h",
            "cEF3YXJkIiUKDVJlcU1hcEh1bnRpbmcSFAoMbWFwX3RpdGxlX2lkGAEgASgJ",
            "Ig8KDUFja01hcEh1bnRpbmciJQoNUmVxTWFwS2luZ1dhchIUCgxtYXBfdGl0",
            "bGVfaWQYASABKAkiDwoNQWNrTWFwS2luZ1dhciLxAQoLUFZQUm9vbUluZm8S",
            "EwoLbkNlbGxTdGF0dXMYASABKAUSHAoGUm9vbUlEGAIgASgLMgwuQUZNc2cu",
            "SWRlbnQSEAoIblBWUE1vZGUYAyABKAUSEQoJblBWUEdyYWRlGAQgASgFEhEK",
            "CU1heFBhbHllchgFIAEoBRIgCgp4UmVkUGxheWVyGAYgAygLMgwuQUZNc2cu",
            "SWRlbnQSIQoLeEJsdWVQbGF5ZXIYByADKAsyDC5BRk1zZy5JZGVudBIQCghz",
            "ZXJ2ZXJpZBgIIAEoAxIPCgdTY2VuZUlEGAkgASgDEg8KB2dyb3VwSUQYCiAB",
            "KAMivgEKEFJlcVBWUEFwcGx5TWF0Y2gSHQoHc2VsZl9pZBgBIAEoCzIMLkFG",
            "TXNnLklkZW50EhAKCG5QVlBNb2RlGAIgASgFEg0KBXNjb3JlGAMgASgDEhEK",
            "CUFwcGx5VHlwZRgEIAEoBRIdCgd0ZWFtX2lkGAUgASgLMgwuQUZNc2cuSWRl",
            "bnQiOAoKRUFwcGx5VHlwZRIVChFFQXBwbHlUeXBlX1NpbmdsZRAAEhMKD0VB",
            "cHBseVR5cGVfVGVhbRABInwKEEFja1BWUEFwcGx5TWF0Y2gSHQoHc2VsZl9p",
            "ZBgBIAEoCzIMLkFGTXNnLklkZW50EiUKCXhSb29tSW5mbxgCIAEoCzISLkFG",
            "TXNnLlBWUFJvb21JbmZvEhEKCUFwcGx5VHlwZRgDIAEoBRIPCgduUmVzdWx0",
            "GAQgASgFIloKElJlcUNyZWF0ZVBWUEVjdHlwZRIdCgdzZWxmX2lkGAEgASgL",
            "MgwuQUZNc2cuSWRlbnQSJQoJeFJvb21JbmZvGAIgASgLMhIuQUZNc2cuUFZQ",
            "Um9vbUluZm8ibQoSQWNrQ3JlYXRlUFZQRWN0eXBlEh0KB3NlbGZfaWQYASAB",
            "KAsyDC5BRk1zZy5JZGVudBIlCgl4Um9vbUluZm8YAiABKAsyEi5BRk1zZy5Q",
            "VlBSb29tSW5mbxIRCglBcHBseVR5cGUYAyABKAViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::AFMsg.AFDefineReflection.Descriptor, global::AFMsg.AFMsgBaseReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqEnterGameServer), global::AFMsg.ReqEnterGameServer.Parser, new[]{ "Id", "Account", "GameId", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqHeartBeat), global::AFMsg.ReqHeartBeat.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqLeaveGameServer), global::AFMsg.ReqLeaveGameServer.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.PlayerEntryInfo), global::AFMsg.PlayerEntryInfo.Parser, new[]{ "ObjectGuid", "Pos", "CareerType", "PlayerState", "ConfigId", "SceneId", "ClassId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.AckPlayerEntryList), global::AFMsg.AckPlayerEntryList.Parser, new[]{ "ObjectList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.AckPlayerLeaveList), global::AFMsg.AckPlayerLeaveList.Parser, new[]{ "ObjectList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqAckSynData), global::AFMsg.ReqAckSynData.Parser, new[]{ "Syser", "ObjectList", "Data", "SynType", "MsgId" }, null, new[]{ typeof(global::AFMsg.ReqAckSynData.Types.SynType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqAckPlayerMove), global::AFMsg.ReqAckPlayerMove.Parser, new[]{ "Mover", "MoveType", "TargetPos", "SourcePos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ChatContainer), global::AFMsg.ChatContainer.Parser, new[]{ "ConTainerType", "DataInfo" }, null, new[]{ typeof(global::AFMsg.ChatContainer.Types.ContainerType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqAckPlayerChat), global::AFMsg.ReqAckPlayerChat.Parser, new[]{ "ChatId", "ChatType", "ChatInfo", "ChatName", "TargetId", "ContainerData" }, null, new[]{ typeof(global::AFMsg.ReqAckPlayerChat.Types.EGameChatType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.EffectData), global::AFMsg.EffectData.Parser, new[]{ "EffectIdent", "EffectValue", "EffectRlt" }, null, new[]{ typeof(global::AFMsg.EffectData.Types.EResultType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqAckUseSkill), global::AFMsg.ReqAckUseSkill.Parser, new[]{ "User", "SkillId", "NowPos", "TarPos", "UseIndex", "EffectData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqAckUseItem), global::AFMsg.ReqAckUseItem.Parser, new[]{ "User", "ItemGuid", "EffectData", "Item", "Targetid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqAckSwapScene), global::AFMsg.ReqAckSwapScene.Parser, new[]{ "TransferType", "SceneId", "LineId", "X", "Y", "Z" }, null, new[]{ typeof(global::AFMsg.ReqAckSwapScene.Types.EGameSwapType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ItemStruct), global::AFMsg.ItemStruct.Parser, new[]{ "ItemId", "ItemCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.CurrencyStruct), global::AFMsg.CurrencyStruct.Parser, new[]{ "CurrencyType", "CurrencyCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqAckEndBattle), global::AFMsg.ReqAckEndBattle.Parser, new[]{ "Money", "Exp", "Diamond", "ItemList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqPickDropItem), global::AFMsg.ReqPickDropItem.Parser, new[]{ "ItemGuid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqAcceptTask), global::AFMsg.ReqAcceptTask.Parser, new[]{ "TaskId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqCompeleteTask), global::AFMsg.ReqCompeleteTask.Parser, new[]{ "TaskId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqAckJoinActivity), global::AFMsg.ReqAckJoinActivity.Parser, new[]{ "ActivityType", "SubActivityType" }, null, new[]{ typeof(global::AFMsg.ReqAckJoinActivity.Types.EGameActivityType), typeof(global::AFMsg.ReqAckJoinActivity.Types.EGameActivitySubType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqAckSearchOppnent), global::AFMsg.ReqAckSearchOppnent.Parser, new[]{ "SearchType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqAckBattleOppnent), global::AFMsg.ReqAckBattleOppnent.Parser, new[]{ "BattleType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqAckCreateGuild), global::AFMsg.ReqAckCreateGuild.Parser, new[]{ "GuildId", "GuildName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqSearchGuild), global::AFMsg.ReqSearchGuild.Parser, new[]{ "GuildName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.AckSearchGuild), global::AFMsg.AckSearchGuild.Parser, new[]{ "GuildList" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.AckSearchGuild.Types.SearchGuildObject), global::AFMsg.AckSearchGuild.Types.SearchGuildObject.Parser, new[]{ "GuildID", "GuildName", "GuildIcon", "GuildMemberCount", "GuildMemberMaxCount", "GuildHonor", "GuildRank" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqAckJoinGuild), global::AFMsg.ReqAckJoinGuild.Parser, new[]{ "GuildId", "GuildName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqAckLeaveGuild), global::AFMsg.ReqAckLeaveGuild.Parser, new[]{ "GuildId", "GuildName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqAckOprGuildMember), global::AFMsg.ReqAckOprGuildMember.Parser, new[]{ "GuildId", "MemberId", "Type" }, null, new[]{ typeof(global::AFMsg.ReqAckOprGuildMember.Types.EGGuildMemberOprType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqAckOprGuild), global::AFMsg.ReqAckOprGuild.Parser, new[]{ "GuildId", "PlayerId", "Type", "RecruitData", "AdData" }, null, new[]{ typeof(global::AFMsg.ReqAckOprGuild.Types.EGGuildOprType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqAckDonateGuildItem), global::AFMsg.ReqAckDonateGuildItem.Parser, new[]{ "GuildId", "TargetId", "ItemList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqGuildEctypeInfo), global::AFMsg.ReqGuildEctypeInfo.Parser, new[]{ "Selfid", "GuildId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.GuildEctypeInfo), global::AFMsg.GuildEctypeInfo.Parser, new[]{ "GuildId", "ServerId", "EctypeId", "EctypeGroup" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.AckGuildEctypeInfo), global::AFMsg.AckGuildEctypeInfo.Parser, new[]{ "Selfid", "Xectypeinfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.SetGuildEctypeInfo), global::AFMsg.SetGuildEctypeInfo.Parser, new[]{ "Selfid", "Xectypeinfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqEnterGuildEctype), global::AFMsg.ReqEnterGuildEctype.Parser, new[]{ "Selfid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ChatInfo), global::AFMsg.ChatInfo.Parser, new[]{ "ChatType", "ChatInfo_", "ChatTime", "AddtionalInfo", "SendId", "SendName", "SendLevel", "RecvierId", "GuidName" }, null, new[]{ typeof(global::AFMsg.ChatInfo.Types.EChatType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqAckCreateChatGroup), global::AFMsg.ReqAckCreateChatGroup.Parser, new[]{ "Name", "Selfid", "XChatGroupid", "ChatType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqAckjoinChatGroup), global::AFMsg.ReqAckjoinChatGroup.Parser, new[]{ "Selfid", "XChatGroupid", "Result", "ChatType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqAckQuitChatGroup), global::AFMsg.ReqAckQuitChatGroup.Parser, new[]{ "Selfid", "XChatGroupid", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqSubscriptionChatGroup), global::AFMsg.ReqSubscriptionChatGroup.Parser, new[]{ "Selfid", "XChatGroupid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqCancelSubscriptionChatGroup), global::AFMsg.ReqCancelSubscriptionChatGroup.Parser, new[]{ "Selfid", "XChatGroupid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqIntensifylevelToEquip), global::AFMsg.ReqIntensifylevelToEquip.Parser, new[]{ "Selfid", "Equipid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.AckIntensifylevelToEquip), global::AFMsg.AckIntensifylevelToEquip.Parser, new[]{ "Selfid", "Equipid", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqHoleToEquip), global::AFMsg.ReqHoleToEquip.Parser, new[]{ "Selfid", "Equipid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.AckHoleToEquip), global::AFMsg.AckHoleToEquip.Parser, new[]{ "Selfid", "Equipid", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqInlaystoneToEquip), global::AFMsg.ReqInlaystoneToEquip.Parser, new[]{ "Selfid", "Equipid", "Stoneid", "HoleIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.AckInlaystoneToEquip), global::AFMsg.AckInlaystoneToEquip.Parser, new[]{ "Selfid", "Equipid", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqElementlevelToEquip), global::AFMsg.ReqElementlevelToEquip.Parser, new[]{ "Selfid", "Equipid", "EElementType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.AckElementlevelToEquip), global::AFMsg.AckElementlevelToEquip.Parser, new[]{ "Selfid", "Equipid", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqSetFightHero), global::AFMsg.ReqSetFightHero.Parser, new[]{ "Selfid", "Heroid", "FightPos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqWearEquip), global::AFMsg.ReqWearEquip.Parser, new[]{ "Selfid", "Equipid", "Targetid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.TakeOffEquip), global::AFMsg.TakeOffEquip.Parser, new[]{ "Selfid", "Equipid", "Targetid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqMiningTitle), global::AFMsg.ReqMiningTitle.Parser, new[]{ "Selfid", "X", "Y" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqSendMail), global::AFMsg.ReqSendMail.Parser, new[]{ "Selfid", "Reciever", "ItemList", "CurrencyList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqSwitchServer), global::AFMsg.ReqSwitchServer.Parser, new[]{ "Selfid", "SelfServerid", "TargetServerid", "GateServerid", "SceneID", "ClientId", "GroupID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.AckSwitchServer), global::AFMsg.AckSwitchServer.Parser, new[]{ "Selfid", "SelfServerid", "TargetServerid", "GateServerid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.TeamInfo), global::AFMsg.TeamInfo.Parser, new[]{ "TeamId", "CaptainId", "TeammemberInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.TeammemberInfo), global::AFMsg.TeammemberInfo.Parser, new[]{ "PlayerId", "Name", "NLevel", "Job", "HeadIcon" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqAckCreateTeam), global::AFMsg.ReqAckCreateTeam.Parser, new[]{ "TeamId", "XTeamInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqAckJoinTeam), global::AFMsg.ReqAckJoinTeam.Parser, new[]{ "TeamId", "XTeamInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqAckLeaveTeam), global::AFMsg.ReqAckLeaveTeam.Parser, new[]{ "TeamId", "XTeamInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqAckOprTeamMember), global::AFMsg.ReqAckOprTeamMember.Parser, new[]{ "TeamId", "MemberId", "Type", "XTeamInfo" }, null, new[]{ typeof(global::AFMsg.ReqAckOprTeamMember.Types.EGTeamMemberOprType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqAckInviteTeam), global::AFMsg.ReqAckInviteTeam.Parser, new[]{ "TeamId", "SelfId", "InviteTargetId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqTeamEnterEctype), global::AFMsg.ReqTeamEnterEctype.Parser, new[]{ "TeamId", "SelfId", "NEctypeID", "NGroupID", "NResult", "NServerID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.AckTeamEnterEctype), global::AFMsg.AckTeamEnterEctype.Parser, new[]{ "TeamId", "SelfId", "NEctypeID", "NGroupID", "NResult" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.GridGuildBaseInfo), global::AFMsg.GridGuildBaseInfo.Parser, new[]{ "Id", "Level", "Count", "Resource", "Icon" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqBigMapGridInfo), global::AFMsg.ReqBigMapGridInfo.Parser, new[]{ "MapTitleId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.BigMapGridBaseInfo), global::AFMsg.BigMapGridBaseInfo.Parser, new[]{ "Id", "GuildInfo", "KingwarTime", "Kingwarrer", "HurtingTime", "Hurter" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.BigMapLeaveMsg), global::AFMsg.BigMapLeaveMsg.Parser, new[]{ "Owner", "OwnerName", "MsgData", "MsgTime", "OwnerLevel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.BigMapWarHistory), global::AFMsg.BigMapWarHistory.Parser, new[]{ "RedInfo", "BlueInfo", "WinnerId", "WarTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.BigMapGridDetailInfo), global::AFMsg.BigMapGridDetailInfo.Parser, new[]{ "GridBaseInfo", "StayGuidList", "LeaveMsg", "WarHistory" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.AckBigMapGridInfo), global::AFMsg.AckBigMapGridInfo.Parser, new[]{ "MapData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqBigMapInfo), global::AFMsg.ReqBigMapInfo.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.AckBigMapInfo), global::AFMsg.AckBigMapInfo.Parser, new[]{ "GridBaseInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqHoldMapGrid), global::AFMsg.ReqHoldMapGrid.Parser, new[]{ "MapTitleId", "GuildId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.AckHoldMapGrid), global::AFMsg.AckHoldMapGrid.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqLeaveMapMsg), global::AFMsg.ReqLeaveMapMsg.Parser, new[]{ "MapTitleId", "LeaveMsg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.AckLeaveMapMsg), global::AFMsg.AckLeaveMapMsg.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqGetMapAward), global::AFMsg.ReqGetMapAward.Parser, new[]{ "MapTitleId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.AckGetMapAward), global::AFMsg.AckGetMapAward.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqMapHunting), global::AFMsg.ReqMapHunting.Parser, new[]{ "MapTitleId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.AckMapHunting), global::AFMsg.AckMapHunting.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqMapKingWar), global::AFMsg.ReqMapKingWar.Parser, new[]{ "MapTitleId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.AckMapKingWar), global::AFMsg.AckMapKingWar.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.PVPRoomInfo), global::AFMsg.PVPRoomInfo.Parser, new[]{ "NCellStatus", "RoomID", "NPVPMode", "NPVPGrade", "MaxPalyer", "XRedPlayer", "XBluePlayer", "Serverid", "SceneID", "GroupID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqPVPApplyMatch), global::AFMsg.ReqPVPApplyMatch.Parser, new[]{ "SelfId", "NPVPMode", "Score", "ApplyType", "TeamId" }, null, new[]{ typeof(global::AFMsg.ReqPVPApplyMatch.Types.EApplyType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.AckPVPApplyMatch), global::AFMsg.AckPVPApplyMatch.Parser, new[]{ "SelfId", "XRoomInfo", "ApplyType", "NResult" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.ReqCreatePVPEctype), global::AFMsg.ReqCreatePVPEctype.Parser, new[]{ "SelfId", "XRoomInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.AckCreatePVPEctype), global::AFMsg.AckCreatePVPEctype.Parser, new[]{ "SelfId", "XRoomInfo", "ApplyType" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ReqEnterGameServer : pb::IMessage<ReqEnterGameServer> {
    private static readonly pb::MessageParser<ReqEnterGameServer> _parser = new pb::MessageParser<ReqEnterGameServer>(() => new ReqEnterGameServer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqEnterGameServer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqEnterGameServer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqEnterGameServer(ReqEnterGameServer other) : this() {
      Id = other.id_ != null ? other.Id.Clone() : null;
      account_ = other.account_;
      gameId_ = other.gameId_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqEnterGameServer Clone() {
      return new ReqEnterGameServer(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::AFMsg.Ident id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 2;
    private string account_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 3;
    private int gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqEnterGameServer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqEnterGameServer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      if (Account != other.Account) return false;
      if (GameId != other.GameId) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (GameId != 0) hash ^= GameId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Account);
      }
      if (GameId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GameId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (GameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqEnterGameServer other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          id_ = new global::AFMsg.Ident();
        }
        Id.MergeFrom(other.Id);
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.GameId != 0) {
        GameId = other.GameId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (id_ == null) {
              id_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(id_);
            break;
          }
          case 18: {
            Account = input.ReadString();
            break;
          }
          case 24: {
            GameId = input.ReadInt32();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqHeartBeat : pb::IMessage<ReqHeartBeat> {
    private static readonly pb::MessageParser<ReqHeartBeat> _parser = new pb::MessageParser<ReqHeartBeat>(() => new ReqHeartBeat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqHeartBeat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqHeartBeat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqHeartBeat(ReqHeartBeat other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqHeartBeat Clone() {
      return new ReqHeartBeat(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqHeartBeat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqHeartBeat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqHeartBeat other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class ReqLeaveGameServer : pb::IMessage<ReqLeaveGameServer> {
    private static readonly pb::MessageParser<ReqLeaveGameServer> _parser = new pb::MessageParser<ReqLeaveGameServer>(() => new ReqLeaveGameServer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqLeaveGameServer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqLeaveGameServer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqLeaveGameServer(ReqLeaveGameServer other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqLeaveGameServer Clone() {
      return new ReqLeaveGameServer(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqLeaveGameServer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqLeaveGameServer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqLeaveGameServer other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class PlayerEntryInfo : pb::IMessage<PlayerEntryInfo> {
    private static readonly pb::MessageParser<PlayerEntryInfo> _parser = new pb::MessageParser<PlayerEntryInfo>(() => new PlayerEntryInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerEntryInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerEntryInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerEntryInfo(PlayerEntryInfo other) : this() {
      ObjectGuid = other.objectGuid_ != null ? other.ObjectGuid.Clone() : null;
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
      careerType_ = other.careerType_;
      playerState_ = other.playerState_;
      configId_ = other.configId_;
      sceneId_ = other.sceneId_;
      classId_ = other.classId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerEntryInfo Clone() {
      return new PlayerEntryInfo(this);
    }

    /// <summary>Field number for the "object_guid" field.</summary>
    public const int ObjectGuidFieldNumber = 1;
    private global::AFMsg.Ident objectGuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident ObjectGuid {
      get { return objectGuid_; }
      set {
        objectGuid_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private global::AFMsg.Point3D pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Point3D Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "career_type" field.</summary>
    public const int CareerTypeFieldNumber = 3;
    private int careerType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CareerType {
      get { return careerType_; }
      set {
        careerType_ = value;
      }
    }

    /// <summary>Field number for the "player_state" field.</summary>
    public const int PlayerStateFieldNumber = 4;
    private int playerState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerState {
      get { return playerState_; }
      set {
        playerState_ = value;
      }
    }

    /// <summary>Field number for the "config_id" field.</summary>
    public const int ConfigIdFieldNumber = 5;
    private string configId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConfigId {
      get { return configId_; }
      set {
        configId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "scene_id" field.</summary>
    public const int SceneIdFieldNumber = 6;
    private int sceneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SceneId {
      get { return sceneId_; }
      set {
        sceneId_ = value;
      }
    }

    /// <summary>Field number for the "class_id" field.</summary>
    public const int ClassIdFieldNumber = 7;
    private string classId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClassId {
      get { return classId_; }
      set {
        classId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerEntryInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerEntryInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ObjectGuid, other.ObjectGuid)) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (CareerType != other.CareerType) return false;
      if (PlayerState != other.PlayerState) return false;
      if (ConfigId != other.ConfigId) return false;
      if (SceneId != other.SceneId) return false;
      if (ClassId != other.ClassId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (objectGuid_ != null) hash ^= ObjectGuid.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (CareerType != 0) hash ^= CareerType.GetHashCode();
      if (PlayerState != 0) hash ^= PlayerState.GetHashCode();
      if (ConfigId.Length != 0) hash ^= ConfigId.GetHashCode();
      if (SceneId != 0) hash ^= SceneId.GetHashCode();
      if (ClassId.Length != 0) hash ^= ClassId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (objectGuid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ObjectGuid);
      }
      if (pos_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pos);
      }
      if (CareerType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CareerType);
      }
      if (PlayerState != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PlayerState);
      }
      if (ConfigId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ConfigId);
      }
      if (SceneId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(SceneId);
      }
      if (ClassId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ClassId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (objectGuid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ObjectGuid);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (CareerType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CareerType);
      }
      if (PlayerState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerState);
      }
      if (ConfigId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConfigId);
      }
      if (SceneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SceneId);
      }
      if (ClassId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerEntryInfo other) {
      if (other == null) {
        return;
      }
      if (other.objectGuid_ != null) {
        if (objectGuid_ == null) {
          objectGuid_ = new global::AFMsg.Ident();
        }
        ObjectGuid.MergeFrom(other.ObjectGuid);
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::AFMsg.Point3D();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.CareerType != 0) {
        CareerType = other.CareerType;
      }
      if (other.PlayerState != 0) {
        PlayerState = other.PlayerState;
      }
      if (other.ConfigId.Length != 0) {
        ConfigId = other.ConfigId;
      }
      if (other.SceneId != 0) {
        SceneId = other.SceneId;
      }
      if (other.ClassId.Length != 0) {
        ClassId = other.ClassId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (objectGuid_ == null) {
              objectGuid_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(objectGuid_);
            break;
          }
          case 18: {
            if (pos_ == null) {
              pos_ = new global::AFMsg.Point3D();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 24: {
            CareerType = input.ReadInt32();
            break;
          }
          case 32: {
            PlayerState = input.ReadInt32();
            break;
          }
          case 42: {
            ConfigId = input.ReadString();
            break;
          }
          case 48: {
            SceneId = input.ReadInt32();
            break;
          }
          case 58: {
            ClassId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AckPlayerEntryList : pb::IMessage<AckPlayerEntryList> {
    private static readonly pb::MessageParser<AckPlayerEntryList> _parser = new pb::MessageParser<AckPlayerEntryList>(() => new AckPlayerEntryList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckPlayerEntryList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckPlayerEntryList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckPlayerEntryList(AckPlayerEntryList other) : this() {
      objectList_ = other.objectList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckPlayerEntryList Clone() {
      return new AckPlayerEntryList(this);
    }

    /// <summary>Field number for the "object_list" field.</summary>
    public const int ObjectListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AFMsg.PlayerEntryInfo> _repeated_objectList_codec
        = pb::FieldCodec.ForMessage(10, global::AFMsg.PlayerEntryInfo.Parser);
    private readonly pbc::RepeatedField<global::AFMsg.PlayerEntryInfo> objectList_ = new pbc::RepeatedField<global::AFMsg.PlayerEntryInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AFMsg.PlayerEntryInfo> ObjectList {
      get { return objectList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckPlayerEntryList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckPlayerEntryList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!objectList_.Equals(other.objectList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= objectList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      objectList_.WriteTo(output, _repeated_objectList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += objectList_.CalculateSize(_repeated_objectList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckPlayerEntryList other) {
      if (other == null) {
        return;
      }
      objectList_.Add(other.objectList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            objectList_.AddEntriesFrom(input, _repeated_objectList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AckPlayerLeaveList : pb::IMessage<AckPlayerLeaveList> {
    private static readonly pb::MessageParser<AckPlayerLeaveList> _parser = new pb::MessageParser<AckPlayerLeaveList>(() => new AckPlayerLeaveList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckPlayerLeaveList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckPlayerLeaveList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckPlayerLeaveList(AckPlayerLeaveList other) : this() {
      objectList_ = other.objectList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckPlayerLeaveList Clone() {
      return new AckPlayerLeaveList(this);
    }

    /// <summary>Field number for the "object_list" field.</summary>
    public const int ObjectListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AFMsg.Ident> _repeated_objectList_codec
        = pb::FieldCodec.ForMessage(10, global::AFMsg.Ident.Parser);
    private readonly pbc::RepeatedField<global::AFMsg.Ident> objectList_ = new pbc::RepeatedField<global::AFMsg.Ident>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AFMsg.Ident> ObjectList {
      get { return objectList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckPlayerLeaveList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckPlayerLeaveList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!objectList_.Equals(other.objectList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= objectList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      objectList_.WriteTo(output, _repeated_objectList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += objectList_.CalculateSize(_repeated_objectList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckPlayerLeaveList other) {
      if (other == null) {
        return;
      }
      objectList_.Add(other.objectList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            objectList_.AddEntriesFrom(input, _repeated_objectList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqAckSynData : pb::IMessage<ReqAckSynData> {
    private static readonly pb::MessageParser<ReqAckSynData> _parser = new pb::MessageParser<ReqAckSynData>(() => new ReqAckSynData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckSynData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckSynData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckSynData(ReqAckSynData other) : this() {
      Syser = other.syser_ != null ? other.Syser.Clone() : null;
      objectList_ = other.objectList_.Clone();
      data_ = other.data_;
      synType_ = other.synType_;
      msgId_ = other.msgId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckSynData Clone() {
      return new ReqAckSynData(this);
    }

    /// <summary>Field number for the "syser" field.</summary>
    public const int SyserFieldNumber = 1;
    private global::AFMsg.Ident syser_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident Syser {
      get { return syser_; }
      set {
        syser_ = value;
      }
    }

    /// <summary>Field number for the "object_list" field.</summary>
    public const int ObjectListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::AFMsg.Ident> _repeated_objectList_codec
        = pb::FieldCodec.ForMessage(18, global::AFMsg.Ident.Parser);
    private readonly pbc::RepeatedField<global::AFMsg.Ident> objectList_ = new pbc::RepeatedField<global::AFMsg.Ident>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AFMsg.Ident> ObjectList {
      get { return objectList_; }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private string data_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "syn_type" field.</summary>
    public const int SynTypeFieldNumber = 4;
    private global::AFMsg.ReqAckSynData.Types.SynType synType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.ReqAckSynData.Types.SynType SynType {
      get { return synType_; }
      set {
        synType_ = value;
      }
    }

    /// <summary>Field number for the "msg_id" field.</summary>
    public const int MsgIdFieldNumber = 5;
    private global::AFMsg.EGameMsgID msgId_ = 0;
    /// <summary>
    ///有消息ID限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.EGameMsgID MsgId {
      get { return msgId_; }
      set {
        msgId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckSynData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckSynData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Syser, other.Syser)) return false;
      if(!objectList_.Equals(other.objectList_)) return false;
      if (Data != other.Data) return false;
      if (SynType != other.SynType) return false;
      if (MsgId != other.MsgId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (syser_ != null) hash ^= Syser.GetHashCode();
      hash ^= objectList_.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (SynType != 0) hash ^= SynType.GetHashCode();
      if (MsgId != 0) hash ^= MsgId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (syser_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Syser);
      }
      objectList_.WriteTo(output, _repeated_objectList_codec);
      if (Data.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Data);
      }
      if (SynType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) SynType);
      }
      if (MsgId != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) MsgId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (syser_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Syser);
      }
      size += objectList_.CalculateSize(_repeated_objectList_codec);
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      if (SynType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SynType);
      }
      if (MsgId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MsgId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckSynData other) {
      if (other == null) {
        return;
      }
      if (other.syser_ != null) {
        if (syser_ == null) {
          syser_ = new global::AFMsg.Ident();
        }
        Syser.MergeFrom(other.Syser);
      }
      objectList_.Add(other.objectList_);
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.SynType != 0) {
        SynType = other.SynType;
      }
      if (other.MsgId != 0) {
        MsgId = other.MsgId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (syser_ == null) {
              syser_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(syser_);
            break;
          }
          case 18: {
            objectList_.AddEntriesFrom(input, _repeated_objectList_codec);
            break;
          }
          case 26: {
            Data = input.ReadString();
            break;
          }
          case 32: {
            synType_ = (global::AFMsg.ReqAckSynData.Types.SynType) input.ReadEnum();
            break;
          }
          case 40: {
            msgId_ = (global::AFMsg.EGameMsgID) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ReqAckSynData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum SynType {
        /// <summary>
        ///无
        /// </summary>
        [pbr::OriginalName("EST_NONE")] EstNone = 0,
        /// <summary>
        ///场景
        /// </summary>
        [pbr::OriginalName("EST_SCENE")] EstScene = 1,
        /// <summary>
        ///层
        /// </summary>
        [pbr::OriginalName("EST_GROUP")] EstGroup = 2,
        /// <summary>
        ///公会
        /// </summary>
        [pbr::OriginalName("EST_GUILD")] EstGuild = 3,
        /// <summary>
        ///好友
        /// </summary>
        [pbr::OriginalName("EST_FRIEND")] EstFriend = 4,
      }

    }
    #endregion

  }

  /// <summary>
  /////////////////////////////////////////////////////////////////////////////////////////////////////
  /// </summary>
  public sealed partial class ReqAckPlayerMove : pb::IMessage<ReqAckPlayerMove> {
    private static readonly pb::MessageParser<ReqAckPlayerMove> _parser = new pb::MessageParser<ReqAckPlayerMove>(() => new ReqAckPlayerMove());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckPlayerMove> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckPlayerMove() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckPlayerMove(ReqAckPlayerMove other) : this() {
      Mover = other.mover_ != null ? other.Mover.Clone() : null;
      moveType_ = other.moveType_;
      targetPos_ = other.targetPos_.Clone();
      sourcePos_ = other.sourcePos_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckPlayerMove Clone() {
      return new ReqAckPlayerMove(this);
    }

    /// <summary>Field number for the "mover" field.</summary>
    public const int MoverFieldNumber = 1;
    private global::AFMsg.Ident mover_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident Mover {
      get { return mover_; }
      set {
        mover_ = value;
      }
    }

    /// <summary>Field number for the "moveType" field.</summary>
    public const int MoveTypeFieldNumber = 2;
    private int moveType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MoveType {
      get { return moveType_; }
      set {
        moveType_ = value;
      }
    }

    /// <summary>Field number for the "target_pos" field.</summary>
    public const int TargetPosFieldNumber = 3;
    private static readonly pb::FieldCodec<global::AFMsg.Position> _repeated_targetPos_codec
        = pb::FieldCodec.ForMessage(26, global::AFMsg.Position.Parser);
    private readonly pbc::RepeatedField<global::AFMsg.Position> targetPos_ = new pbc::RepeatedField<global::AFMsg.Position>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AFMsg.Position> TargetPos {
      get { return targetPos_; }
    }

    /// <summary>Field number for the "source_pos" field.</summary>
    public const int SourcePosFieldNumber = 4;
    private static readonly pb::FieldCodec<global::AFMsg.Position> _repeated_sourcePos_codec
        = pb::FieldCodec.ForMessage(34, global::AFMsg.Position.Parser);
    private readonly pbc::RepeatedField<global::AFMsg.Position> sourcePos_ = new pbc::RepeatedField<global::AFMsg.Position>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AFMsg.Position> SourcePos {
      get { return sourcePos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckPlayerMove);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckPlayerMove other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Mover, other.Mover)) return false;
      if (MoveType != other.MoveType) return false;
      if(!targetPos_.Equals(other.targetPos_)) return false;
      if(!sourcePos_.Equals(other.sourcePos_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (mover_ != null) hash ^= Mover.GetHashCode();
      if (MoveType != 0) hash ^= MoveType.GetHashCode();
      hash ^= targetPos_.GetHashCode();
      hash ^= sourcePos_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (mover_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Mover);
      }
      if (MoveType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MoveType);
      }
      targetPos_.WriteTo(output, _repeated_targetPos_codec);
      sourcePos_.WriteTo(output, _repeated_sourcePos_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (mover_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mover);
      }
      if (MoveType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MoveType);
      }
      size += targetPos_.CalculateSize(_repeated_targetPos_codec);
      size += sourcePos_.CalculateSize(_repeated_sourcePos_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckPlayerMove other) {
      if (other == null) {
        return;
      }
      if (other.mover_ != null) {
        if (mover_ == null) {
          mover_ = new global::AFMsg.Ident();
        }
        Mover.MergeFrom(other.Mover);
      }
      if (other.MoveType != 0) {
        MoveType = other.MoveType;
      }
      targetPos_.Add(other.targetPos_);
      sourcePos_.Add(other.sourcePos_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (mover_ == null) {
              mover_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(mover_);
            break;
          }
          case 16: {
            MoveType = input.ReadInt32();
            break;
          }
          case 26: {
            targetPos_.AddEntriesFrom(input, _repeated_targetPos_codec);
            break;
          }
          case 34: {
            sourcePos_.AddEntriesFrom(input, _repeated_sourcePos_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChatContainer : pb::IMessage<ChatContainer> {
    private static readonly pb::MessageParser<ChatContainer> _parser = new pb::MessageParser<ChatContainer>(() => new ChatContainer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChatContainer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatContainer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatContainer(ChatContainer other) : this() {
      conTainerType_ = other.conTainerType_;
      dataInfo_ = other.dataInfo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatContainer Clone() {
      return new ChatContainer(this);
    }

    /// <summary>Field number for the "ConTainerType" field.</summary>
    public const int ConTainerTypeFieldNumber = 2;
    private int conTainerType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConTainerType {
      get { return conTainerType_; }
      set {
        conTainerType_ = value;
      }
    }

    /// <summary>Field number for the "data_info" field.</summary>
    public const int DataInfoFieldNumber = 3;
    private string dataInfo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataInfo {
      get { return dataInfo_; }
      set {
        dataInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChatContainer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChatContainer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConTainerType != other.ConTainerType) return false;
      if (DataInfo != other.DataInfo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConTainerType != 0) hash ^= ConTainerType.GetHashCode();
      if (DataInfo.Length != 0) hash ^= DataInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConTainerType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ConTainerType);
      }
      if (DataInfo.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DataInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConTainerType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConTainerType);
      }
      if (DataInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChatContainer other) {
      if (other == null) {
        return;
      }
      if (other.ConTainerType != 0) {
        ConTainerType = other.ConTainerType;
      }
      if (other.DataInfo.Length != 0) {
        DataInfo = other.DataInfo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            ConTainerType = input.ReadInt32();
            break;
          }
          case 26: {
            DataInfo = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ChatContainer message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ContainerType {
        /// <summary>
        ///无
        /// </summary>
        [pbr::OriginalName("EGCT_NONE")] EgctNone = 0,
        /// <summary>
        ///道具
        /// </summary>
        [pbr::OriginalName("EGCT_ITEM")] EgctItem = 1,
      }

    }
    #endregion

  }

  public sealed partial class ReqAckPlayerChat : pb::IMessage<ReqAckPlayerChat> {
    private static readonly pb::MessageParser<ReqAckPlayerChat> _parser = new pb::MessageParser<ReqAckPlayerChat>(() => new ReqAckPlayerChat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckPlayerChat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckPlayerChat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckPlayerChat(ReqAckPlayerChat other) : this() {
      ChatId = other.chatId_ != null ? other.ChatId.Clone() : null;
      chatType_ = other.chatType_;
      chatInfo_ = other.chatInfo_;
      chatName_ = other.chatName_;
      TargetId = other.targetId_ != null ? other.TargetId.Clone() : null;
      containerData_ = other.containerData_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckPlayerChat Clone() {
      return new ReqAckPlayerChat(this);
    }

    /// <summary>Field number for the "chat_id" field.</summary>
    public const int ChatIdFieldNumber = 1;
    private global::AFMsg.Ident chatId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident ChatId {
      get { return chatId_; }
      set {
        chatId_ = value;
      }
    }

    /// <summary>Field number for the "chat_type" field.</summary>
    public const int ChatTypeFieldNumber = 2;
    private global::AFMsg.ReqAckPlayerChat.Types.EGameChatType chatType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.ReqAckPlayerChat.Types.EGameChatType ChatType {
      get { return chatType_; }
      set {
        chatType_ = value;
      }
    }

    /// <summary>Field number for the "chat_info" field.</summary>
    public const int ChatInfoFieldNumber = 3;
    private string chatInfo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChatInfo {
      get { return chatInfo_; }
      set {
        chatInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "chat_name" field.</summary>
    public const int ChatNameFieldNumber = 4;
    private string chatName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChatName {
      get { return chatName_; }
      set {
        chatName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "target_id" field.</summary>
    public const int TargetIdFieldNumber = 5;
    private global::AFMsg.Ident targetId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    /// <summary>Field number for the "Container_data" field.</summary>
    public const int ContainerDataFieldNumber = 6;
    private static readonly pb::FieldCodec<global::AFMsg.ChatContainer> _repeated_containerData_codec
        = pb::FieldCodec.ForMessage(50, global::AFMsg.ChatContainer.Parser);
    private readonly pbc::RepeatedField<global::AFMsg.ChatContainer> containerData_ = new pbc::RepeatedField<global::AFMsg.ChatContainer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AFMsg.ChatContainer> ContainerData {
      get { return containerData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckPlayerChat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckPlayerChat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ChatId, other.ChatId)) return false;
      if (ChatType != other.ChatType) return false;
      if (ChatInfo != other.ChatInfo) return false;
      if (ChatName != other.ChatName) return false;
      if (!object.Equals(TargetId, other.TargetId)) return false;
      if(!containerData_.Equals(other.containerData_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (chatId_ != null) hash ^= ChatId.GetHashCode();
      if (ChatType != 0) hash ^= ChatType.GetHashCode();
      if (ChatInfo.Length != 0) hash ^= ChatInfo.GetHashCode();
      if (ChatName.Length != 0) hash ^= ChatName.GetHashCode();
      if (targetId_ != null) hash ^= TargetId.GetHashCode();
      hash ^= containerData_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (chatId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ChatId);
      }
      if (ChatType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ChatType);
      }
      if (ChatInfo.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ChatInfo);
      }
      if (ChatName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ChatName);
      }
      if (targetId_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(TargetId);
      }
      containerData_.WriteTo(output, _repeated_containerData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (chatId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChatId);
      }
      if (ChatType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChatType);
      }
      if (ChatInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChatInfo);
      }
      if (ChatName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChatName);
      }
      if (targetId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetId);
      }
      size += containerData_.CalculateSize(_repeated_containerData_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckPlayerChat other) {
      if (other == null) {
        return;
      }
      if (other.chatId_ != null) {
        if (chatId_ == null) {
          chatId_ = new global::AFMsg.Ident();
        }
        ChatId.MergeFrom(other.ChatId);
      }
      if (other.ChatType != 0) {
        ChatType = other.ChatType;
      }
      if (other.ChatInfo.Length != 0) {
        ChatInfo = other.ChatInfo;
      }
      if (other.ChatName.Length != 0) {
        ChatName = other.ChatName;
      }
      if (other.targetId_ != null) {
        if (targetId_ == null) {
          targetId_ = new global::AFMsg.Ident();
        }
        TargetId.MergeFrom(other.TargetId);
      }
      containerData_.Add(other.containerData_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (chatId_ == null) {
              chatId_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(chatId_);
            break;
          }
          case 16: {
            chatType_ = (global::AFMsg.ReqAckPlayerChat.Types.EGameChatType) input.ReadEnum();
            break;
          }
          case 26: {
            ChatInfo = input.ReadString();
            break;
          }
          case 34: {
            ChatName = input.ReadString();
            break;
          }
          case 42: {
            if (targetId_ == null) {
              targetId_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(targetId_);
            break;
          }
          case 50: {
            containerData_.AddEntriesFrom(input, _repeated_containerData_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ReqAckPlayerChat message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EGameChatType {
        [pbr::OriginalName("EGCT_GUILD")] EgctGuild = 0,
        [pbr::OriginalName("EGCT_PRIVATE")] EgctPrivate = 1,
        [pbr::OriginalName("EGCT_TEAM")] EgctTeam = 2,
        [pbr::OriginalName("EGCT_WORLD")] EgctWorld = 3,
      }

    }
    #endregion

  }

  public sealed partial class EffectData : pb::IMessage<EffectData> {
    private static readonly pb::MessageParser<EffectData> _parser = new pb::MessageParser<EffectData>(() => new EffectData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EffectData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectData(EffectData other) : this() {
      EffectIdent = other.effectIdent_ != null ? other.EffectIdent.Clone() : null;
      effectValue_ = other.effectValue_;
      effectRlt_ = other.effectRlt_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectData Clone() {
      return new EffectData(this);
    }

    /// <summary>Field number for the "effect_ident" field.</summary>
    public const int EffectIdentFieldNumber = 1;
    private global::AFMsg.Ident effectIdent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident EffectIdent {
      get { return effectIdent_; }
      set {
        effectIdent_ = value;
      }
    }

    /// <summary>Field number for the "effect_value" field.</summary>
    public const int EffectValueFieldNumber = 2;
    private int effectValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EffectValue {
      get { return effectValue_; }
      set {
        effectValue_ = value;
      }
    }

    /// <summary>Field number for the "effect_rlt" field.</summary>
    public const int EffectRltFieldNumber = 3;
    private global::AFMsg.EffectData.Types.EResultType effectRlt_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.EffectData.Types.EResultType EffectRlt {
      get { return effectRlt_; }
      set {
        effectRlt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EffectData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EffectData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(EffectIdent, other.EffectIdent)) return false;
      if (EffectValue != other.EffectValue) return false;
      if (EffectRlt != other.EffectRlt) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (effectIdent_ != null) hash ^= EffectIdent.GetHashCode();
      if (EffectValue != 0) hash ^= EffectValue.GetHashCode();
      if (EffectRlt != 0) hash ^= EffectRlt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (effectIdent_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(EffectIdent);
      }
      if (EffectValue != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EffectValue);
      }
      if (EffectRlt != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) EffectRlt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (effectIdent_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EffectIdent);
      }
      if (EffectValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EffectValue);
      }
      if (EffectRlt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EffectRlt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EffectData other) {
      if (other == null) {
        return;
      }
      if (other.effectIdent_ != null) {
        if (effectIdent_ == null) {
          effectIdent_ = new global::AFMsg.Ident();
        }
        EffectIdent.MergeFrom(other.EffectIdent);
      }
      if (other.EffectValue != 0) {
        EffectValue = other.EffectValue;
      }
      if (other.EffectRlt != 0) {
        EffectRlt = other.EffectRlt;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (effectIdent_ == null) {
              effectIdent_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(effectIdent_);
            break;
          }
          case 16: {
            EffectValue = input.ReadInt32();
            break;
          }
          case 24: {
            effectRlt_ = (global::AFMsg.EffectData.Types.EResultType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the EffectData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EResultType {
        [pbr::OriginalName("EET_SUCCESS")] EetSuccess = 0,
        [pbr::OriginalName("EET_FAIL")] EetFail = 1,
        [pbr::OriginalName("EET_REFUSE")] EetRefuse = 2,
      }

    }
    #endregion

  }

  public sealed partial class ReqAckUseSkill : pb::IMessage<ReqAckUseSkill> {
    private static readonly pb::MessageParser<ReqAckUseSkill> _parser = new pb::MessageParser<ReqAckUseSkill>(() => new ReqAckUseSkill());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckUseSkill> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckUseSkill() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckUseSkill(ReqAckUseSkill other) : this() {
      User = other.user_ != null ? other.User.Clone() : null;
      skillId_ = other.skillId_;
      NowPos = other.nowPos_ != null ? other.NowPos.Clone() : null;
      TarPos = other.tarPos_ != null ? other.TarPos.Clone() : null;
      useIndex_ = other.useIndex_;
      effectData_ = other.effectData_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckUseSkill Clone() {
      return new ReqAckUseSkill(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private global::AFMsg.Ident user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "skill_id" field.</summary>
    public const int SkillIdFieldNumber = 2;
    private string skillId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkillId {
      get { return skillId_; }
      set {
        skillId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "now_pos" field.</summary>
    public const int NowPosFieldNumber = 3;
    private global::AFMsg.Position nowPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Position NowPos {
      get { return nowPos_; }
      set {
        nowPos_ = value;
      }
    }

    /// <summary>Field number for the "tar_pos" field.</summary>
    public const int TarPosFieldNumber = 4;
    private global::AFMsg.Position tarPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Position TarPos {
      get { return tarPos_; }
      set {
        tarPos_ = value;
      }
    }

    /// <summary>Field number for the "use_index" field.</summary>
    public const int UseIndexFieldNumber = 5;
    private int useIndex_;
    /// <summary>
    ///因为客户端要先展示
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UseIndex {
      get { return useIndex_; }
      set {
        useIndex_ = value;
      }
    }

    /// <summary>Field number for the "effect_data" field.</summary>
    public const int EffectDataFieldNumber = 6;
    private static readonly pb::FieldCodec<global::AFMsg.EffectData> _repeated_effectData_codec
        = pb::FieldCodec.ForMessage(50, global::AFMsg.EffectData.Parser);
    private readonly pbc::RepeatedField<global::AFMsg.EffectData> effectData_ = new pbc::RepeatedField<global::AFMsg.EffectData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AFMsg.EffectData> EffectData {
      get { return effectData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckUseSkill);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckUseSkill other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(User, other.User)) return false;
      if (SkillId != other.SkillId) return false;
      if (!object.Equals(NowPos, other.NowPos)) return false;
      if (!object.Equals(TarPos, other.TarPos)) return false;
      if (UseIndex != other.UseIndex) return false;
      if(!effectData_.Equals(other.effectData_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (user_ != null) hash ^= User.GetHashCode();
      if (SkillId.Length != 0) hash ^= SkillId.GetHashCode();
      if (nowPos_ != null) hash ^= NowPos.GetHashCode();
      if (tarPos_ != null) hash ^= TarPos.GetHashCode();
      if (UseIndex != 0) hash ^= UseIndex.GetHashCode();
      hash ^= effectData_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (user_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(User);
      }
      if (SkillId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SkillId);
      }
      if (nowPos_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(NowPos);
      }
      if (tarPos_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(TarPos);
      }
      if (UseIndex != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(UseIndex);
      }
      effectData_.WriteTo(output, _repeated_effectData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (SkillId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SkillId);
      }
      if (nowPos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NowPos);
      }
      if (tarPos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TarPos);
      }
      if (UseIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UseIndex);
      }
      size += effectData_.CalculateSize(_repeated_effectData_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckUseSkill other) {
      if (other == null) {
        return;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          user_ = new global::AFMsg.Ident();
        }
        User.MergeFrom(other.User);
      }
      if (other.SkillId.Length != 0) {
        SkillId = other.SkillId;
      }
      if (other.nowPos_ != null) {
        if (nowPos_ == null) {
          nowPos_ = new global::AFMsg.Position();
        }
        NowPos.MergeFrom(other.NowPos);
      }
      if (other.tarPos_ != null) {
        if (tarPos_ == null) {
          tarPos_ = new global::AFMsg.Position();
        }
        TarPos.MergeFrom(other.TarPos);
      }
      if (other.UseIndex != 0) {
        UseIndex = other.UseIndex;
      }
      effectData_.Add(other.effectData_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (user_ == null) {
              user_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(user_);
            break;
          }
          case 18: {
            SkillId = input.ReadString();
            break;
          }
          case 26: {
            if (nowPos_ == null) {
              nowPos_ = new global::AFMsg.Position();
            }
            input.ReadMessage(nowPos_);
            break;
          }
          case 34: {
            if (tarPos_ == null) {
              tarPos_ = new global::AFMsg.Position();
            }
            input.ReadMessage(tarPos_);
            break;
          }
          case 40: {
            UseIndex = input.ReadInt32();
            break;
          }
          case 50: {
            effectData_.AddEntriesFrom(input, _repeated_effectData_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqAckUseItem : pb::IMessage<ReqAckUseItem> {
    private static readonly pb::MessageParser<ReqAckUseItem> _parser = new pb::MessageParser<ReqAckUseItem>(() => new ReqAckUseItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckUseItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckUseItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckUseItem(ReqAckUseItem other) : this() {
      User = other.user_ != null ? other.User.Clone() : null;
      ItemGuid = other.itemGuid_ != null ? other.ItemGuid.Clone() : null;
      effectData_ = other.effectData_.Clone();
      Item = other.item_ != null ? other.Item.Clone() : null;
      Targetid = other.targetid_ != null ? other.Targetid.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckUseItem Clone() {
      return new ReqAckUseItem(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private global::AFMsg.Ident user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "item_guid" field.</summary>
    public const int ItemGuidFieldNumber = 2;
    private global::AFMsg.Ident itemGuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident ItemGuid {
      get { return itemGuid_; }
      set {
        itemGuid_ = value;
      }
    }

    /// <summary>Field number for the "effect_data" field.</summary>
    public const int EffectDataFieldNumber = 3;
    private static readonly pb::FieldCodec<global::AFMsg.EffectData> _repeated_effectData_codec
        = pb::FieldCodec.ForMessage(26, global::AFMsg.EffectData.Parser);
    private readonly pbc::RepeatedField<global::AFMsg.EffectData> effectData_ = new pbc::RepeatedField<global::AFMsg.EffectData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AFMsg.EffectData> EffectData {
      get { return effectData_; }
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 4;
    private global::AFMsg.ItemStruct item_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.ItemStruct Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    /// <summary>Field number for the "targetid" field.</summary>
    public const int TargetidFieldNumber = 5;
    private global::AFMsg.Ident targetid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident Targetid {
      get { return targetid_; }
      set {
        targetid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckUseItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckUseItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(User, other.User)) return false;
      if (!object.Equals(ItemGuid, other.ItemGuid)) return false;
      if(!effectData_.Equals(other.effectData_)) return false;
      if (!object.Equals(Item, other.Item)) return false;
      if (!object.Equals(Targetid, other.Targetid)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (user_ != null) hash ^= User.GetHashCode();
      if (itemGuid_ != null) hash ^= ItemGuid.GetHashCode();
      hash ^= effectData_.GetHashCode();
      if (item_ != null) hash ^= Item.GetHashCode();
      if (targetid_ != null) hash ^= Targetid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (user_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(User);
      }
      if (itemGuid_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ItemGuid);
      }
      effectData_.WriteTo(output, _repeated_effectData_codec);
      if (item_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Item);
      }
      if (targetid_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Targetid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (itemGuid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ItemGuid);
      }
      size += effectData_.CalculateSize(_repeated_effectData_codec);
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      if (targetid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Targetid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckUseItem other) {
      if (other == null) {
        return;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          user_ = new global::AFMsg.Ident();
        }
        User.MergeFrom(other.User);
      }
      if (other.itemGuid_ != null) {
        if (itemGuid_ == null) {
          itemGuid_ = new global::AFMsg.Ident();
        }
        ItemGuid.MergeFrom(other.ItemGuid);
      }
      effectData_.Add(other.effectData_);
      if (other.item_ != null) {
        if (item_ == null) {
          item_ = new global::AFMsg.ItemStruct();
        }
        Item.MergeFrom(other.Item);
      }
      if (other.targetid_ != null) {
        if (targetid_ == null) {
          targetid_ = new global::AFMsg.Ident();
        }
        Targetid.MergeFrom(other.Targetid);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (user_ == null) {
              user_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(user_);
            break;
          }
          case 18: {
            if (itemGuid_ == null) {
              itemGuid_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(itemGuid_);
            break;
          }
          case 26: {
            effectData_.AddEntriesFrom(input, _repeated_effectData_codec);
            break;
          }
          case 34: {
            if (item_ == null) {
              item_ = new global::AFMsg.ItemStruct();
            }
            input.ReadMessage(item_);
            break;
          }
          case 42: {
            if (targetid_ == null) {
              targetid_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(targetid_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqAckSwapScene : pb::IMessage<ReqAckSwapScene> {
    private static readonly pb::MessageParser<ReqAckSwapScene> _parser = new pb::MessageParser<ReqAckSwapScene>(() => new ReqAckSwapScene());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckSwapScene> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckSwapScene() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckSwapScene(ReqAckSwapScene other) : this() {
      transferType_ = other.transferType_;
      sceneId_ = other.sceneId_;
      lineId_ = other.lineId_;
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckSwapScene Clone() {
      return new ReqAckSwapScene(this);
    }

    /// <summary>Field number for the "transfer_type" field.</summary>
    public const int TransferTypeFieldNumber = 1;
    private global::AFMsg.ReqAckSwapScene.Types.EGameSwapType transferType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.ReqAckSwapScene.Types.EGameSwapType TransferType {
      get { return transferType_; }
      set {
        transferType_ = value;
      }
    }

    /// <summary>Field number for the "scene_id" field.</summary>
    public const int SceneIdFieldNumber = 2;
    private int sceneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SceneId {
      get { return sceneId_; }
      set {
        sceneId_ = value;
      }
    }

    /// <summary>Field number for the "line_id" field.</summary>
    public const int LineIdFieldNumber = 3;
    private int lineId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LineId {
      get { return lineId_; }
      set {
        lineId_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 4;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 5;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 6;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckSwapScene);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckSwapScene other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransferType != other.TransferType) return false;
      if (SceneId != other.SceneId) return false;
      if (LineId != other.LineId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TransferType != 0) hash ^= TransferType.GetHashCode();
      if (SceneId != 0) hash ^= SceneId.GetHashCode();
      if (LineId != 0) hash ^= LineId.GetHashCode();
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TransferType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) TransferType);
      }
      if (SceneId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SceneId);
      }
      if (LineId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LineId);
      }
      if (X != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TransferType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TransferType);
      }
      if (SceneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SceneId);
      }
      if (LineId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LineId);
      }
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckSwapScene other) {
      if (other == null) {
        return;
      }
      if (other.TransferType != 0) {
        TransferType = other.TransferType;
      }
      if (other.SceneId != 0) {
        SceneId = other.SceneId;
      }
      if (other.LineId != 0) {
        LineId = other.LineId;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            transferType_ = (global::AFMsg.ReqAckSwapScene.Types.EGameSwapType) input.ReadEnum();
            break;
          }
          case 16: {
            SceneId = input.ReadInt32();
            break;
          }
          case 24: {
            LineId = input.ReadInt32();
            break;
          }
          case 37: {
            X = input.ReadFloat();
            break;
          }
          case 45: {
            Y = input.ReadFloat();
            break;
          }
          case 53: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ReqAckSwapScene message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EGameSwapType {
        /// <summary>
        ///普通城镇传送
        /// </summary>
        [pbr::OriginalName("EGST_NARMAL")] EgstNarmal = 0,
        /// <summary>
        ///普通副本
        /// </summary>
        [pbr::OriginalName("EGST_CLONE")] EgstClone = 1,
        /// <summary>
        ///竞技场
        /// </summary>
        [pbr::OriginalName("EGST_ARENA")] EgstArena = 2,
        /// <summary>
        ///镜像空间
        /// </summary>
        [pbr::OriginalName("EGST_MIRROR")] EgstMirror = 3,
      }

    }
    #endregion

  }

  public sealed partial class ItemStruct : pb::IMessage<ItemStruct> {
    private static readonly pb::MessageParser<ItemStruct> _parser = new pb::MessageParser<ItemStruct>(() => new ItemStruct());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemStruct> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemStruct() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemStruct(ItemStruct other) : this() {
      itemId_ = other.itemId_;
      itemCount_ = other.itemCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemStruct Clone() {
      return new ItemStruct(this);
    }

    /// <summary>Field number for the "item_id" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private string itemId_ = "";
    /// <summary>
    /// 配置ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemId {
      get { return itemId_; }
      set {
        itemId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "item_count" field.</summary>
    public const int ItemCountFieldNumber = 2;
    private int itemCount_;
    /// <summary>
    /// 数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemCount {
      get { return itemCount_; }
      set {
        itemCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemStruct);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemStruct other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemId != other.ItemId) return false;
      if (ItemCount != other.ItemCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemId.Length != 0) hash ^= ItemId.GetHashCode();
      if (ItemCount != 0) hash ^= ItemCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ItemId);
      }
      if (ItemCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ItemId);
      }
      if (ItemCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemStruct other) {
      if (other == null) {
        return;
      }
      if (other.ItemId.Length != 0) {
        ItemId = other.ItemId;
      }
      if (other.ItemCount != 0) {
        ItemCount = other.ItemCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ItemId = input.ReadString();
            break;
          }
          case 16: {
            ItemCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CurrencyStruct : pb::IMessage<CurrencyStruct> {
    private static readonly pb::MessageParser<CurrencyStruct> _parser = new pb::MessageParser<CurrencyStruct>(() => new CurrencyStruct());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CurrencyStruct> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrencyStruct() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrencyStruct(CurrencyStruct other) : this() {
      currencyType_ = other.currencyType_;
      currencyCount_ = other.currencyCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrencyStruct Clone() {
      return new CurrencyStruct(this);
    }

    /// <summary>Field number for the "currency_type" field.</summary>
    public const int CurrencyTypeFieldNumber = 1;
    private int currencyType_;
    /// <summary>
    /// 金币，钻石，体力等等东西的类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrencyType {
      get { return currencyType_; }
      set {
        currencyType_ = value;
      }
    }

    /// <summary>Field number for the "currency_count" field.</summary>
    public const int CurrencyCountFieldNumber = 2;
    private int currencyCount_;
    /// <summary>
    /// 数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrencyCount {
      get { return currencyCount_; }
      set {
        currencyCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CurrencyStruct);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CurrencyStruct other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrencyType != other.CurrencyType) return false;
      if (CurrencyCount != other.CurrencyCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrencyType != 0) hash ^= CurrencyType.GetHashCode();
      if (CurrencyCount != 0) hash ^= CurrencyCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrencyType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurrencyType);
      }
      if (CurrencyCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurrencyCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrencyType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrencyType);
      }
      if (CurrencyCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrencyCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CurrencyStruct other) {
      if (other == null) {
        return;
      }
      if (other.CurrencyType != 0) {
        CurrencyType = other.CurrencyType;
      }
      if (other.CurrencyCount != 0) {
        CurrencyCount = other.CurrencyCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CurrencyType = input.ReadInt32();
            break;
          }
          case 16: {
            CurrencyCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqAckEndBattle : pb::IMessage<ReqAckEndBattle> {
    private static readonly pb::MessageParser<ReqAckEndBattle> _parser = new pb::MessageParser<ReqAckEndBattle>(() => new ReqAckEndBattle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckEndBattle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckEndBattle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckEndBattle(ReqAckEndBattle other) : this() {
      money_ = other.money_;
      exp_ = other.exp_;
      diamond_ = other.diamond_;
      itemList_ = other.itemList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckEndBattle Clone() {
      return new ReqAckEndBattle(this);
    }

    /// <summary>Field number for the "money" field.</summary>
    public const int MoneyFieldNumber = 1;
    private int money_;
    /// <summary>
    ///下发的时候则为道具列表
    ///获得的金币等列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Money {
      get { return money_; }
      set {
        money_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 2;
    private int exp_;
    /// <summary>
    /// 副本获得的经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "diamond" field.</summary>
    public const int DiamondFieldNumber = 3;
    private int diamond_;
    /// <summary>
    /// 副本获得的经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Diamond {
      get { return diamond_; }
      set {
        diamond_ = value;
      }
    }

    /// <summary>Field number for the "item_list" field.</summary>
    public const int ItemListFieldNumber = 4;
    private static readonly pb::FieldCodec<global::AFMsg.ItemStruct> _repeated_itemList_codec
        = pb::FieldCodec.ForMessage(34, global::AFMsg.ItemStruct.Parser);
    private readonly pbc::RepeatedField<global::AFMsg.ItemStruct> itemList_ = new pbc::RepeatedField<global::AFMsg.ItemStruct>();
    /// <summary>
    /// 副本获得的道具列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AFMsg.ItemStruct> ItemList {
      get { return itemList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckEndBattle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckEndBattle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Money != other.Money) return false;
      if (Exp != other.Exp) return false;
      if (Diamond != other.Diamond) return false;
      if(!itemList_.Equals(other.itemList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Money != 0) hash ^= Money.GetHashCode();
      if (Exp != 0) hash ^= Exp.GetHashCode();
      if (Diamond != 0) hash ^= Diamond.GetHashCode();
      hash ^= itemList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Money != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Money);
      }
      if (Exp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Exp);
      }
      if (Diamond != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Diamond);
      }
      itemList_.WriteTo(output, _repeated_itemList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Money != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Money);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      if (Diamond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Diamond);
      }
      size += itemList_.CalculateSize(_repeated_itemList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckEndBattle other) {
      if (other == null) {
        return;
      }
      if (other.Money != 0) {
        Money = other.Money;
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      if (other.Diamond != 0) {
        Diamond = other.Diamond;
      }
      itemList_.Add(other.itemList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Money = input.ReadInt32();
            break;
          }
          case 16: {
            Exp = input.ReadInt32();
            break;
          }
          case 24: {
            Diamond = input.ReadInt32();
            break;
          }
          case 34: {
            itemList_.AddEntriesFrom(input, _repeated_itemList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqPickDropItem : pb::IMessage<ReqPickDropItem> {
    private static readonly pb::MessageParser<ReqPickDropItem> _parser = new pb::MessageParser<ReqPickDropItem>(() => new ReqPickDropItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqPickDropItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqPickDropItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqPickDropItem(ReqPickDropItem other) : this() {
      ItemGuid = other.itemGuid_ != null ? other.ItemGuid.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqPickDropItem Clone() {
      return new ReqPickDropItem(this);
    }

    /// <summary>Field number for the "item_guid" field.</summary>
    public const int ItemGuidFieldNumber = 2;
    private global::AFMsg.Ident itemGuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident ItemGuid {
      get { return itemGuid_; }
      set {
        itemGuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqPickDropItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqPickDropItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ItemGuid, other.ItemGuid)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (itemGuid_ != null) hash ^= ItemGuid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (itemGuid_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ItemGuid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (itemGuid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ItemGuid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqPickDropItem other) {
      if (other == null) {
        return;
      }
      if (other.itemGuid_ != null) {
        if (itemGuid_ == null) {
          itemGuid_ = new global::AFMsg.Ident();
        }
        ItemGuid.MergeFrom(other.ItemGuid);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            if (itemGuid_ == null) {
              itemGuid_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(itemGuid_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqAcceptTask : pb::IMessage<ReqAcceptTask> {
    private static readonly pb::MessageParser<ReqAcceptTask> _parser = new pb::MessageParser<ReqAcceptTask>(() => new ReqAcceptTask());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAcceptTask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAcceptTask() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAcceptTask(ReqAcceptTask other) : this() {
      taskId_ = other.taskId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAcceptTask Clone() {
      return new ReqAcceptTask(this);
    }

    /// <summary>Field number for the "task_id" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private string taskId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskId {
      get { return taskId_; }
      set {
        taskId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAcceptTask);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAcceptTask other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskId != other.TaskId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaskId.Length != 0) hash ^= TaskId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TaskId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAcceptTask other) {
      if (other == null) {
        return;
      }
      if (other.TaskId.Length != 0) {
        TaskId = other.TaskId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TaskId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqCompeleteTask : pb::IMessage<ReqCompeleteTask> {
    private static readonly pb::MessageParser<ReqCompeleteTask> _parser = new pb::MessageParser<ReqCompeleteTask>(() => new ReqCompeleteTask());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqCompeleteTask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqCompeleteTask() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqCompeleteTask(ReqCompeleteTask other) : this() {
      taskId_ = other.taskId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqCompeleteTask Clone() {
      return new ReqCompeleteTask(this);
    }

    /// <summary>Field number for the "task_id" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private string taskId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskId {
      get { return taskId_; }
      set {
        taskId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqCompeleteTask);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqCompeleteTask other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskId != other.TaskId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaskId.Length != 0) hash ^= TaskId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TaskId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqCompeleteTask other) {
      if (other == null) {
        return;
      }
      if (other.TaskId.Length != 0) {
        TaskId = other.TaskId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TaskId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqAckJoinActivity : pb::IMessage<ReqAckJoinActivity> {
    private static readonly pb::MessageParser<ReqAckJoinActivity> _parser = new pb::MessageParser<ReqAckJoinActivity>(() => new ReqAckJoinActivity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckJoinActivity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckJoinActivity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckJoinActivity(ReqAckJoinActivity other) : this() {
      activityType_ = other.activityType_;
      subActivityType_ = other.subActivityType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckJoinActivity Clone() {
      return new ReqAckJoinActivity(this);
    }

    /// <summary>Field number for the "activity_type" field.</summary>
    public const int ActivityTypeFieldNumber = 1;
    private global::AFMsg.ReqAckJoinActivity.Types.EGameActivityType activityType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.ReqAckJoinActivity.Types.EGameActivityType ActivityType {
      get { return activityType_; }
      set {
        activityType_ = value;
      }
    }

    /// <summary>Field number for the "sub_activity_type" field.</summary>
    public const int SubActivityTypeFieldNumber = 2;
    private global::AFMsg.ReqAckJoinActivity.Types.EGameActivitySubType subActivityType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.ReqAckJoinActivity.Types.EGameActivitySubType SubActivityType {
      get { return subActivityType_; }
      set {
        subActivityType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckJoinActivity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckJoinActivity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActivityType != other.ActivityType) return false;
      if (SubActivityType != other.SubActivityType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActivityType != 0) hash ^= ActivityType.GetHashCode();
      if (SubActivityType != 0) hash ^= SubActivityType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ActivityType);
      }
      if (SubActivityType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) SubActivityType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActivityType);
      }
      if (SubActivityType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SubActivityType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckJoinActivity other) {
      if (other == null) {
        return;
      }
      if (other.ActivityType != 0) {
        ActivityType = other.ActivityType;
      }
      if (other.SubActivityType != 0) {
        SubActivityType = other.SubActivityType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            activityType_ = (global::AFMsg.ReqAckJoinActivity.Types.EGameActivityType) input.ReadEnum();
            break;
          }
          case 16: {
            subActivityType_ = (global::AFMsg.ReqAckJoinActivity.Types.EGameActivitySubType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ReqAckJoinActivity message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EGameActivityType {
        /// <summary>
        ///普通PVP对战活动
        /// </summary>
        [pbr::OriginalName("EGAT_PVP")] EgatPvp = 0,
      }

      public enum EGameActivitySubType {
        /// <summary>
        ///普通难度
        /// </summary>
        [pbr::OriginalName("EGAT_NORMAL")] EgatNormal = 0,
      }

    }
    #endregion

  }

  public sealed partial class ReqAckSearchOppnent : pb::IMessage<ReqAckSearchOppnent> {
    private static readonly pb::MessageParser<ReqAckSearchOppnent> _parser = new pb::MessageParser<ReqAckSearchOppnent>(() => new ReqAckSearchOppnent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckSearchOppnent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckSearchOppnent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckSearchOppnent(ReqAckSearchOppnent other) : this() {
      searchType_ = other.searchType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckSearchOppnent Clone() {
      return new ReqAckSearchOppnent(this);
    }

    /// <summary>Field number for the "search_type" field.</summary>
    public const int SearchTypeFieldNumber = 1;
    private global::AFMsg.EBattleType searchType_ = 0;
    /// <summary>
    ///EGameActivitySubType	sub_activity_type = 2;//回来要带对手数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.EBattleType SearchType {
      get { return searchType_; }
      set {
        searchType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckSearchOppnent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckSearchOppnent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SearchType != other.SearchType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SearchType != 0) hash ^= SearchType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SearchType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) SearchType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SearchType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SearchType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckSearchOppnent other) {
      if (other == null) {
        return;
      }
      if (other.SearchType != 0) {
        SearchType = other.SearchType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            searchType_ = (global::AFMsg.EBattleType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqAckBattleOppnent : pb::IMessage<ReqAckBattleOppnent> {
    private static readonly pb::MessageParser<ReqAckBattleOppnent> _parser = new pb::MessageParser<ReqAckBattleOppnent>(() => new ReqAckBattleOppnent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckBattleOppnent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckBattleOppnent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckBattleOppnent(ReqAckBattleOppnent other) : this() {
      battleType_ = other.battleType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckBattleOppnent Clone() {
      return new ReqAckBattleOppnent(this);
    }

    /// <summary>Field number for the "battle_type" field.</summary>
    public const int BattleTypeFieldNumber = 1;
    private global::AFMsg.EBattleType battleType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.EBattleType BattleType {
      get { return battleType_; }
      set {
        battleType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckBattleOppnent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckBattleOppnent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BattleType != other.BattleType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BattleType != 0) hash ^= BattleType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) BattleType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BattleType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckBattleOppnent other) {
      if (other == null) {
        return;
      }
      if (other.BattleType != 0) {
        BattleType = other.BattleType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            battleType_ = (global::AFMsg.EBattleType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ////////////////工会/////////////////////////////////////////////////////////////////////////////////////
  ///EGMI_REQ_CREATE_GUILD                       = 300; // 申请创建公会 EGMI_ACK_CREATE_GUILD						= 301; // 创建公会结果
  /// </summary>
  public sealed partial class ReqAckCreateGuild : pb::IMessage<ReqAckCreateGuild> {
    private static readonly pb::MessageParser<ReqAckCreateGuild> _parser = new pb::MessageParser<ReqAckCreateGuild>(() => new ReqAckCreateGuild());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckCreateGuild> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckCreateGuild() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckCreateGuild(ReqAckCreateGuild other) : this() {
      GuildId = other.guildId_ != null ? other.GuildId.Clone() : null;
      guildName_ = other.guildName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckCreateGuild Clone() {
      return new ReqAckCreateGuild(this);
    }

    /// <summary>Field number for the "guild_id" field.</summary>
    public const int GuildIdFieldNumber = 1;
    private global::AFMsg.Ident guildId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    /// <summary>Field number for the "guild_name" field.</summary>
    public const int GuildNameFieldNumber = 2;
    private string guildName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GuildName {
      get { return guildName_; }
      set {
        guildName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckCreateGuild);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckCreateGuild other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GuildId, other.GuildId)) return false;
      if (GuildName != other.GuildName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (guildId_ != null) hash ^= GuildId.GetHashCode();
      if (GuildName.Length != 0) hash ^= GuildName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (guildId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GuildId);
      }
      if (GuildName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GuildName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (guildId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GuildId);
      }
      if (GuildName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GuildName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckCreateGuild other) {
      if (other == null) {
        return;
      }
      if (other.guildId_ != null) {
        if (guildId_ == null) {
          guildId_ = new global::AFMsg.Ident();
        }
        GuildId.MergeFrom(other.GuildId);
      }
      if (other.GuildName.Length != 0) {
        GuildName = other.GuildName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (guildId_ == null) {
              guildId_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(guildId_);
            break;
          }
          case 18: {
            GuildName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGMI_REQ_SEARCH_GUILD                       = 308; // 申请搜索公会
  /// </summary>
  public sealed partial class ReqSearchGuild : pb::IMessage<ReqSearchGuild> {
    private static readonly pb::MessageParser<ReqSearchGuild> _parser = new pb::MessageParser<ReqSearchGuild>(() => new ReqSearchGuild());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqSearchGuild> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSearchGuild() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSearchGuild(ReqSearchGuild other) : this() {
      guildName_ = other.guildName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSearchGuild Clone() {
      return new ReqSearchGuild(this);
    }

    /// <summary>Field number for the "guild_name" field.</summary>
    public const int GuildNameFieldNumber = 1;
    private string guildName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GuildName {
      get { return guildName_; }
      set {
        guildName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqSearchGuild);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqSearchGuild other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GuildName != other.GuildName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GuildName.Length != 0) hash ^= GuildName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GuildName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GuildName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GuildName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GuildName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqSearchGuild other) {
      if (other == null) {
        return;
      }
      if (other.GuildName.Length != 0) {
        GuildName = other.GuildName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GuildName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGMI_ACK_SEARCH_GUILD                       = 309; // 返回搜索公会
  /// </summary>
  public sealed partial class AckSearchGuild : pb::IMessage<AckSearchGuild> {
    private static readonly pb::MessageParser<AckSearchGuild> _parser = new pb::MessageParser<AckSearchGuild>(() => new AckSearchGuild());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckSearchGuild> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckSearchGuild() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckSearchGuild(AckSearchGuild other) : this() {
      guildList_ = other.guildList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckSearchGuild Clone() {
      return new AckSearchGuild(this);
    }

    /// <summary>Field number for the "guild_list" field.</summary>
    public const int GuildListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AFMsg.AckSearchGuild.Types.SearchGuildObject> _repeated_guildList_codec
        = pb::FieldCodec.ForMessage(10, global::AFMsg.AckSearchGuild.Types.SearchGuildObject.Parser);
    private readonly pbc::RepeatedField<global::AFMsg.AckSearchGuild.Types.SearchGuildObject> guildList_ = new pbc::RepeatedField<global::AFMsg.AckSearchGuild.Types.SearchGuildObject>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AFMsg.AckSearchGuild.Types.SearchGuildObject> GuildList {
      get { return guildList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckSearchGuild);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckSearchGuild other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!guildList_.Equals(other.guildList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= guildList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      guildList_.WriteTo(output, _repeated_guildList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += guildList_.CalculateSize(_repeated_guildList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckSearchGuild other) {
      if (other == null) {
        return;
      }
      guildList_.Add(other.guildList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            guildList_.AddEntriesFrom(input, _repeated_guildList_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AckSearchGuild message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class SearchGuildObject : pb::IMessage<SearchGuildObject> {
        private static readonly pb::MessageParser<SearchGuildObject> _parser = new pb::MessageParser<SearchGuildObject>(() => new SearchGuildObject());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SearchGuildObject> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::AFMsg.AckSearchGuild.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SearchGuildObject() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SearchGuildObject(SearchGuildObject other) : this() {
          GuildID = other.guildID_ != null ? other.GuildID.Clone() : null;
          guildName_ = other.guildName_;
          guildIcon_ = other.guildIcon_;
          guildMemberCount_ = other.guildMemberCount_;
          guildMemberMaxCount_ = other.guildMemberMaxCount_;
          guildHonor_ = other.guildHonor_;
          guildRank_ = other.guildRank_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SearchGuildObject Clone() {
          return new SearchGuildObject(this);
        }

        /// <summary>Field number for the "guild_ID" field.</summary>
        public const int GuildIDFieldNumber = 1;
        private global::AFMsg.Ident guildID_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::AFMsg.Ident GuildID {
          get { return guildID_; }
          set {
            guildID_ = value;
          }
        }

        /// <summary>Field number for the "guild_name" field.</summary>
        public const int GuildNameFieldNumber = 2;
        private string guildName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string GuildName {
          get { return guildName_; }
          set {
            guildName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "guild_icon" field.</summary>
        public const int GuildIconFieldNumber = 3;
        private string guildIcon_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string GuildIcon {
          get { return guildIcon_; }
          set {
            guildIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "guild_member_count" field.</summary>
        public const int GuildMemberCountFieldNumber = 4;
        private int guildMemberCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int GuildMemberCount {
          get { return guildMemberCount_; }
          set {
            guildMemberCount_ = value;
          }
        }

        /// <summary>Field number for the "guild_member_max_count" field.</summary>
        public const int GuildMemberMaxCountFieldNumber = 5;
        private int guildMemberMaxCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int GuildMemberMaxCount {
          get { return guildMemberMaxCount_; }
          set {
            guildMemberMaxCount_ = value;
          }
        }

        /// <summary>Field number for the "guild_honor" field.</summary>
        public const int GuildHonorFieldNumber = 6;
        private int guildHonor_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int GuildHonor {
          get { return guildHonor_; }
          set {
            guildHonor_ = value;
          }
        }

        /// <summary>Field number for the "guild_rank" field.</summary>
        public const int GuildRankFieldNumber = 7;
        private int guildRank_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int GuildRank {
          get { return guildRank_; }
          set {
            guildRank_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SearchGuildObject);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SearchGuildObject other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(GuildID, other.GuildID)) return false;
          if (GuildName != other.GuildName) return false;
          if (GuildIcon != other.GuildIcon) return false;
          if (GuildMemberCount != other.GuildMemberCount) return false;
          if (GuildMemberMaxCount != other.GuildMemberMaxCount) return false;
          if (GuildHonor != other.GuildHonor) return false;
          if (GuildRank != other.GuildRank) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (guildID_ != null) hash ^= GuildID.GetHashCode();
          if (GuildName.Length != 0) hash ^= GuildName.GetHashCode();
          if (GuildIcon.Length != 0) hash ^= GuildIcon.GetHashCode();
          if (GuildMemberCount != 0) hash ^= GuildMemberCount.GetHashCode();
          if (GuildMemberMaxCount != 0) hash ^= GuildMemberMaxCount.GetHashCode();
          if (GuildHonor != 0) hash ^= GuildHonor.GetHashCode();
          if (GuildRank != 0) hash ^= GuildRank.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (guildID_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(GuildID);
          }
          if (GuildName.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(GuildName);
          }
          if (GuildIcon.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(GuildIcon);
          }
          if (GuildMemberCount != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(GuildMemberCount);
          }
          if (GuildMemberMaxCount != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(GuildMemberMaxCount);
          }
          if (GuildHonor != 0) {
            output.WriteRawTag(48);
            output.WriteInt32(GuildHonor);
          }
          if (GuildRank != 0) {
            output.WriteRawTag(56);
            output.WriteInt32(GuildRank);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (guildID_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(GuildID);
          }
          if (GuildName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(GuildName);
          }
          if (GuildIcon.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(GuildIcon);
          }
          if (GuildMemberCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuildMemberCount);
          }
          if (GuildMemberMaxCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuildMemberMaxCount);
          }
          if (GuildHonor != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuildHonor);
          }
          if (GuildRank != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuildRank);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SearchGuildObject other) {
          if (other == null) {
            return;
          }
          if (other.guildID_ != null) {
            if (guildID_ == null) {
              guildID_ = new global::AFMsg.Ident();
            }
            GuildID.MergeFrom(other.GuildID);
          }
          if (other.GuildName.Length != 0) {
            GuildName = other.GuildName;
          }
          if (other.GuildIcon.Length != 0) {
            GuildIcon = other.GuildIcon;
          }
          if (other.GuildMemberCount != 0) {
            GuildMemberCount = other.GuildMemberCount;
          }
          if (other.GuildMemberMaxCount != 0) {
            GuildMemberMaxCount = other.GuildMemberMaxCount;
          }
          if (other.GuildHonor != 0) {
            GuildHonor = other.GuildHonor;
          }
          if (other.GuildRank != 0) {
            GuildRank = other.GuildRank;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (guildID_ == null) {
                  guildID_ = new global::AFMsg.Ident();
                }
                input.ReadMessage(guildID_);
                break;
              }
              case 18: {
                GuildName = input.ReadString();
                break;
              }
              case 26: {
                GuildIcon = input.ReadString();
                break;
              }
              case 32: {
                GuildMemberCount = input.ReadInt32();
                break;
              }
              case 40: {
                GuildMemberMaxCount = input.ReadInt32();
                break;
              }
              case 48: {
                GuildHonor = input.ReadInt32();
                break;
              }
              case 56: {
                GuildRank = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///EGMI_REQ_JOIN_GUILD                         = 302; // 申请加入公会 EGMI_ACK_JOIN_GUILD							= 303; // 加入公会结果
  /// </summary>
  public sealed partial class ReqAckJoinGuild : pb::IMessage<ReqAckJoinGuild> {
    private static readonly pb::MessageParser<ReqAckJoinGuild> _parser = new pb::MessageParser<ReqAckJoinGuild>(() => new ReqAckJoinGuild());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckJoinGuild> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckJoinGuild() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckJoinGuild(ReqAckJoinGuild other) : this() {
      GuildId = other.guildId_ != null ? other.GuildId.Clone() : null;
      guildName_ = other.guildName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckJoinGuild Clone() {
      return new ReqAckJoinGuild(this);
    }

    /// <summary>Field number for the "guild_id" field.</summary>
    public const int GuildIdFieldNumber = 1;
    private global::AFMsg.Ident guildId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    /// <summary>Field number for the "guild_name" field.</summary>
    public const int GuildNameFieldNumber = 2;
    private string guildName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GuildName {
      get { return guildName_; }
      set {
        guildName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckJoinGuild);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckJoinGuild other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GuildId, other.GuildId)) return false;
      if (GuildName != other.GuildName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (guildId_ != null) hash ^= GuildId.GetHashCode();
      if (GuildName.Length != 0) hash ^= GuildName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (guildId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GuildId);
      }
      if (GuildName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GuildName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (guildId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GuildId);
      }
      if (GuildName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GuildName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckJoinGuild other) {
      if (other == null) {
        return;
      }
      if (other.guildId_ != null) {
        if (guildId_ == null) {
          guildId_ = new global::AFMsg.Ident();
        }
        GuildId.MergeFrom(other.GuildId);
      }
      if (other.GuildName.Length != 0) {
        GuildName = other.GuildName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (guildId_ == null) {
              guildId_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(guildId_);
            break;
          }
          case 18: {
            GuildName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGMI_ACK_LEAVE_GUILD						= 305; // 离开公会结果 
  /// </summary>
  public sealed partial class ReqAckLeaveGuild : pb::IMessage<ReqAckLeaveGuild> {
    private static readonly pb::MessageParser<ReqAckLeaveGuild> _parser = new pb::MessageParser<ReqAckLeaveGuild>(() => new ReqAckLeaveGuild());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckLeaveGuild> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckLeaveGuild() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckLeaveGuild(ReqAckLeaveGuild other) : this() {
      GuildId = other.guildId_ != null ? other.GuildId.Clone() : null;
      guildName_ = other.guildName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckLeaveGuild Clone() {
      return new ReqAckLeaveGuild(this);
    }

    /// <summary>Field number for the "guild_id" field.</summary>
    public const int GuildIdFieldNumber = 1;
    private global::AFMsg.Ident guildId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    /// <summary>Field number for the "guild_name" field.</summary>
    public const int GuildNameFieldNumber = 2;
    private string guildName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GuildName {
      get { return guildName_; }
      set {
        guildName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckLeaveGuild);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckLeaveGuild other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GuildId, other.GuildId)) return false;
      if (GuildName != other.GuildName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (guildId_ != null) hash ^= GuildId.GetHashCode();
      if (GuildName.Length != 0) hash ^= GuildName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (guildId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GuildId);
      }
      if (GuildName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GuildName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (guildId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GuildId);
      }
      if (GuildName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GuildName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckLeaveGuild other) {
      if (other == null) {
        return;
      }
      if (other.guildId_ != null) {
        if (guildId_ == null) {
          guildId_ = new global::AFMsg.Ident();
        }
        GuildId.MergeFrom(other.GuildId);
      }
      if (other.GuildName.Length != 0) {
        GuildName = other.GuildName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (guildId_ == null) {
              guildId_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(guildId_);
            break;
          }
          case 18: {
            GuildName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///操作成员 EGMI_REQ_OPR_GUILD                        	= 306; // 申请成员操作 EGMI_ACK_OPR_GUILD                        	= 307; // 成员操作结果
  /// </summary>
  public sealed partial class ReqAckOprGuildMember : pb::IMessage<ReqAckOprGuildMember> {
    private static readonly pb::MessageParser<ReqAckOprGuildMember> _parser = new pb::MessageParser<ReqAckOprGuildMember>(() => new ReqAckOprGuildMember());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckOprGuildMember> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckOprGuildMember() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckOprGuildMember(ReqAckOprGuildMember other) : this() {
      GuildId = other.guildId_ != null ? other.GuildId.Clone() : null;
      MemberId = other.memberId_ != null ? other.MemberId.Clone() : null;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckOprGuildMember Clone() {
      return new ReqAckOprGuildMember(this);
    }

    /// <summary>Field number for the "guild_id" field.</summary>
    public const int GuildIdFieldNumber = 1;
    private global::AFMsg.Ident guildId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    /// <summary>Field number for the "member_id" field.</summary>
    public const int MemberIdFieldNumber = 2;
    private global::AFMsg.Ident memberId_;
    /// <summary>
    ///被操作的ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident MemberId {
      get { return memberId_; }
      set {
        memberId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private global::AFMsg.ReqAckOprGuildMember.Types.EGGuildMemberOprType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.ReqAckOprGuildMember.Types.EGGuildMemberOprType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckOprGuildMember);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckOprGuildMember other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GuildId, other.GuildId)) return false;
      if (!object.Equals(MemberId, other.MemberId)) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (guildId_ != null) hash ^= GuildId.GetHashCode();
      if (memberId_ != null) hash ^= MemberId.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (guildId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GuildId);
      }
      if (memberId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MemberId);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (guildId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GuildId);
      }
      if (memberId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MemberId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckOprGuildMember other) {
      if (other == null) {
        return;
      }
      if (other.guildId_ != null) {
        if (guildId_ == null) {
          guildId_ = new global::AFMsg.Ident();
        }
        GuildId.MergeFrom(other.GuildId);
      }
      if (other.memberId_ != null) {
        if (memberId_ == null) {
          memberId_ = new global::AFMsg.Ident();
        }
        MemberId.MergeFrom(other.MemberId);
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (guildId_ == null) {
              guildId_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(guildId_);
            break;
          }
          case 18: {
            if (memberId_ == null) {
              memberId_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(memberId_);
            break;
          }
          case 24: {
            type_ = (global::AFMsg.ReqAckOprGuildMember.Types.EGGuildMemberOprType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ReqAckOprGuildMember message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EGGuildMemberOprType {
        [pbr::OriginalName("EGAT_DOWN")] EgatDown = 0,
        [pbr::OriginalName("EGAT_UP")] EgatUp = 1,
        [pbr::OriginalName("EGAT_KICK")] EgatKick = 2,
        /// <summary>
        ///任命
        /// </summary>
        [pbr::OriginalName("EGAT_APPOINT")] EgatAppoint = 3,
        /// <summary>
        ///撤职
        /// </summary>
        [pbr::OriginalName("EGAT_FIRE")] EgatFire = 4,
        /// <summary>
        ///禅让
        /// </summary>
        [pbr::OriginalName("EGAT_DEMISE")] EgatDemise = 5,
        /// <summary>
        ///收人
        /// </summary>
        [pbr::OriginalName("EGAT_ACCEPTAPPLY")] EgatAcceptapply = 6,
        /// <summary>
        ///拒收
        /// </summary>
        [pbr::OriginalName("EGAT_DENYAPPLY")] EgatDenyapply = 7,
        /// <summary>
        ///开除
        /// </summary>
        [pbr::OriginalName("EGAT_KICKOUT")] EgatKickout = 8,
      }

    }
    #endregion

  }

  /// <summary>
  ///EGMI_REQ_OPR_GUILDINFO						= 310; // 申请公会操作   EGMI_ACK_OPR_GUILDINFO						= 311; // 公会操作结果
  /// </summary>
  public sealed partial class ReqAckOprGuild : pb::IMessage<ReqAckOprGuild> {
    private static readonly pb::MessageParser<ReqAckOprGuild> _parser = new pb::MessageParser<ReqAckOprGuild>(() => new ReqAckOprGuild());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckOprGuild> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckOprGuild() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckOprGuild(ReqAckOprGuild other) : this() {
      GuildId = other.guildId_ != null ? other.GuildId.Clone() : null;
      PlayerId = other.playerId_ != null ? other.PlayerId.Clone() : null;
      type_ = other.type_;
      recruitData_ = other.recruitData_;
      adData_ = other.adData_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckOprGuild Clone() {
      return new ReqAckOprGuild(this);
    }

    /// <summary>Field number for the "guild_id" field.</summary>
    public const int GuildIdFieldNumber = 1;
    private global::AFMsg.Ident guildId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private global::AFMsg.Ident playerId_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private global::AFMsg.ReqAckOprGuild.Types.EGGuildOprType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.ReqAckOprGuild.Types.EGGuildOprType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "Recruit_data" field.</summary>
    public const int RecruitDataFieldNumber = 4;
    private string recruitData_ = "";
    /// <summary>
    ///招募信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RecruitData {
      get { return recruitData_; }
      set {
        recruitData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ad_data" field.</summary>
    public const int AdDataFieldNumber = 5;
    private string adData_ = "";
    /// <summary>
    ///公告信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AdData {
      get { return adData_; }
      set {
        adData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckOprGuild);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckOprGuild other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GuildId, other.GuildId)) return false;
      if (!object.Equals(PlayerId, other.PlayerId)) return false;
      if (Type != other.Type) return false;
      if (RecruitData != other.RecruitData) return false;
      if (AdData != other.AdData) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (guildId_ != null) hash ^= GuildId.GetHashCode();
      if (playerId_ != null) hash ^= PlayerId.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (RecruitData.Length != 0) hash ^= RecruitData.GetHashCode();
      if (AdData.Length != 0) hash ^= AdData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (guildId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GuildId);
      }
      if (playerId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PlayerId);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
      if (RecruitData.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RecruitData);
      }
      if (AdData.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(AdData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (guildId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GuildId);
      }
      if (playerId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (RecruitData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RecruitData);
      }
      if (AdData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AdData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckOprGuild other) {
      if (other == null) {
        return;
      }
      if (other.guildId_ != null) {
        if (guildId_ == null) {
          guildId_ = new global::AFMsg.Ident();
        }
        GuildId.MergeFrom(other.GuildId);
      }
      if (other.playerId_ != null) {
        if (playerId_ == null) {
          playerId_ = new global::AFMsg.Ident();
        }
        PlayerId.MergeFrom(other.PlayerId);
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.RecruitData.Length != 0) {
        RecruitData = other.RecruitData;
      }
      if (other.AdData.Length != 0) {
        AdData = other.AdData;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (guildId_ == null) {
              guildId_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(guildId_);
            break;
          }
          case 18: {
            if (playerId_ == null) {
              playerId_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(playerId_);
            break;
          }
          case 24: {
            type_ = (global::AFMsg.ReqAckOprGuild.Types.EGGuildOprType) input.ReadEnum();
            break;
          }
          case 34: {
            RecruitData = input.ReadString();
            break;
          }
          case 42: {
            AdData = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ReqAckOprGuild message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EGGuildOprType {
        /// <summary>
        ///无	
        /// </summary>
        [pbr::OriginalName("EGAT_NONE")] EgatNone = 0,
        /// <summary>
        ///申请解散军团
        /// </summary>
        [pbr::OriginalName("EGAT_APPLYDISMISS")] EgatApplydismiss = 1,
        /// <summary>
        ///中止解散军团
        /// </summary>
        [pbr::OriginalName("EGAT_STOPDISMISS")] EgatStopdismiss = 2,
        /// <summary>
        ///设置招募
        /// </summary>
        [pbr::OriginalName("EGAT_SETRECRUIT")] EgatSetrecruit = 3,
        /// <summary>
        ///发布招募
        /// </summary>
        [pbr::OriginalName("EGAT_PUBLISHRECRUIT")] EgatPublishrecruit = 4,
        /// <summary>
        ///编辑公告
        /// </summary>
        [pbr::OriginalName("EGAT_EDITAD")] EgatEditad = 5,
        /// <summary>
        ///军团升级
        /// </summary>
        [pbr::OriginalName("EGAT_LEVELUP")] EgatLevelup = 6,
      }

    }
    #endregion

  }

  public sealed partial class ReqAckDonateGuildItem : pb::IMessage<ReqAckDonateGuildItem> {
    private static readonly pb::MessageParser<ReqAckDonateGuildItem> _parser = new pb::MessageParser<ReqAckDonateGuildItem>(() => new ReqAckDonateGuildItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckDonateGuildItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckDonateGuildItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckDonateGuildItem(ReqAckDonateGuildItem other) : this() {
      GuildId = other.guildId_ != null ? other.GuildId.Clone() : null;
      TargetId = other.targetId_ != null ? other.TargetId.Clone() : null;
      itemList_ = other.itemList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckDonateGuildItem Clone() {
      return new ReqAckDonateGuildItem(this);
    }

    /// <summary>Field number for the "guild_id" field.</summary>
    public const int GuildIdFieldNumber = 1;
    private global::AFMsg.Ident guildId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    /// <summary>Field number for the "target_id" field.</summary>
    public const int TargetIdFieldNumber = 2;
    private global::AFMsg.Ident targetId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    /// <summary>Field number for the "item_list" field.</summary>
    public const int ItemListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::AFMsg.ItemStruct> _repeated_itemList_codec
        = pb::FieldCodec.ForMessage(26, global::AFMsg.ItemStruct.Parser);
    private readonly pbc::RepeatedField<global::AFMsg.ItemStruct> itemList_ = new pbc::RepeatedField<global::AFMsg.ItemStruct>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AFMsg.ItemStruct> ItemList {
      get { return itemList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckDonateGuildItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckDonateGuildItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GuildId, other.GuildId)) return false;
      if (!object.Equals(TargetId, other.TargetId)) return false;
      if(!itemList_.Equals(other.itemList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (guildId_ != null) hash ^= GuildId.GetHashCode();
      if (targetId_ != null) hash ^= TargetId.GetHashCode();
      hash ^= itemList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (guildId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GuildId);
      }
      if (targetId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TargetId);
      }
      itemList_.WriteTo(output, _repeated_itemList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (guildId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GuildId);
      }
      if (targetId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetId);
      }
      size += itemList_.CalculateSize(_repeated_itemList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckDonateGuildItem other) {
      if (other == null) {
        return;
      }
      if (other.guildId_ != null) {
        if (guildId_ == null) {
          guildId_ = new global::AFMsg.Ident();
        }
        GuildId.MergeFrom(other.GuildId);
      }
      if (other.targetId_ != null) {
        if (targetId_ == null) {
          targetId_ = new global::AFMsg.Ident();
        }
        TargetId.MergeFrom(other.TargetId);
      }
      itemList_.Add(other.itemList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (guildId_ == null) {
              guildId_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(guildId_);
            break;
          }
          case 18: {
            if (targetId_ == null) {
              targetId_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(targetId_);
            break;
          }
          case 26: {
            itemList_.AddEntriesFrom(input, _repeated_itemList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGMI_REQ_GUILDECTYPEINFO					= 312; // 申请公会副本
  /// </summary>
  public sealed partial class ReqGuildEctypeInfo : pb::IMessage<ReqGuildEctypeInfo> {
    private static readonly pb::MessageParser<ReqGuildEctypeInfo> _parser = new pb::MessageParser<ReqGuildEctypeInfo>(() => new ReqGuildEctypeInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqGuildEctypeInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqGuildEctypeInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqGuildEctypeInfo(ReqGuildEctypeInfo other) : this() {
      Selfid = other.selfid_ != null ? other.Selfid.Clone() : null;
      GuildId = other.guildId_ != null ? other.GuildId.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqGuildEctypeInfo Clone() {
      return new ReqGuildEctypeInfo(this);
    }

    /// <summary>Field number for the "selfid" field.</summary>
    public const int SelfidFieldNumber = 1;
    private global::AFMsg.Ident selfid_;
    /// <summary>
    ///角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident Selfid {
      get { return selfid_; }
      set {
        selfid_ = value;
      }
    }

    /// <summary>Field number for the "guild_id" field.</summary>
    public const int GuildIdFieldNumber = 2;
    private global::AFMsg.Ident guildId_;
    /// <summary>
    ///工会副本	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqGuildEctypeInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqGuildEctypeInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Selfid, other.Selfid)) return false;
      if (!object.Equals(GuildId, other.GuildId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (selfid_ != null) hash ^= Selfid.GetHashCode();
      if (guildId_ != null) hash ^= GuildId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (selfid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Selfid);
      }
      if (guildId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(GuildId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (selfid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Selfid);
      }
      if (guildId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GuildId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqGuildEctypeInfo other) {
      if (other == null) {
        return;
      }
      if (other.selfid_ != null) {
        if (selfid_ == null) {
          selfid_ = new global::AFMsg.Ident();
        }
        Selfid.MergeFrom(other.Selfid);
      }
      if (other.guildId_ != null) {
        if (guildId_ == null) {
          guildId_ = new global::AFMsg.Ident();
        }
        GuildId.MergeFrom(other.GuildId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (selfid_ == null) {
              selfid_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(selfid_);
            break;
          }
          case 18: {
            if (guildId_ == null) {
              guildId_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(guildId_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GuildEctypeInfo : pb::IMessage<GuildEctypeInfo> {
    private static readonly pb::MessageParser<GuildEctypeInfo> _parser = new pb::MessageParser<GuildEctypeInfo>(() => new GuildEctypeInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuildEctypeInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildEctypeInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildEctypeInfo(GuildEctypeInfo other) : this() {
      GuildId = other.guildId_ != null ? other.GuildId.Clone() : null;
      serverId_ = other.serverId_;
      ectypeId_ = other.ectypeId_;
      ectypeGroup_ = other.ectypeGroup_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuildEctypeInfo Clone() {
      return new GuildEctypeInfo(this);
    }

    /// <summary>Field number for the "guild_id" field.</summary>
    public const int GuildIdFieldNumber = 1;
    private global::AFMsg.Ident guildId_;
    /// <summary>
    ///角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    /// <summary>Field number for the "server_id" field.</summary>
    public const int ServerIdFieldNumber = 2;
    private long serverId_;
    /// <summary>
    ///所在服务ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "Ectype_id" field.</summary>
    public const int EctypeIdFieldNumber = 3;
    private long ectypeId_;
    /// <summary>
    ///副本ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EctypeId {
      get { return ectypeId_; }
      set {
        ectypeId_ = value;
      }
    }

    /// <summary>Field number for the "Ectype_Group" field.</summary>
    public const int EctypeGroupFieldNumber = 4;
    private long ectypeGroup_;
    /// <summary>
    ///副本层	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EctypeGroup {
      get { return ectypeGroup_; }
      set {
        ectypeGroup_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GuildEctypeInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GuildEctypeInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GuildId, other.GuildId)) return false;
      if (ServerId != other.ServerId) return false;
      if (EctypeId != other.EctypeId) return false;
      if (EctypeGroup != other.EctypeGroup) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (guildId_ != null) hash ^= GuildId.GetHashCode();
      if (ServerId != 0L) hash ^= ServerId.GetHashCode();
      if (EctypeId != 0L) hash ^= EctypeId.GetHashCode();
      if (EctypeGroup != 0L) hash ^= EctypeGroup.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (guildId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GuildId);
      }
      if (ServerId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ServerId);
      }
      if (EctypeId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(EctypeId);
      }
      if (EctypeGroup != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(EctypeGroup);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (guildId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GuildId);
      }
      if (ServerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ServerId);
      }
      if (EctypeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EctypeId);
      }
      if (EctypeGroup != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EctypeGroup);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GuildEctypeInfo other) {
      if (other == null) {
        return;
      }
      if (other.guildId_ != null) {
        if (guildId_ == null) {
          guildId_ = new global::AFMsg.Ident();
        }
        GuildId.MergeFrom(other.GuildId);
      }
      if (other.ServerId != 0L) {
        ServerId = other.ServerId;
      }
      if (other.EctypeId != 0L) {
        EctypeId = other.EctypeId;
      }
      if (other.EctypeGroup != 0L) {
        EctypeGroup = other.EctypeGroup;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (guildId_ == null) {
              guildId_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(guildId_);
            break;
          }
          case 16: {
            ServerId = input.ReadInt64();
            break;
          }
          case 24: {
            EctypeId = input.ReadInt64();
            break;
          }
          case 32: {
            EctypeGroup = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGMI_ACK_GUILDECTYPEINFO					= 313; // 工会副本的信息
  /// </summary>
  public sealed partial class AckGuildEctypeInfo : pb::IMessage<AckGuildEctypeInfo> {
    private static readonly pb::MessageParser<AckGuildEctypeInfo> _parser = new pb::MessageParser<AckGuildEctypeInfo>(() => new AckGuildEctypeInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckGuildEctypeInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckGuildEctypeInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckGuildEctypeInfo(AckGuildEctypeInfo other) : this() {
      Selfid = other.selfid_ != null ? other.Selfid.Clone() : null;
      Xectypeinfo = other.xectypeinfo_ != null ? other.Xectypeinfo.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckGuildEctypeInfo Clone() {
      return new AckGuildEctypeInfo(this);
    }

    /// <summary>Field number for the "selfid" field.</summary>
    public const int SelfidFieldNumber = 1;
    private global::AFMsg.Ident selfid_;
    /// <summary>
    ///角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident Selfid {
      get { return selfid_; }
      set {
        selfid_ = value;
      }
    }

    /// <summary>Field number for the "xectypeinfo" field.</summary>
    public const int XectypeinfoFieldNumber = 2;
    private global::AFMsg.GuildEctypeInfo xectypeinfo_;
    /// <summary>
    ///工会副本的信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.GuildEctypeInfo Xectypeinfo {
      get { return xectypeinfo_; }
      set {
        xectypeinfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckGuildEctypeInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckGuildEctypeInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Selfid, other.Selfid)) return false;
      if (!object.Equals(Xectypeinfo, other.Xectypeinfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (selfid_ != null) hash ^= Selfid.GetHashCode();
      if (xectypeinfo_ != null) hash ^= Xectypeinfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (selfid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Selfid);
      }
      if (xectypeinfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Xectypeinfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (selfid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Selfid);
      }
      if (xectypeinfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Xectypeinfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckGuildEctypeInfo other) {
      if (other == null) {
        return;
      }
      if (other.selfid_ != null) {
        if (selfid_ == null) {
          selfid_ = new global::AFMsg.Ident();
        }
        Selfid.MergeFrom(other.Selfid);
      }
      if (other.xectypeinfo_ != null) {
        if (xectypeinfo_ == null) {
          xectypeinfo_ = new global::AFMsg.GuildEctypeInfo();
        }
        Xectypeinfo.MergeFrom(other.Xectypeinfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (selfid_ == null) {
              selfid_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(selfid_);
            break;
          }
          case 18: {
            if (xectypeinfo_ == null) {
              xectypeinfo_ = new global::AFMsg.GuildEctypeInfo();
            }
            input.ReadMessage(xectypeinfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGMI_SET_GUILDECTYPEINFO					= 314; // 设置工会副本的信息
  /// </summary>
  public sealed partial class SetGuildEctypeInfo : pb::IMessage<SetGuildEctypeInfo> {
    private static readonly pb::MessageParser<SetGuildEctypeInfo> _parser = new pb::MessageParser<SetGuildEctypeInfo>(() => new SetGuildEctypeInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetGuildEctypeInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetGuildEctypeInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetGuildEctypeInfo(SetGuildEctypeInfo other) : this() {
      Selfid = other.selfid_ != null ? other.Selfid.Clone() : null;
      Xectypeinfo = other.xectypeinfo_ != null ? other.Xectypeinfo.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetGuildEctypeInfo Clone() {
      return new SetGuildEctypeInfo(this);
    }

    /// <summary>Field number for the "selfid" field.</summary>
    public const int SelfidFieldNumber = 1;
    private global::AFMsg.Ident selfid_;
    /// <summary>
    ///角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident Selfid {
      get { return selfid_; }
      set {
        selfid_ = value;
      }
    }

    /// <summary>Field number for the "xectypeinfo" field.</summary>
    public const int XectypeinfoFieldNumber = 2;
    private global::AFMsg.GuildEctypeInfo xectypeinfo_;
    /// <summary>
    ///工会副本的信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.GuildEctypeInfo Xectypeinfo {
      get { return xectypeinfo_; }
      set {
        xectypeinfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetGuildEctypeInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetGuildEctypeInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Selfid, other.Selfid)) return false;
      if (!object.Equals(Xectypeinfo, other.Xectypeinfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (selfid_ != null) hash ^= Selfid.GetHashCode();
      if (xectypeinfo_ != null) hash ^= Xectypeinfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (selfid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Selfid);
      }
      if (xectypeinfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Xectypeinfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (selfid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Selfid);
      }
      if (xectypeinfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Xectypeinfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetGuildEctypeInfo other) {
      if (other == null) {
        return;
      }
      if (other.selfid_ != null) {
        if (selfid_ == null) {
          selfid_ = new global::AFMsg.Ident();
        }
        Selfid.MergeFrom(other.Selfid);
      }
      if (other.xectypeinfo_ != null) {
        if (xectypeinfo_ == null) {
          xectypeinfo_ = new global::AFMsg.GuildEctypeInfo();
        }
        Xectypeinfo.MergeFrom(other.Xectypeinfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (selfid_ == null) {
              selfid_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(selfid_);
            break;
          }
          case 18: {
            if (xectypeinfo_ == null) {
              xectypeinfo_ = new global::AFMsg.GuildEctypeInfo();
            }
            input.ReadMessage(xectypeinfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGMI_ReqEnterGuildEctype					= 315; // 
  /// </summary>
  public sealed partial class ReqEnterGuildEctype : pb::IMessage<ReqEnterGuildEctype> {
    private static readonly pb::MessageParser<ReqEnterGuildEctype> _parser = new pb::MessageParser<ReqEnterGuildEctype>(() => new ReqEnterGuildEctype());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqEnterGuildEctype> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqEnterGuildEctype() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqEnterGuildEctype(ReqEnterGuildEctype other) : this() {
      Selfid = other.selfid_ != null ? other.Selfid.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqEnterGuildEctype Clone() {
      return new ReqEnterGuildEctype(this);
    }

    /// <summary>Field number for the "selfid" field.</summary>
    public const int SelfidFieldNumber = 1;
    private global::AFMsg.Ident selfid_;
    /// <summary>
    ///角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident Selfid {
      get { return selfid_; }
      set {
        selfid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqEnterGuildEctype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqEnterGuildEctype other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Selfid, other.Selfid)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (selfid_ != null) hash ^= Selfid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (selfid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Selfid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (selfid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Selfid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqEnterGuildEctype other) {
      if (other == null) {
        return;
      }
      if (other.selfid_ != null) {
        if (selfid_ == null) {
          selfid_ = new global::AFMsg.Ident();
        }
        Selfid.MergeFrom(other.Selfid);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (selfid_ == null) {
              selfid_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(selfid_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChatInfo : pb::IMessage<ChatInfo> {
    private static readonly pb::MessageParser<ChatInfo> _parser = new pb::MessageParser<ChatInfo>(() => new ChatInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChatInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatInfo(ChatInfo other) : this() {
      chatType_ = other.chatType_;
      chatInfo_ = other.chatInfo_;
      chatTime_ = other.chatTime_;
      addtionalInfo_ = other.addtionalInfo_;
      SendId = other.sendId_ != null ? other.SendId.Clone() : null;
      sendName_ = other.sendName_;
      sendLevel_ = other.sendLevel_;
      recvierId_ = other.recvierId_.Clone();
      guidName_ = other.guidName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatInfo Clone() {
      return new ChatInfo(this);
    }

    /// <summary>Field number for the "chat_type" field.</summary>
    public const int ChatTypeFieldNumber = 1;
    private global::AFMsg.ChatInfo.Types.EChatType chatType_ = 0;
    /// <summary>
    ///01普通2世界
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.ChatInfo.Types.EChatType ChatType {
      get { return chatType_; }
      set {
        chatType_ = value;
      }
    }

    /// <summary>Field number for the "chat_info" field.</summary>
    public const int ChatInfo_FieldNumber = 2;
    private string chatInfo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChatInfo_ {
      get { return chatInfo_; }
      set {
        chatInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "chat_time" field.</summary>
    public const int ChatTimeFieldNumber = 3;
    private long chatTime_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ChatTime {
      get { return chatTime_; }
      set {
        chatTime_ = value;
      }
    }

    /// <summary>Field number for the "addtional_info" field.</summary>
    public const int AddtionalInfoFieldNumber = 4;
    private string addtionalInfo_ = "";
    /// <summary>
    ///附件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AddtionalInfo {
      get { return addtionalInfo_; }
      set {
        addtionalInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "send_id" field.</summary>
    public const int SendIdFieldNumber = 5;
    private global::AFMsg.Ident sendId_;
    /// <summary>
    ///发送者的ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident SendId {
      get { return sendId_; }
      set {
        sendId_ = value;
      }
    }

    /// <summary>Field number for the "send_name" field.</summary>
    public const int SendNameFieldNumber = 6;
    private string sendName_ = "";
    /// <summary>
    ///发送者的名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SendName {
      get { return sendName_; }
      set {
        sendName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "send_level" field.</summary>
    public const int SendLevelFieldNumber = 7;
    private int sendLevel_;
    /// <summary>
    ///发送者的等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SendLevel {
      get { return sendLevel_; }
      set {
        sendLevel_ = value;
      }
    }

    /// <summary>Field number for the "recvier_id" field.</summary>
    public const int RecvierIdFieldNumber = 8;
    private static readonly pb::FieldCodec<global::AFMsg.Ident> _repeated_recvierId_codec
        = pb::FieldCodec.ForMessage(66, global::AFMsg.Ident.Parser);
    private readonly pbc::RepeatedField<global::AFMsg.Ident> recvierId_ = new pbc::RepeatedField<global::AFMsg.Ident>();
    /// <summary>
    ///接收者列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AFMsg.Ident> RecvierId {
      get { return recvierId_; }
    }

    /// <summary>Field number for the "guid_name" field.</summary>
    public const int GuidNameFieldNumber = 9;
    private string guidName_ = "";
    /// <summary>
    ///公会名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GuidName {
      get { return guidName_; }
      set {
        guidName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChatInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChatInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChatType != other.ChatType) return false;
      if (ChatInfo_ != other.ChatInfo_) return false;
      if (ChatTime != other.ChatTime) return false;
      if (AddtionalInfo != other.AddtionalInfo) return false;
      if (!object.Equals(SendId, other.SendId)) return false;
      if (SendName != other.SendName) return false;
      if (SendLevel != other.SendLevel) return false;
      if(!recvierId_.Equals(other.recvierId_)) return false;
      if (GuidName != other.GuidName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChatType != 0) hash ^= ChatType.GetHashCode();
      if (ChatInfo_.Length != 0) hash ^= ChatInfo_.GetHashCode();
      if (ChatTime != 0L) hash ^= ChatTime.GetHashCode();
      if (AddtionalInfo.Length != 0) hash ^= AddtionalInfo.GetHashCode();
      if (sendId_ != null) hash ^= SendId.GetHashCode();
      if (SendName.Length != 0) hash ^= SendName.GetHashCode();
      if (SendLevel != 0) hash ^= SendLevel.GetHashCode();
      hash ^= recvierId_.GetHashCode();
      if (GuidName.Length != 0) hash ^= GuidName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChatType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ChatType);
      }
      if (ChatInfo_.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ChatInfo_);
      }
      if (ChatTime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(ChatTime);
      }
      if (AddtionalInfo.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AddtionalInfo);
      }
      if (sendId_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(SendId);
      }
      if (SendName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(SendName);
      }
      if (SendLevel != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(SendLevel);
      }
      recvierId_.WriteTo(output, _repeated_recvierId_codec);
      if (GuidName.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(GuidName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChatType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChatType);
      }
      if (ChatInfo_.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChatInfo_);
      }
      if (ChatTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ChatTime);
      }
      if (AddtionalInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AddtionalInfo);
      }
      if (sendId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SendId);
      }
      if (SendName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SendName);
      }
      if (SendLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SendLevel);
      }
      size += recvierId_.CalculateSize(_repeated_recvierId_codec);
      if (GuidName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GuidName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChatInfo other) {
      if (other == null) {
        return;
      }
      if (other.ChatType != 0) {
        ChatType = other.ChatType;
      }
      if (other.ChatInfo_.Length != 0) {
        ChatInfo_ = other.ChatInfo_;
      }
      if (other.ChatTime != 0L) {
        ChatTime = other.ChatTime;
      }
      if (other.AddtionalInfo.Length != 0) {
        AddtionalInfo = other.AddtionalInfo;
      }
      if (other.sendId_ != null) {
        if (sendId_ == null) {
          sendId_ = new global::AFMsg.Ident();
        }
        SendId.MergeFrom(other.SendId);
      }
      if (other.SendName.Length != 0) {
        SendName = other.SendName;
      }
      if (other.SendLevel != 0) {
        SendLevel = other.SendLevel;
      }
      recvierId_.Add(other.recvierId_);
      if (other.GuidName.Length != 0) {
        GuidName = other.GuidName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            chatType_ = (global::AFMsg.ChatInfo.Types.EChatType) input.ReadEnum();
            break;
          }
          case 18: {
            ChatInfo_ = input.ReadString();
            break;
          }
          case 24: {
            ChatTime = input.ReadInt64();
            break;
          }
          case 34: {
            AddtionalInfo = input.ReadString();
            break;
          }
          case 42: {
            if (sendId_ == null) {
              sendId_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(sendId_);
            break;
          }
          case 50: {
            SendName = input.ReadString();
            break;
          }
          case 56: {
            SendLevel = input.ReadInt32();
            break;
          }
          case 66: {
            recvierId_.AddEntriesFrom(input, _repeated_recvierId_codec);
            break;
          }
          case 74: {
            GuidName = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ChatInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EChatType {
        /// <summary>
        ///普通
        /// </summary>
        [pbr::OriginalName("ECHATTYPE_NORMAL")] Normal = 0,
        /// <summary>
        ///私聊
        /// </summary>
        [pbr::OriginalName("ECHATTYPE_PRIVATE")] Private = 1,
        /// <summary>
        ///公会
        /// </summary>
        [pbr::OriginalName("ECHATTYPE_GUILD")] Guild = 2,
        /// <summary>
        ///世界
        /// </summary>
        [pbr::OriginalName("ECHATTYPE_WORLD")] World = 3,
      }

    }
    #endregion

  }

  public sealed partial class ReqAckCreateChatGroup : pb::IMessage<ReqAckCreateChatGroup> {
    private static readonly pb::MessageParser<ReqAckCreateChatGroup> _parser = new pb::MessageParser<ReqAckCreateChatGroup>(() => new ReqAckCreateChatGroup());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckCreateChatGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckCreateChatGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckCreateChatGroup(ReqAckCreateChatGroup other) : this() {
      name_ = other.name_;
      Selfid = other.selfid_ != null ? other.Selfid.Clone() : null;
      XChatGroupid = other.xChatGroupid_ != null ? other.XChatGroupid.Clone() : null;
      chatType_ = other.chatType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckCreateChatGroup Clone() {
      return new ReqAckCreateChatGroup(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "selfid" field.</summary>
    public const int SelfidFieldNumber = 2;
    private global::AFMsg.Ident selfid_;
    /// <summary>
    ///角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident Selfid {
      get { return selfid_; }
      set {
        selfid_ = value;
      }
    }

    /// <summary>Field number for the "xChatGroupid" field.</summary>
    public const int XChatGroupidFieldNumber = 3;
    private global::AFMsg.Ident xChatGroupid_;
    /// <summary>
    ///聊天组的ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident XChatGroupid {
      get { return xChatGroupid_; }
      set {
        xChatGroupid_ = value;
      }
    }

    /// <summary>Field number for the "chatType" field.</summary>
    public const int ChatTypeFieldNumber = 4;
    private int chatType_;
    /// <summary>
    ///聊天组的聊天类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChatType {
      get { return chatType_; }
      set {
        chatType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckCreateChatGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckCreateChatGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(Selfid, other.Selfid)) return false;
      if (!object.Equals(XChatGroupid, other.XChatGroupid)) return false;
      if (ChatType != other.ChatType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (selfid_ != null) hash ^= Selfid.GetHashCode();
      if (xChatGroupid_ != null) hash ^= XChatGroupid.GetHashCode();
      if (ChatType != 0) hash ^= ChatType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (selfid_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Selfid);
      }
      if (xChatGroupid_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(XChatGroupid);
      }
      if (ChatType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ChatType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (selfid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Selfid);
      }
      if (xChatGroupid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(XChatGroupid);
      }
      if (ChatType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChatType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckCreateChatGroup other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.selfid_ != null) {
        if (selfid_ == null) {
          selfid_ = new global::AFMsg.Ident();
        }
        Selfid.MergeFrom(other.Selfid);
      }
      if (other.xChatGroupid_ != null) {
        if (xChatGroupid_ == null) {
          xChatGroupid_ = new global::AFMsg.Ident();
        }
        XChatGroupid.MergeFrom(other.XChatGroupid);
      }
      if (other.ChatType != 0) {
        ChatType = other.ChatType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (selfid_ == null) {
              selfid_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(selfid_);
            break;
          }
          case 26: {
            if (xChatGroupid_ == null) {
              xChatGroupid_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(xChatGroupid_);
            break;
          }
          case 32: {
            ChatType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqAckjoinChatGroup : pb::IMessage<ReqAckjoinChatGroup> {
    private static readonly pb::MessageParser<ReqAckjoinChatGroup> _parser = new pb::MessageParser<ReqAckjoinChatGroup>(() => new ReqAckjoinChatGroup());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckjoinChatGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckjoinChatGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckjoinChatGroup(ReqAckjoinChatGroup other) : this() {
      Selfid = other.selfid_ != null ? other.Selfid.Clone() : null;
      XChatGroupid = other.xChatGroupid_ != null ? other.XChatGroupid.Clone() : null;
      result_ = other.result_;
      chatType_ = other.chatType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckjoinChatGroup Clone() {
      return new ReqAckjoinChatGroup(this);
    }

    /// <summary>Field number for the "selfid" field.</summary>
    public const int SelfidFieldNumber = 1;
    private global::AFMsg.Ident selfid_;
    /// <summary>
    ///角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident Selfid {
      get { return selfid_; }
      set {
        selfid_ = value;
      }
    }

    /// <summary>Field number for the "xChatGroupid" field.</summary>
    public const int XChatGroupidFieldNumber = 2;
    private global::AFMsg.Ident xChatGroupid_;
    /// <summary>
    ///聊天组的ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident XChatGroupid {
      get { return xChatGroupid_; }
      set {
        xChatGroupid_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 3;
    private long result_;
    /// <summary>
    ///结果 0失败， 1成功
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "chatType" field.</summary>
    public const int ChatTypeFieldNumber = 4;
    private int chatType_;
    /// <summary>
    ///聊天组的聊天类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChatType {
      get { return chatType_; }
      set {
        chatType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckjoinChatGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckjoinChatGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Selfid, other.Selfid)) return false;
      if (!object.Equals(XChatGroupid, other.XChatGroupid)) return false;
      if (Result != other.Result) return false;
      if (ChatType != other.ChatType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (selfid_ != null) hash ^= Selfid.GetHashCode();
      if (xChatGroupid_ != null) hash ^= XChatGroupid.GetHashCode();
      if (Result != 0L) hash ^= Result.GetHashCode();
      if (ChatType != 0) hash ^= ChatType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (selfid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Selfid);
      }
      if (xChatGroupid_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(XChatGroupid);
      }
      if (Result != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Result);
      }
      if (ChatType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ChatType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (selfid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Selfid);
      }
      if (xChatGroupid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(XChatGroupid);
      }
      if (Result != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Result);
      }
      if (ChatType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChatType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckjoinChatGroup other) {
      if (other == null) {
        return;
      }
      if (other.selfid_ != null) {
        if (selfid_ == null) {
          selfid_ = new global::AFMsg.Ident();
        }
        Selfid.MergeFrom(other.Selfid);
      }
      if (other.xChatGroupid_ != null) {
        if (xChatGroupid_ == null) {
          xChatGroupid_ = new global::AFMsg.Ident();
        }
        XChatGroupid.MergeFrom(other.XChatGroupid);
      }
      if (other.Result != 0L) {
        Result = other.Result;
      }
      if (other.ChatType != 0) {
        ChatType = other.ChatType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (selfid_ == null) {
              selfid_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(selfid_);
            break;
          }
          case 18: {
            if (xChatGroupid_ == null) {
              xChatGroupid_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(xChatGroupid_);
            break;
          }
          case 24: {
            Result = input.ReadInt64();
            break;
          }
          case 32: {
            ChatType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqAckQuitChatGroup : pb::IMessage<ReqAckQuitChatGroup> {
    private static readonly pb::MessageParser<ReqAckQuitChatGroup> _parser = new pb::MessageParser<ReqAckQuitChatGroup>(() => new ReqAckQuitChatGroup());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckQuitChatGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckQuitChatGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckQuitChatGroup(ReqAckQuitChatGroup other) : this() {
      Selfid = other.selfid_ != null ? other.Selfid.Clone() : null;
      XChatGroupid = other.xChatGroupid_ != null ? other.XChatGroupid.Clone() : null;
      result_ = other.result_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckQuitChatGroup Clone() {
      return new ReqAckQuitChatGroup(this);
    }

    /// <summary>Field number for the "selfid" field.</summary>
    public const int SelfidFieldNumber = 1;
    private global::AFMsg.Ident selfid_;
    /// <summary>
    ///角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident Selfid {
      get { return selfid_; }
      set {
        selfid_ = value;
      }
    }

    /// <summary>Field number for the "xChatGroupid" field.</summary>
    public const int XChatGroupidFieldNumber = 2;
    private global::AFMsg.Ident xChatGroupid_;
    /// <summary>
    ///聊天组的ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident XChatGroupid {
      get { return xChatGroupid_; }
      set {
        xChatGroupid_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 3;
    private long result_;
    /// <summary>
    ///结果 0失败， 1成功
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckQuitChatGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckQuitChatGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Selfid, other.Selfid)) return false;
      if (!object.Equals(XChatGroupid, other.XChatGroupid)) return false;
      if (Result != other.Result) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (selfid_ != null) hash ^= Selfid.GetHashCode();
      if (xChatGroupid_ != null) hash ^= XChatGroupid.GetHashCode();
      if (Result != 0L) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (selfid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Selfid);
      }
      if (xChatGroupid_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(XChatGroupid);
      }
      if (Result != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (selfid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Selfid);
      }
      if (xChatGroupid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(XChatGroupid);
      }
      if (Result != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckQuitChatGroup other) {
      if (other == null) {
        return;
      }
      if (other.selfid_ != null) {
        if (selfid_ == null) {
          selfid_ = new global::AFMsg.Ident();
        }
        Selfid.MergeFrom(other.Selfid);
      }
      if (other.xChatGroupid_ != null) {
        if (xChatGroupid_ == null) {
          xChatGroupid_ = new global::AFMsg.Ident();
        }
        XChatGroupid.MergeFrom(other.XChatGroupid);
      }
      if (other.Result != 0L) {
        Result = other.Result;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (selfid_ == null) {
              selfid_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(selfid_);
            break;
          }
          case 18: {
            if (xChatGroupid_ == null) {
              xChatGroupid_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(xChatGroupid_);
            break;
          }
          case 24: {
            Result = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqSubscriptionChatGroup : pb::IMessage<ReqSubscriptionChatGroup> {
    private static readonly pb::MessageParser<ReqSubscriptionChatGroup> _parser = new pb::MessageParser<ReqSubscriptionChatGroup>(() => new ReqSubscriptionChatGroup());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqSubscriptionChatGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSubscriptionChatGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSubscriptionChatGroup(ReqSubscriptionChatGroup other) : this() {
      Selfid = other.selfid_ != null ? other.Selfid.Clone() : null;
      xChatGroupid_ = other.xChatGroupid_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSubscriptionChatGroup Clone() {
      return new ReqSubscriptionChatGroup(this);
    }

    /// <summary>Field number for the "selfid" field.</summary>
    public const int SelfidFieldNumber = 1;
    private global::AFMsg.Ident selfid_;
    /// <summary>
    ///角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident Selfid {
      get { return selfid_; }
      set {
        selfid_ = value;
      }
    }

    /// <summary>Field number for the "xChatGroupid" field.</summary>
    public const int XChatGroupidFieldNumber = 2;
    private static readonly pb::FieldCodec<global::AFMsg.Ident> _repeated_xChatGroupid_codec
        = pb::FieldCodec.ForMessage(18, global::AFMsg.Ident.Parser);
    private readonly pbc::RepeatedField<global::AFMsg.Ident> xChatGroupid_ = new pbc::RepeatedField<global::AFMsg.Ident>();
    /// <summary>
    ///订阅聊天组消息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AFMsg.Ident> XChatGroupid {
      get { return xChatGroupid_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqSubscriptionChatGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqSubscriptionChatGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Selfid, other.Selfid)) return false;
      if(!xChatGroupid_.Equals(other.xChatGroupid_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (selfid_ != null) hash ^= Selfid.GetHashCode();
      hash ^= xChatGroupid_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (selfid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Selfid);
      }
      xChatGroupid_.WriteTo(output, _repeated_xChatGroupid_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (selfid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Selfid);
      }
      size += xChatGroupid_.CalculateSize(_repeated_xChatGroupid_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqSubscriptionChatGroup other) {
      if (other == null) {
        return;
      }
      if (other.selfid_ != null) {
        if (selfid_ == null) {
          selfid_ = new global::AFMsg.Ident();
        }
        Selfid.MergeFrom(other.Selfid);
      }
      xChatGroupid_.Add(other.xChatGroupid_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (selfid_ == null) {
              selfid_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(selfid_);
            break;
          }
          case 18: {
            xChatGroupid_.AddEntriesFrom(input, _repeated_xChatGroupid_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqCancelSubscriptionChatGroup : pb::IMessage<ReqCancelSubscriptionChatGroup> {
    private static readonly pb::MessageParser<ReqCancelSubscriptionChatGroup> _parser = new pb::MessageParser<ReqCancelSubscriptionChatGroup>(() => new ReqCancelSubscriptionChatGroup());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqCancelSubscriptionChatGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqCancelSubscriptionChatGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqCancelSubscriptionChatGroup(ReqCancelSubscriptionChatGroup other) : this() {
      Selfid = other.selfid_ != null ? other.Selfid.Clone() : null;
      xChatGroupid_ = other.xChatGroupid_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqCancelSubscriptionChatGroup Clone() {
      return new ReqCancelSubscriptionChatGroup(this);
    }

    /// <summary>Field number for the "selfid" field.</summary>
    public const int SelfidFieldNumber = 1;
    private global::AFMsg.Ident selfid_;
    /// <summary>
    ///角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident Selfid {
      get { return selfid_; }
      set {
        selfid_ = value;
      }
    }

    /// <summary>Field number for the "xChatGroupid" field.</summary>
    public const int XChatGroupidFieldNumber = 2;
    private static readonly pb::FieldCodec<global::AFMsg.Ident> _repeated_xChatGroupid_codec
        = pb::FieldCodec.ForMessage(18, global::AFMsg.Ident.Parser);
    private readonly pbc::RepeatedField<global::AFMsg.Ident> xChatGroupid_ = new pbc::RepeatedField<global::AFMsg.Ident>();
    /// <summary>
    ///订阅聊天组消息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AFMsg.Ident> XChatGroupid {
      get { return xChatGroupid_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqCancelSubscriptionChatGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqCancelSubscriptionChatGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Selfid, other.Selfid)) return false;
      if(!xChatGroupid_.Equals(other.xChatGroupid_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (selfid_ != null) hash ^= Selfid.GetHashCode();
      hash ^= xChatGroupid_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (selfid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Selfid);
      }
      xChatGroupid_.WriteTo(output, _repeated_xChatGroupid_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (selfid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Selfid);
      }
      size += xChatGroupid_.CalculateSize(_repeated_xChatGroupid_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqCancelSubscriptionChatGroup other) {
      if (other == null) {
        return;
      }
      if (other.selfid_ != null) {
        if (selfid_ == null) {
          selfid_ = new global::AFMsg.Ident();
        }
        Selfid.MergeFrom(other.Selfid);
      }
      xChatGroupid_.Add(other.xChatGroupid_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (selfid_ == null) {
              selfid_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(selfid_);
            break;
          }
          case 18: {
            xChatGroupid_.AddEntriesFrom(input, _repeated_xChatGroupid_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGEC_REQ_INTENSIFYLEVEL_TO_EQUIP			= 500;		 // 装备强化
  /// </summary>
  public sealed partial class ReqIntensifylevelToEquip : pb::IMessage<ReqIntensifylevelToEquip> {
    private static readonly pb::MessageParser<ReqIntensifylevelToEquip> _parser = new pb::MessageParser<ReqIntensifylevelToEquip>(() => new ReqIntensifylevelToEquip());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqIntensifylevelToEquip> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqIntensifylevelToEquip() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqIntensifylevelToEquip(ReqIntensifylevelToEquip other) : this() {
      Selfid = other.selfid_ != null ? other.Selfid.Clone() : null;
      Equipid = other.equipid_ != null ? other.Equipid.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqIntensifylevelToEquip Clone() {
      return new ReqIntensifylevelToEquip(this);
    }

    /// <summary>Field number for the "selfid" field.</summary>
    public const int SelfidFieldNumber = 1;
    private global::AFMsg.Ident selfid_;
    /// <summary>
    ///角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident Selfid {
      get { return selfid_; }
      set {
        selfid_ = value;
      }
    }

    /// <summary>Field number for the "equipid" field.</summary>
    public const int EquipidFieldNumber = 2;
    private global::AFMsg.Ident equipid_;
    /// <summary>
    ///装备ID	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident Equipid {
      get { return equipid_; }
      set {
        equipid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqIntensifylevelToEquip);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqIntensifylevelToEquip other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Selfid, other.Selfid)) return false;
      if (!object.Equals(Equipid, other.Equipid)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (selfid_ != null) hash ^= Selfid.GetHashCode();
      if (equipid_ != null) hash ^= Equipid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (selfid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Selfid);
      }
      if (equipid_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Equipid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (selfid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Selfid);
      }
      if (equipid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Equipid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqIntensifylevelToEquip other) {
      if (other == null) {
        return;
      }
      if (other.selfid_ != null) {
        if (selfid_ == null) {
          selfid_ = new global::AFMsg.Ident();
        }
        Selfid.MergeFrom(other.Selfid);
      }
      if (other.equipid_ != null) {
        if (equipid_ == null) {
          equipid_ = new global::AFMsg.Ident();
        }
        Equipid.MergeFrom(other.Equipid);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (selfid_ == null) {
              selfid_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(selfid_);
            break;
          }
          case 18: {
            if (equipid_ == null) {
              equipid_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(equipid_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGEC_ACK_INTENSIFYLEVEL_TO_EQUIP			= 501;		 // 装备强化
  /// </summary>
  public sealed partial class AckIntensifylevelToEquip : pb::IMessage<AckIntensifylevelToEquip> {
    private static readonly pb::MessageParser<AckIntensifylevelToEquip> _parser = new pb::MessageParser<AckIntensifylevelToEquip>(() => new AckIntensifylevelToEquip());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckIntensifylevelToEquip> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckIntensifylevelToEquip() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckIntensifylevelToEquip(AckIntensifylevelToEquip other) : this() {
      Selfid = other.selfid_ != null ? other.Selfid.Clone() : null;
      Equipid = other.equipid_ != null ? other.Equipid.Clone() : null;
      result_ = other.result_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckIntensifylevelToEquip Clone() {
      return new AckIntensifylevelToEquip(this);
    }

    /// <summary>Field number for the "selfid" field.</summary>
    public const int SelfidFieldNumber = 1;
    private global::AFMsg.Ident selfid_;
    /// <summary>
    ///角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident Selfid {
      get { return selfid_; }
      set {
        selfid_ = value;
      }
    }

    /// <summary>Field number for the "equipid" field.</summary>
    public const int EquipidFieldNumber = 2;
    private global::AFMsg.Ident equipid_;
    /// <summary>
    ///装备ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident Equipid {
      get { return equipid_; }
      set {
        equipid_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 3;
    private int result_;
    /// <summary>
    ///0失败 1成功
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckIntensifylevelToEquip);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckIntensifylevelToEquip other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Selfid, other.Selfid)) return false;
      if (!object.Equals(Equipid, other.Equipid)) return false;
      if (Result != other.Result) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (selfid_ != null) hash ^= Selfid.GetHashCode();
      if (equipid_ != null) hash ^= Equipid.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (selfid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Selfid);
      }
      if (equipid_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Equipid);
      }
      if (Result != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (selfid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Selfid);
      }
      if (equipid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Equipid);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckIntensifylevelToEquip other) {
      if (other == null) {
        return;
      }
      if (other.selfid_ != null) {
        if (selfid_ == null) {
          selfid_ = new global::AFMsg.Ident();
        }
        Selfid.MergeFrom(other.Selfid);
      }
      if (other.equipid_ != null) {
        if (equipid_ == null) {
          equipid_ = new global::AFMsg.Ident();
        }
        Equipid.MergeFrom(other.Equipid);
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (selfid_ == null) {
              selfid_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(selfid_);
            break;
          }
          case 18: {
            if (equipid_ == null) {
              equipid_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(equipid_);
            break;
          }
          case 24: {
            Result = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGEC_REQ_HOLE_TO_EQUIP					= 502;		 // 装备打洞
  /// </summary>
  public sealed partial class ReqHoleToEquip : pb::IMessage<ReqHoleToEquip> {
    private static readonly pb::MessageParser<ReqHoleToEquip> _parser = new pb::MessageParser<ReqHoleToEquip>(() => new ReqHoleToEquip());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqHoleToEquip> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqHoleToEquip() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqHoleToEquip(ReqHoleToEquip other) : this() {
      Selfid = other.selfid_ != null ? other.Selfid.Clone() : null;
      Equipid = other.equipid_ != null ? other.Equipid.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqHoleToEquip Clone() {
      return new ReqHoleToEquip(this);
    }

    /// <summary>Field number for the "selfid" field.</summary>
    public const int SelfidFieldNumber = 1;
    private global::AFMsg.Ident selfid_;
    /// <summary>
    ///角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident Selfid {
      get { return selfid_; }
      set {
        selfid_ = value;
      }
    }

    /// <summary>Field number for the "equipid" field.</summary>
    public const int EquipidFieldNumber = 2;
    private global::AFMsg.Ident equipid_;
    /// <summary>
    ///装备ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident Equipid {
      get { return equipid_; }
      set {
        equipid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqHoleToEquip);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqHoleToEquip other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Selfid, other.Selfid)) return false;
      if (!object.Equals(Equipid, other.Equipid)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (selfid_ != null) hash ^= Selfid.GetHashCode();
      if (equipid_ != null) hash ^= Equipid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (selfid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Selfid);
      }
      if (equipid_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Equipid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (selfid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Selfid);
      }
      if (equipid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Equipid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqHoleToEquip other) {
      if (other == null) {
        return;
      }
      if (other.selfid_ != null) {
        if (selfid_ == null) {
          selfid_ = new global::AFMsg.Ident();
        }
        Selfid.MergeFrom(other.Selfid);
      }
      if (other.equipid_ != null) {
        if (equipid_ == null) {
          equipid_ = new global::AFMsg.Ident();
        }
        Equipid.MergeFrom(other.Equipid);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (selfid_ == null) {
              selfid_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(selfid_);
            break;
          }
          case 18: {
            if (equipid_ == null) {
              equipid_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(equipid_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGEC_ACK_HOLE_TO_EQUIP					= 503;		 // 装备打洞
  /// </summary>
  public sealed partial class AckHoleToEquip : pb::IMessage<AckHoleToEquip> {
    private static readonly pb::MessageParser<AckHoleToEquip> _parser = new pb::MessageParser<AckHoleToEquip>(() => new AckHoleToEquip());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckHoleToEquip> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckHoleToEquip() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckHoleToEquip(AckHoleToEquip other) : this() {
      Selfid = other.selfid_ != null ? other.Selfid.Clone() : null;
      Equipid = other.equipid_ != null ? other.Equipid.Clone() : null;
      result_ = other.result_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckHoleToEquip Clone() {
      return new AckHoleToEquip(this);
    }

    /// <summary>Field number for the "selfid" field.</summary>
    public const int SelfidFieldNumber = 1;
    private global::AFMsg.Ident selfid_;
    /// <summary>
    ///角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident Selfid {
      get { return selfid_; }
      set {
        selfid_ = value;
      }
    }

    /// <summary>Field number for the "equipid" field.</summary>
    public const int EquipidFieldNumber = 2;
    private global::AFMsg.Ident equipid_;
    /// <summary>
    ///装备ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident Equipid {
      get { return equipid_; }
      set {
        equipid_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 3;
    private int result_;
    /// <summary>
    ///0失败 1成功
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckHoleToEquip);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckHoleToEquip other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Selfid, other.Selfid)) return false;
      if (!object.Equals(Equipid, other.Equipid)) return false;
      if (Result != other.Result) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (selfid_ != null) hash ^= Selfid.GetHashCode();
      if (equipid_ != null) hash ^= Equipid.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (selfid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Selfid);
      }
      if (equipid_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Equipid);
      }
      if (Result != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (selfid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Selfid);
      }
      if (equipid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Equipid);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckHoleToEquip other) {
      if (other == null) {
        return;
      }
      if (other.selfid_ != null) {
        if (selfid_ == null) {
          selfid_ = new global::AFMsg.Ident();
        }
        Selfid.MergeFrom(other.Selfid);
      }
      if (other.equipid_ != null) {
        if (equipid_ == null) {
          equipid_ = new global::AFMsg.Ident();
        }
        Equipid.MergeFrom(other.Equipid);
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (selfid_ == null) {
              selfid_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(selfid_);
            break;
          }
          case 18: {
            if (equipid_ == null) {
              equipid_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(equipid_);
            break;
          }
          case 24: {
            Result = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGEC_REQ_INLAYSTONE_TO_EQUIP				= 504;		 // 装备镶嵌
  /// </summary>
  public sealed partial class ReqInlaystoneToEquip : pb::IMessage<ReqInlaystoneToEquip> {
    private static readonly pb::MessageParser<ReqInlaystoneToEquip> _parser = new pb::MessageParser<ReqInlaystoneToEquip>(() => new ReqInlaystoneToEquip());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqInlaystoneToEquip> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqInlaystoneToEquip() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqInlaystoneToEquip(ReqInlaystoneToEquip other) : this() {
      Selfid = other.selfid_ != null ? other.Selfid.Clone() : null;
      Equipid = other.equipid_ != null ? other.Equipid.Clone() : null;
      stoneid_ = other.stoneid_;
      holeIndex_ = other.holeIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqInlaystoneToEquip Clone() {
      return new ReqInlaystoneToEquip(this);
    }

    /// <summary>Field number for the "selfid" field.</summary>
    public const int SelfidFieldNumber = 1;
    private global::AFMsg.Ident selfid_;
    /// <summary>
    ///角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident Selfid {
      get { return selfid_; }
      set {
        selfid_ = value;
      }
    }

    /// <summary>Field number for the "equipid" field.</summary>
    public const int EquipidFieldNumber = 2;
    private global::AFMsg.Ident equipid_;
    /// <summary>
    ///装备ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident Equipid {
      get { return equipid_; }
      set {
        equipid_ = value;
      }
    }

    /// <summary>Field number for the "stoneid" field.</summary>
    public const int StoneidFieldNumber = 3;
    private string stoneid_ = "";
    /// <summary>
    ///石头ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Stoneid {
      get { return stoneid_; }
      set {
        stoneid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hole_index" field.</summary>
    public const int HoleIndexFieldNumber = 4;
    private int holeIndex_;
    /// <summary>
    ///空位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HoleIndex {
      get { return holeIndex_; }
      set {
        holeIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqInlaystoneToEquip);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqInlaystoneToEquip other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Selfid, other.Selfid)) return false;
      if (!object.Equals(Equipid, other.Equipid)) return false;
      if (Stoneid != other.Stoneid) return false;
      if (HoleIndex != other.HoleIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (selfid_ != null) hash ^= Selfid.GetHashCode();
      if (equipid_ != null) hash ^= Equipid.GetHashCode();
      if (Stoneid.Length != 0) hash ^= Stoneid.GetHashCode();
      if (HoleIndex != 0) hash ^= HoleIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (selfid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Selfid);
      }
      if (equipid_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Equipid);
      }
      if (Stoneid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Stoneid);
      }
      if (HoleIndex != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(HoleIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (selfid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Selfid);
      }
      if (equipid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Equipid);
      }
      if (Stoneid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Stoneid);
      }
      if (HoleIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HoleIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqInlaystoneToEquip other) {
      if (other == null) {
        return;
      }
      if (other.selfid_ != null) {
        if (selfid_ == null) {
          selfid_ = new global::AFMsg.Ident();
        }
        Selfid.MergeFrom(other.Selfid);
      }
      if (other.equipid_ != null) {
        if (equipid_ == null) {
          equipid_ = new global::AFMsg.Ident();
        }
        Equipid.MergeFrom(other.Equipid);
      }
      if (other.Stoneid.Length != 0) {
        Stoneid = other.Stoneid;
      }
      if (other.HoleIndex != 0) {
        HoleIndex = other.HoleIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (selfid_ == null) {
              selfid_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(selfid_);
            break;
          }
          case 18: {
            if (equipid_ == null) {
              equipid_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(equipid_);
            break;
          }
          case 26: {
            Stoneid = input.ReadString();
            break;
          }
          case 32: {
            HoleIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGEC_ACK_INLAYSTONE_TO_EQUIP				= 505;		 // 装备镶嵌
  /// </summary>
  public sealed partial class AckInlaystoneToEquip : pb::IMessage<AckInlaystoneToEquip> {
    private static readonly pb::MessageParser<AckInlaystoneToEquip> _parser = new pb::MessageParser<AckInlaystoneToEquip>(() => new AckInlaystoneToEquip());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckInlaystoneToEquip> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckInlaystoneToEquip() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckInlaystoneToEquip(AckInlaystoneToEquip other) : this() {
      Selfid = other.selfid_ != null ? other.Selfid.Clone() : null;
      Equipid = other.equipid_ != null ? other.Equipid.Clone() : null;
      result_ = other.result_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckInlaystoneToEquip Clone() {
      return new AckInlaystoneToEquip(this);
    }

    /// <summary>Field number for the "selfid" field.</summary>
    public const int SelfidFieldNumber = 1;
    private global::AFMsg.Ident selfid_;
    /// <summary>
    ///角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident Selfid {
      get { return selfid_; }
      set {
        selfid_ = value;
      }
    }

    /// <summary>Field number for the "equipid" field.</summary>
    public const int EquipidFieldNumber = 2;
    private global::AFMsg.Ident equipid_;
    /// <summary>
    ///装备ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident Equipid {
      get { return equipid_; }
      set {
        equipid_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 3;
    private int result_;
    /// <summary>
    ///0失败 1成功
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckInlaystoneToEquip);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckInlaystoneToEquip other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Selfid, other.Selfid)) return false;
      if (!object.Equals(Equipid, other.Equipid)) return false;
      if (Result != other.Result) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (selfid_ != null) hash ^= Selfid.GetHashCode();
      if (equipid_ != null) hash ^= Equipid.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (selfid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Selfid);
      }
      if (equipid_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Equipid);
      }
      if (Result != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (selfid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Selfid);
      }
      if (equipid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Equipid);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckInlaystoneToEquip other) {
      if (other == null) {
        return;
      }
      if (other.selfid_ != null) {
        if (selfid_ == null) {
          selfid_ = new global::AFMsg.Ident();
        }
        Selfid.MergeFrom(other.Selfid);
      }
      if (other.equipid_ != null) {
        if (equipid_ == null) {
          equipid_ = new global::AFMsg.Ident();
        }
        Equipid.MergeFrom(other.Equipid);
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (selfid_ == null) {
              selfid_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(selfid_);
            break;
          }
          case 18: {
            if (equipid_ == null) {
              equipid_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(equipid_);
            break;
          }
          case 24: {
            Result = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGEC_REQ_ELEMENTLEVEL_TO_EQUIP				= 506;		 // 装备附魔
  /// </summary>
  public sealed partial class ReqElementlevelToEquip : pb::IMessage<ReqElementlevelToEquip> {
    private static readonly pb::MessageParser<ReqElementlevelToEquip> _parser = new pb::MessageParser<ReqElementlevelToEquip>(() => new ReqElementlevelToEquip());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqElementlevelToEquip> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqElementlevelToEquip() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqElementlevelToEquip(ReqElementlevelToEquip other) : this() {
      Selfid = other.selfid_ != null ? other.Selfid.Clone() : null;
      Equipid = other.equipid_ != null ? other.Equipid.Clone() : null;
      eElementType_ = other.eElementType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqElementlevelToEquip Clone() {
      return new ReqElementlevelToEquip(this);
    }

    /// <summary>Field number for the "selfid" field.</summary>
    public const int SelfidFieldNumber = 1;
    private global::AFMsg.Ident selfid_;
    /// <summary>
    ///角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident Selfid {
      get { return selfid_; }
      set {
        selfid_ = value;
      }
    }

    /// <summary>Field number for the "equipid" field.</summary>
    public const int EquipidFieldNumber = 2;
    private global::AFMsg.Ident equipid_;
    /// <summary>
    ///装备ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident Equipid {
      get { return equipid_; }
      set {
        equipid_ = value;
      }
    }

    /// <summary>Field number for the "eElementType" field.</summary>
    public const int EElementTypeFieldNumber = 3;
    private global::AFMsg.EGameElementType eElementType_ = 0;
    /// <summary>
    ///附魔元素
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.EGameElementType EElementType {
      get { return eElementType_; }
      set {
        eElementType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqElementlevelToEquip);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqElementlevelToEquip other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Selfid, other.Selfid)) return false;
      if (!object.Equals(Equipid, other.Equipid)) return false;
      if (EElementType != other.EElementType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (selfid_ != null) hash ^= Selfid.GetHashCode();
      if (equipid_ != null) hash ^= Equipid.GetHashCode();
      if (EElementType != 0) hash ^= EElementType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (selfid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Selfid);
      }
      if (equipid_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Equipid);
      }
      if (EElementType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) EElementType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (selfid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Selfid);
      }
      if (equipid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Equipid);
      }
      if (EElementType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EElementType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqElementlevelToEquip other) {
      if (other == null) {
        return;
      }
      if (other.selfid_ != null) {
        if (selfid_ == null) {
          selfid_ = new global::AFMsg.Ident();
        }
        Selfid.MergeFrom(other.Selfid);
      }
      if (other.equipid_ != null) {
        if (equipid_ == null) {
          equipid_ = new global::AFMsg.Ident();
        }
        Equipid.MergeFrom(other.Equipid);
      }
      if (other.EElementType != 0) {
        EElementType = other.EElementType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (selfid_ == null) {
              selfid_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(selfid_);
            break;
          }
          case 18: {
            if (equipid_ == null) {
              equipid_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(equipid_);
            break;
          }
          case 24: {
            eElementType_ = (global::AFMsg.EGameElementType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGEC_ACK_ELEMENTLEVEL_TO_EQUIP				= 507;		 // 装备附魔
  /// </summary>
  public sealed partial class AckElementlevelToEquip : pb::IMessage<AckElementlevelToEquip> {
    private static readonly pb::MessageParser<AckElementlevelToEquip> _parser = new pb::MessageParser<AckElementlevelToEquip>(() => new AckElementlevelToEquip());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckElementlevelToEquip> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckElementlevelToEquip() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckElementlevelToEquip(AckElementlevelToEquip other) : this() {
      Selfid = other.selfid_ != null ? other.Selfid.Clone() : null;
      Equipid = other.equipid_ != null ? other.Equipid.Clone() : null;
      result_ = other.result_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckElementlevelToEquip Clone() {
      return new AckElementlevelToEquip(this);
    }

    /// <summary>Field number for the "selfid" field.</summary>
    public const int SelfidFieldNumber = 1;
    private global::AFMsg.Ident selfid_;
    /// <summary>
    ///角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident Selfid {
      get { return selfid_; }
      set {
        selfid_ = value;
      }
    }

    /// <summary>Field number for the "equipid" field.</summary>
    public const int EquipidFieldNumber = 2;
    private global::AFMsg.Ident equipid_;
    /// <summary>
    ///装备ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident Equipid {
      get { return equipid_; }
      set {
        equipid_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 3;
    private int result_;
    /// <summary>
    ///0失败 1成功
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckElementlevelToEquip);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckElementlevelToEquip other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Selfid, other.Selfid)) return false;
      if (!object.Equals(Equipid, other.Equipid)) return false;
      if (Result != other.Result) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (selfid_ != null) hash ^= Selfid.GetHashCode();
      if (equipid_ != null) hash ^= Equipid.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (selfid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Selfid);
      }
      if (equipid_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Equipid);
      }
      if (Result != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (selfid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Selfid);
      }
      if (equipid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Equipid);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckElementlevelToEquip other) {
      if (other == null) {
        return;
      }
      if (other.selfid_ != null) {
        if (selfid_ == null) {
          selfid_ = new global::AFMsg.Ident();
        }
        Selfid.MergeFrom(other.Selfid);
      }
      if (other.equipid_ != null) {
        if (equipid_ == null) {
          equipid_ = new global::AFMsg.Ident();
        }
        Equipid.MergeFrom(other.Equipid);
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (selfid_ == null) {
              selfid_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(selfid_);
            break;
          }
          case 18: {
            if (equipid_ == null) {
              equipid_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(equipid_);
            break;
          }
          case 24: {
            Result = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGEC_REQ_SET_FIGHT_HERO						= 508;		 // 战斗武将
  /// </summary>
  public sealed partial class ReqSetFightHero : pb::IMessage<ReqSetFightHero> {
    private static readonly pb::MessageParser<ReqSetFightHero> _parser = new pb::MessageParser<ReqSetFightHero>(() => new ReqSetFightHero());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqSetFightHero> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSetFightHero() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSetFightHero(ReqSetFightHero other) : this() {
      Selfid = other.selfid_ != null ? other.Selfid.Clone() : null;
      Heroid = other.heroid_ != null ? other.Heroid.Clone() : null;
      fightPos_ = other.fightPos_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSetFightHero Clone() {
      return new ReqSetFightHero(this);
    }

    /// <summary>Field number for the "selfid" field.</summary>
    public const int SelfidFieldNumber = 1;
    private global::AFMsg.Ident selfid_;
    /// <summary>
    ///角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident Selfid {
      get { return selfid_; }
      set {
        selfid_ = value;
      }
    }

    /// <summary>Field number for the "Heroid" field.</summary>
    public const int HeroidFieldNumber = 2;
    private global::AFMsg.Ident heroid_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident Heroid {
      get { return heroid_; }
      set {
        heroid_ = value;
      }
    }

    /// <summary>Field number for the "FightPos" field.</summary>
    public const int FightPosFieldNumber = 3;
    private int fightPos_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FightPos {
      get { return fightPos_; }
      set {
        fightPos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqSetFightHero);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqSetFightHero other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Selfid, other.Selfid)) return false;
      if (!object.Equals(Heroid, other.Heroid)) return false;
      if (FightPos != other.FightPos) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (selfid_ != null) hash ^= Selfid.GetHashCode();
      if (heroid_ != null) hash ^= Heroid.GetHashCode();
      if (FightPos != 0) hash ^= FightPos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (selfid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Selfid);
      }
      if (heroid_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Heroid);
      }
      if (FightPos != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FightPos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (selfid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Selfid);
      }
      if (heroid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Heroid);
      }
      if (FightPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FightPos);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqSetFightHero other) {
      if (other == null) {
        return;
      }
      if (other.selfid_ != null) {
        if (selfid_ == null) {
          selfid_ = new global::AFMsg.Ident();
        }
        Selfid.MergeFrom(other.Selfid);
      }
      if (other.heroid_ != null) {
        if (heroid_ == null) {
          heroid_ = new global::AFMsg.Ident();
        }
        Heroid.MergeFrom(other.Heroid);
      }
      if (other.FightPos != 0) {
        FightPos = other.FightPos;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (selfid_ == null) {
              selfid_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(selfid_);
            break;
          }
          case 18: {
            if (heroid_ == null) {
              heroid_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(heroid_);
            break;
          }
          case 24: {
            FightPos = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGEC_WEAR_EQUIP								= 509;		 // 装备创戴
  /// </summary>
  public sealed partial class ReqWearEquip : pb::IMessage<ReqWearEquip> {
    private static readonly pb::MessageParser<ReqWearEquip> _parser = new pb::MessageParser<ReqWearEquip>(() => new ReqWearEquip());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqWearEquip> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqWearEquip() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqWearEquip(ReqWearEquip other) : this() {
      Selfid = other.selfid_ != null ? other.Selfid.Clone() : null;
      Equipid = other.equipid_ != null ? other.Equipid.Clone() : null;
      Targetid = other.targetid_ != null ? other.Targetid.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqWearEquip Clone() {
      return new ReqWearEquip(this);
    }

    /// <summary>Field number for the "selfid" field.</summary>
    public const int SelfidFieldNumber = 1;
    private global::AFMsg.Ident selfid_;
    /// <summary>
    ///角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident Selfid {
      get { return selfid_; }
      set {
        selfid_ = value;
      }
    }

    /// <summary>Field number for the "equipid" field.</summary>
    public const int EquipidFieldNumber = 2;
    private global::AFMsg.Ident equipid_;
    /// <summary>
    ///装备ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident Equipid {
      get { return equipid_; }
      set {
        equipid_ = value;
      }
    }

    /// <summary>Field number for the "Targetid" field.</summary>
    public const int TargetidFieldNumber = 3;
    private global::AFMsg.Ident targetid_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident Targetid {
      get { return targetid_; }
      set {
        targetid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqWearEquip);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqWearEquip other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Selfid, other.Selfid)) return false;
      if (!object.Equals(Equipid, other.Equipid)) return false;
      if (!object.Equals(Targetid, other.Targetid)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (selfid_ != null) hash ^= Selfid.GetHashCode();
      if (equipid_ != null) hash ^= Equipid.GetHashCode();
      if (targetid_ != null) hash ^= Targetid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (selfid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Selfid);
      }
      if (equipid_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Equipid);
      }
      if (targetid_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Targetid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (selfid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Selfid);
      }
      if (equipid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Equipid);
      }
      if (targetid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Targetid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqWearEquip other) {
      if (other == null) {
        return;
      }
      if (other.selfid_ != null) {
        if (selfid_ == null) {
          selfid_ = new global::AFMsg.Ident();
        }
        Selfid.MergeFrom(other.Selfid);
      }
      if (other.equipid_ != null) {
        if (equipid_ == null) {
          equipid_ = new global::AFMsg.Ident();
        }
        Equipid.MergeFrom(other.Equipid);
      }
      if (other.targetid_ != null) {
        if (targetid_ == null) {
          targetid_ = new global::AFMsg.Ident();
        }
        Targetid.MergeFrom(other.Targetid);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (selfid_ == null) {
              selfid_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(selfid_);
            break;
          }
          case 18: {
            if (equipid_ == null) {
              equipid_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(equipid_);
            break;
          }
          case 26: {
            if (targetid_ == null) {
              targetid_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(targetid_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGEC_TAKEOFF_EQUIP							= 510;		 // 装备卸载
  /// </summary>
  public sealed partial class TakeOffEquip : pb::IMessage<TakeOffEquip> {
    private static readonly pb::MessageParser<TakeOffEquip> _parser = new pb::MessageParser<TakeOffEquip>(() => new TakeOffEquip());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TakeOffEquip> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakeOffEquip() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakeOffEquip(TakeOffEquip other) : this() {
      Selfid = other.selfid_ != null ? other.Selfid.Clone() : null;
      Equipid = other.equipid_ != null ? other.Equipid.Clone() : null;
      Targetid = other.targetid_ != null ? other.Targetid.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakeOffEquip Clone() {
      return new TakeOffEquip(this);
    }

    /// <summary>Field number for the "selfid" field.</summary>
    public const int SelfidFieldNumber = 1;
    private global::AFMsg.Ident selfid_;
    /// <summary>
    ///角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident Selfid {
      get { return selfid_; }
      set {
        selfid_ = value;
      }
    }

    /// <summary>Field number for the "equipid" field.</summary>
    public const int EquipidFieldNumber = 2;
    private global::AFMsg.Ident equipid_;
    /// <summary>
    ///装备ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident Equipid {
      get { return equipid_; }
      set {
        equipid_ = value;
      }
    }

    /// <summary>Field number for the "Targetid" field.</summary>
    public const int TargetidFieldNumber = 3;
    private global::AFMsg.Ident targetid_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident Targetid {
      get { return targetid_; }
      set {
        targetid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TakeOffEquip);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TakeOffEquip other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Selfid, other.Selfid)) return false;
      if (!object.Equals(Equipid, other.Equipid)) return false;
      if (!object.Equals(Targetid, other.Targetid)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (selfid_ != null) hash ^= Selfid.GetHashCode();
      if (equipid_ != null) hash ^= Equipid.GetHashCode();
      if (targetid_ != null) hash ^= Targetid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (selfid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Selfid);
      }
      if (equipid_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Equipid);
      }
      if (targetid_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Targetid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (selfid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Selfid);
      }
      if (equipid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Equipid);
      }
      if (targetid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Targetid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TakeOffEquip other) {
      if (other == null) {
        return;
      }
      if (other.selfid_ != null) {
        if (selfid_ == null) {
          selfid_ = new global::AFMsg.Ident();
        }
        Selfid.MergeFrom(other.Selfid);
      }
      if (other.equipid_ != null) {
        if (equipid_ == null) {
          equipid_ = new global::AFMsg.Ident();
        }
        Equipid.MergeFrom(other.Equipid);
      }
      if (other.targetid_ != null) {
        if (targetid_ == null) {
          targetid_ = new global::AFMsg.Ident();
        }
        Targetid.MergeFrom(other.Targetid);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (selfid_ == null) {
              selfid_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(selfid_);
            break;
          }
          case 18: {
            if (equipid_ == null) {
              equipid_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(equipid_);
            break;
          }
          case 26: {
            if (targetid_ == null) {
              targetid_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(targetid_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGEC_REQ_MINING_TITLE							= 600;		 // 挖矿
  /// </summary>
  public sealed partial class ReqMiningTitle : pb::IMessage<ReqMiningTitle> {
    private static readonly pb::MessageParser<ReqMiningTitle> _parser = new pb::MessageParser<ReqMiningTitle>(() => new ReqMiningTitle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqMiningTitle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqMiningTitle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqMiningTitle(ReqMiningTitle other) : this() {
      Selfid = other.selfid_ != null ? other.Selfid.Clone() : null;
      x_ = other.x_;
      y_ = other.y_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqMiningTitle Clone() {
      return new ReqMiningTitle(this);
    }

    /// <summary>Field number for the "selfid" field.</summary>
    public const int SelfidFieldNumber = 1;
    private global::AFMsg.Ident selfid_;
    /// <summary>
    ///角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident Selfid {
      get { return selfid_; }
      set {
        selfid_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 2;
    private int x_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 3;
    private int y_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqMiningTitle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqMiningTitle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Selfid, other.Selfid)) return false;
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (selfid_ != null) hash ^= Selfid.GetHashCode();
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (selfid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Selfid);
      }
      if (X != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (selfid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Selfid);
      }
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqMiningTitle other) {
      if (other == null) {
        return;
      }
      if (other.selfid_ != null) {
        if (selfid_ == null) {
          selfid_ = new global::AFMsg.Ident();
        }
        Selfid.MergeFrom(other.Selfid);
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (selfid_ == null) {
              selfid_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(selfid_);
            break;
          }
          case 16: {
            X = input.ReadInt32();
            break;
          }
          case 24: {
            Y = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGEC_REQ_SEND_MAIL = 700; // 发送邮件
  /// </summary>
  public sealed partial class ReqSendMail : pb::IMessage<ReqSendMail> {
    private static readonly pb::MessageParser<ReqSendMail> _parser = new pb::MessageParser<ReqSendMail>(() => new ReqSendMail());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqSendMail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSendMail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSendMail(ReqSendMail other) : this() {
      Selfid = other.selfid_ != null ? other.Selfid.Clone() : null;
      Reciever = other.reciever_ != null ? other.Reciever.Clone() : null;
      itemList_ = other.itemList_.Clone();
      currencyList_ = other.currencyList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSendMail Clone() {
      return new ReqSendMail(this);
    }

    /// <summary>Field number for the "selfid" field.</summary>
    public const int SelfidFieldNumber = 1;
    private global::AFMsg.Ident selfid_;
    /// <summary>
    /// 角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident Selfid {
      get { return selfid_; }
      set {
        selfid_ = value;
      }
    }

    /// <summary>Field number for the "reciever" field.</summary>
    public const int RecieverFieldNumber = 2;
    private global::AFMsg.Ident reciever_;
    /// <summary>
    /// 目标ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident Reciever {
      get { return reciever_; }
      set {
        reciever_ = value;
      }
    }

    /// <summary>Field number for the "item_list" field.</summary>
    public const int ItemListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::AFMsg.ItemStruct> _repeated_itemList_codec
        = pb::FieldCodec.ForMessage(26, global::AFMsg.ItemStruct.Parser);
    private readonly pbc::RepeatedField<global::AFMsg.ItemStruct> itemList_ = new pbc::RepeatedField<global::AFMsg.ItemStruct>();
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AFMsg.ItemStruct> ItemList {
      get { return itemList_; }
    }

    /// <summary>Field number for the "currency_list" field.</summary>
    public const int CurrencyListFieldNumber = 4;
    private static readonly pb::FieldCodec<global::AFMsg.CurrencyStruct> _repeated_currencyList_codec
        = pb::FieldCodec.ForMessage(34, global::AFMsg.CurrencyStruct.Parser);
    private readonly pbc::RepeatedField<global::AFMsg.CurrencyStruct> currencyList_ = new pbc::RepeatedField<global::AFMsg.CurrencyStruct>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AFMsg.CurrencyStruct> CurrencyList {
      get { return currencyList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqSendMail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqSendMail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Selfid, other.Selfid)) return false;
      if (!object.Equals(Reciever, other.Reciever)) return false;
      if(!itemList_.Equals(other.itemList_)) return false;
      if(!currencyList_.Equals(other.currencyList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (selfid_ != null) hash ^= Selfid.GetHashCode();
      if (reciever_ != null) hash ^= Reciever.GetHashCode();
      hash ^= itemList_.GetHashCode();
      hash ^= currencyList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (selfid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Selfid);
      }
      if (reciever_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Reciever);
      }
      itemList_.WriteTo(output, _repeated_itemList_codec);
      currencyList_.WriteTo(output, _repeated_currencyList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (selfid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Selfid);
      }
      if (reciever_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reciever);
      }
      size += itemList_.CalculateSize(_repeated_itemList_codec);
      size += currencyList_.CalculateSize(_repeated_currencyList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqSendMail other) {
      if (other == null) {
        return;
      }
      if (other.selfid_ != null) {
        if (selfid_ == null) {
          selfid_ = new global::AFMsg.Ident();
        }
        Selfid.MergeFrom(other.Selfid);
      }
      if (other.reciever_ != null) {
        if (reciever_ == null) {
          reciever_ = new global::AFMsg.Ident();
        }
        Reciever.MergeFrom(other.Reciever);
      }
      itemList_.Add(other.itemList_);
      currencyList_.Add(other.currencyList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (selfid_ == null) {
              selfid_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(selfid_);
            break;
          }
          case 18: {
            if (reciever_ == null) {
              reciever_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(reciever_);
            break;
          }
          case 26: {
            itemList_.AddEntriesFrom(input, _repeated_itemList_codec);
            break;
          }
          case 34: {
            currencyList_.AddEntriesFrom(input, _repeated_currencyList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGEC_REQSWICHSERVER							= 210;		 // 申请转服
  /// </summary>
  public sealed partial class ReqSwitchServer : pb::IMessage<ReqSwitchServer> {
    private static readonly pb::MessageParser<ReqSwitchServer> _parser = new pb::MessageParser<ReqSwitchServer>(() => new ReqSwitchServer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqSwitchServer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSwitchServer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSwitchServer(ReqSwitchServer other) : this() {
      Selfid = other.selfid_ != null ? other.Selfid.Clone() : null;
      selfServerid_ = other.selfServerid_;
      targetServerid_ = other.targetServerid_;
      gateServerid_ = other.gateServerid_;
      sceneID_ = other.sceneID_;
      ClientId = other.clientId_ != null ? other.ClientId.Clone() : null;
      groupID_ = other.groupID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSwitchServer Clone() {
      return new ReqSwitchServer(this);
    }

    /// <summary>Field number for the "selfid" field.</summary>
    public const int SelfidFieldNumber = 1;
    private global::AFMsg.Ident selfid_;
    /// <summary>
    /// 角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident Selfid {
      get { return selfid_; }
      set {
        selfid_ = value;
      }
    }

    /// <summary>Field number for the "self_serverid" field.</summary>
    public const int SelfServeridFieldNumber = 2;
    private long selfServerid_;
    /// <summary>
    /// 本来所在的服务器
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SelfServerid {
      get { return selfServerid_; }
      set {
        selfServerid_ = value;
      }
    }

    /// <summary>Field number for the "target_serverid" field.</summary>
    public const int TargetServeridFieldNumber = 3;
    private long targetServerid_;
    /// <summary>
    /// 目标ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TargetServerid {
      get { return targetServerid_; }
      set {
        targetServerid_ = value;
      }
    }

    /// <summary>Field number for the "gate_serverid" field.</summary>
    public const int GateServeridFieldNumber = 4;
    private long gateServerid_;
    /// <summary>
    /// 目标ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GateServerid {
      get { return gateServerid_; }
      set {
        gateServerid_ = value;
      }
    }

    /// <summary>Field number for the "SceneID" field.</summary>
    public const int SceneIDFieldNumber = 5;
    private long sceneID_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SceneID {
      get { return sceneID_; }
      set {
        sceneID_ = value;
      }
    }

    /// <summary>Field number for the "client_id" field.</summary>
    public const int ClientIdFieldNumber = 6;
    private global::AFMsg.Ident clientId_;
    /// <summary>
    /// 客户端id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident ClientId {
      get { return clientId_; }
      set {
        clientId_ = value;
      }
    }

    /// <summary>Field number for the "groupID" field.</summary>
    public const int GroupIDFieldNumber = 7;
    private long groupID_;
    /// <summary>
    ///  group
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GroupID {
      get { return groupID_; }
      set {
        groupID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqSwitchServer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqSwitchServer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Selfid, other.Selfid)) return false;
      if (SelfServerid != other.SelfServerid) return false;
      if (TargetServerid != other.TargetServerid) return false;
      if (GateServerid != other.GateServerid) return false;
      if (SceneID != other.SceneID) return false;
      if (!object.Equals(ClientId, other.ClientId)) return false;
      if (GroupID != other.GroupID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (selfid_ != null) hash ^= Selfid.GetHashCode();
      if (SelfServerid != 0L) hash ^= SelfServerid.GetHashCode();
      if (TargetServerid != 0L) hash ^= TargetServerid.GetHashCode();
      if (GateServerid != 0L) hash ^= GateServerid.GetHashCode();
      if (SceneID != 0L) hash ^= SceneID.GetHashCode();
      if (clientId_ != null) hash ^= ClientId.GetHashCode();
      if (GroupID != 0L) hash ^= GroupID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (selfid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Selfid);
      }
      if (SelfServerid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(SelfServerid);
      }
      if (TargetServerid != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TargetServerid);
      }
      if (GateServerid != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(GateServerid);
      }
      if (SceneID != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(SceneID);
      }
      if (clientId_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ClientId);
      }
      if (GroupID != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(GroupID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (selfid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Selfid);
      }
      if (SelfServerid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SelfServerid);
      }
      if (TargetServerid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TargetServerid);
      }
      if (GateServerid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GateServerid);
      }
      if (SceneID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SceneID);
      }
      if (clientId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClientId);
      }
      if (GroupID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GroupID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqSwitchServer other) {
      if (other == null) {
        return;
      }
      if (other.selfid_ != null) {
        if (selfid_ == null) {
          selfid_ = new global::AFMsg.Ident();
        }
        Selfid.MergeFrom(other.Selfid);
      }
      if (other.SelfServerid != 0L) {
        SelfServerid = other.SelfServerid;
      }
      if (other.TargetServerid != 0L) {
        TargetServerid = other.TargetServerid;
      }
      if (other.GateServerid != 0L) {
        GateServerid = other.GateServerid;
      }
      if (other.SceneID != 0L) {
        SceneID = other.SceneID;
      }
      if (other.clientId_ != null) {
        if (clientId_ == null) {
          clientId_ = new global::AFMsg.Ident();
        }
        ClientId.MergeFrom(other.ClientId);
      }
      if (other.GroupID != 0L) {
        GroupID = other.GroupID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (selfid_ == null) {
              selfid_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(selfid_);
            break;
          }
          case 16: {
            SelfServerid = input.ReadInt64();
            break;
          }
          case 24: {
            TargetServerid = input.ReadInt64();
            break;
          }
          case 32: {
            GateServerid = input.ReadInt64();
            break;
          }
          case 40: {
            SceneID = input.ReadInt64();
            break;
          }
          case 50: {
            if (clientId_ == null) {
              clientId_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(clientId_);
            break;
          }
          case 56: {
            GroupID = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGEC_ACKSWICHSERVER							= 211;		 // 申请转服
  /// </summary>
  public sealed partial class AckSwitchServer : pb::IMessage<AckSwitchServer> {
    private static readonly pb::MessageParser<AckSwitchServer> _parser = new pb::MessageParser<AckSwitchServer>(() => new AckSwitchServer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckSwitchServer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckSwitchServer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckSwitchServer(AckSwitchServer other) : this() {
      Selfid = other.selfid_ != null ? other.Selfid.Clone() : null;
      selfServerid_ = other.selfServerid_;
      targetServerid_ = other.targetServerid_;
      gateServerid_ = other.gateServerid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckSwitchServer Clone() {
      return new AckSwitchServer(this);
    }

    /// <summary>Field number for the "selfid" field.</summary>
    public const int SelfidFieldNumber = 1;
    private global::AFMsg.Ident selfid_;
    /// <summary>
    /// 角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident Selfid {
      get { return selfid_; }
      set {
        selfid_ = value;
      }
    }

    /// <summary>Field number for the "self_serverid" field.</summary>
    public const int SelfServeridFieldNumber = 2;
    private long selfServerid_;
    /// <summary>
    /// 目标ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SelfServerid {
      get { return selfServerid_; }
      set {
        selfServerid_ = value;
      }
    }

    /// <summary>Field number for the "target_serverid" field.</summary>
    public const int TargetServeridFieldNumber = 3;
    private long targetServerid_;
    /// <summary>
    /// 目标ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TargetServerid {
      get { return targetServerid_; }
      set {
        targetServerid_ = value;
      }
    }

    /// <summary>Field number for the "gate_serverid" field.</summary>
    public const int GateServeridFieldNumber = 4;
    private long gateServerid_;
    /// <summary>
    /// 目标ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GateServerid {
      get { return gateServerid_; }
      set {
        gateServerid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckSwitchServer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckSwitchServer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Selfid, other.Selfid)) return false;
      if (SelfServerid != other.SelfServerid) return false;
      if (TargetServerid != other.TargetServerid) return false;
      if (GateServerid != other.GateServerid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (selfid_ != null) hash ^= Selfid.GetHashCode();
      if (SelfServerid != 0L) hash ^= SelfServerid.GetHashCode();
      if (TargetServerid != 0L) hash ^= TargetServerid.GetHashCode();
      if (GateServerid != 0L) hash ^= GateServerid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (selfid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Selfid);
      }
      if (SelfServerid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(SelfServerid);
      }
      if (TargetServerid != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TargetServerid);
      }
      if (GateServerid != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(GateServerid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (selfid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Selfid);
      }
      if (SelfServerid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SelfServerid);
      }
      if (TargetServerid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TargetServerid);
      }
      if (GateServerid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GateServerid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckSwitchServer other) {
      if (other == null) {
        return;
      }
      if (other.selfid_ != null) {
        if (selfid_ == null) {
          selfid_ = new global::AFMsg.Ident();
        }
        Selfid.MergeFrom(other.Selfid);
      }
      if (other.SelfServerid != 0L) {
        SelfServerid = other.SelfServerid;
      }
      if (other.TargetServerid != 0L) {
        TargetServerid = other.TargetServerid;
      }
      if (other.GateServerid != 0L) {
        GateServerid = other.GateServerid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (selfid_ == null) {
              selfid_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(selfid_);
            break;
          }
          case 16: {
            SelfServerid = input.ReadInt64();
            break;
          }
          case 24: {
            TargetServerid = input.ReadInt64();
            break;
          }
          case 32: {
            GateServerid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ////////////////组队/////////////////////////////////////////////////////////////////////////////////////
  /// </summary>
  public sealed partial class TeamInfo : pb::IMessage<TeamInfo> {
    private static readonly pb::MessageParser<TeamInfo> _parser = new pb::MessageParser<TeamInfo>(() => new TeamInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamInfo(TeamInfo other) : this() {
      TeamId = other.teamId_ != null ? other.TeamId.Clone() : null;
      CaptainId = other.captainId_ != null ? other.CaptainId.Clone() : null;
      teammemberInfo_ = other.teammemberInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamInfo Clone() {
      return new TeamInfo(this);
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 1;
    private global::AFMsg.Ident teamId_;
    /// <summary>
    ///队伍ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "captain_id" field.</summary>
    public const int CaptainIdFieldNumber = 2;
    private global::AFMsg.Ident captainId_;
    /// <summary>
    ///队长ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident CaptainId {
      get { return captainId_; }
      set {
        captainId_ = value;
      }
    }

    /// <summary>Field number for the "teammemberInfo" field.</summary>
    public const int TeammemberInfoFieldNumber = 3;
    private static readonly pb::FieldCodec<global::AFMsg.TeammemberInfo> _repeated_teammemberInfo_codec
        = pb::FieldCodec.ForMessage(26, global::AFMsg.TeammemberInfo.Parser);
    private readonly pbc::RepeatedField<global::AFMsg.TeammemberInfo> teammemberInfo_ = new pbc::RepeatedField<global::AFMsg.TeammemberInfo>();
    /// <summary>
    ///队伍成员
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AFMsg.TeammemberInfo> TeammemberInfo {
      get { return teammemberInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TeamId, other.TeamId)) return false;
      if (!object.Equals(CaptainId, other.CaptainId)) return false;
      if(!teammemberInfo_.Equals(other.teammemberInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (teamId_ != null) hash ^= TeamId.GetHashCode();
      if (captainId_ != null) hash ^= CaptainId.GetHashCode();
      hash ^= teammemberInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (teamId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TeamId);
      }
      if (captainId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CaptainId);
      }
      teammemberInfo_.WriteTo(output, _repeated_teammemberInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (teamId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TeamId);
      }
      if (captainId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CaptainId);
      }
      size += teammemberInfo_.CalculateSize(_repeated_teammemberInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamInfo other) {
      if (other == null) {
        return;
      }
      if (other.teamId_ != null) {
        if (teamId_ == null) {
          teamId_ = new global::AFMsg.Ident();
        }
        TeamId.MergeFrom(other.TeamId);
      }
      if (other.captainId_ != null) {
        if (captainId_ == null) {
          captainId_ = new global::AFMsg.Ident();
        }
        CaptainId.MergeFrom(other.CaptainId);
      }
      teammemberInfo_.Add(other.teammemberInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (teamId_ == null) {
              teamId_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(teamId_);
            break;
          }
          case 18: {
            if (captainId_ == null) {
              captainId_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(captainId_);
            break;
          }
          case 26: {
            teammemberInfo_.AddEntriesFrom(input, _repeated_teammemberInfo_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TeammemberInfo : pb::IMessage<TeammemberInfo> {
    private static readonly pb::MessageParser<TeammemberInfo> _parser = new pb::MessageParser<TeammemberInfo>(() => new TeammemberInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeammemberInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeammemberInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeammemberInfo(TeammemberInfo other) : this() {
      PlayerId = other.playerId_ != null ? other.PlayerId.Clone() : null;
      name_ = other.name_;
      nLevel_ = other.nLevel_;
      job_ = other.job_;
      headIcon_ = other.headIcon_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeammemberInfo Clone() {
      return new TeammemberInfo(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private global::AFMsg.Ident playerId_;
    /// <summary>
    ///成员ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nLevel" field.</summary>
    public const int NLevelFieldNumber = 3;
    private int nLevel_;
    /// <summary>
    ///等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NLevel {
      get { return nLevel_; }
      set {
        nLevel_ = value;
      }
    }

    /// <summary>Field number for the "job" field.</summary>
    public const int JobFieldNumber = 4;
    private int job_;
    /// <summary>
    ///职业
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Job {
      get { return job_; }
      set {
        job_ = value;
      }
    }

    /// <summary>Field number for the "HeadIcon" field.</summary>
    public const int HeadIconFieldNumber = 5;
    private string headIcon_ = "";
    /// <summary>
    ///头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeadIcon {
      get { return headIcon_; }
      set {
        headIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeammemberInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeammemberInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayerId, other.PlayerId)) return false;
      if (Name != other.Name) return false;
      if (NLevel != other.NLevel) return false;
      if (Job != other.Job) return false;
      if (HeadIcon != other.HeadIcon) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (playerId_ != null) hash ^= PlayerId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (NLevel != 0) hash ^= NLevel.GetHashCode();
      if (Job != 0) hash ^= Job.GetHashCode();
      if (HeadIcon.Length != 0) hash ^= HeadIcon.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (playerId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (NLevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NLevel);
      }
      if (Job != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Job);
      }
      if (HeadIcon.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(HeadIcon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playerId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (NLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NLevel);
      }
      if (Job != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Job);
      }
      if (HeadIcon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeadIcon);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeammemberInfo other) {
      if (other == null) {
        return;
      }
      if (other.playerId_ != null) {
        if (playerId_ == null) {
          playerId_ = new global::AFMsg.Ident();
        }
        PlayerId.MergeFrom(other.PlayerId);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.NLevel != 0) {
        NLevel = other.NLevel;
      }
      if (other.Job != 0) {
        Job = other.Job;
      }
      if (other.HeadIcon.Length != 0) {
        HeadIcon = other.HeadIcon;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (playerId_ == null) {
              playerId_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(playerId_);
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            NLevel = input.ReadInt32();
            break;
          }
          case 32: {
            Job = input.ReadInt32();
            break;
          }
          case 42: {
            HeadIcon = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGMI_REQ_CREATE_TEAM                       		= 860; 	// 申请创建队伍
  ///EGMI_ACK_CREATE_TEAM							= 861; 	// 创建队伍结果
  /// </summary>
  public sealed partial class ReqAckCreateTeam : pb::IMessage<ReqAckCreateTeam> {
    private static readonly pb::MessageParser<ReqAckCreateTeam> _parser = new pb::MessageParser<ReqAckCreateTeam>(() => new ReqAckCreateTeam());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckCreateTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckCreateTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckCreateTeam(ReqAckCreateTeam other) : this() {
      TeamId = other.teamId_ != null ? other.TeamId.Clone() : null;
      XTeamInfo = other.xTeamInfo_ != null ? other.XTeamInfo.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckCreateTeam Clone() {
      return new ReqAckCreateTeam(this);
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 1;
    private global::AFMsg.Ident teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "xTeamInfo" field.</summary>
    public const int XTeamInfoFieldNumber = 2;
    private global::AFMsg.TeamInfo xTeamInfo_;
    /// <summary>
    ///队伍详细信息	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.TeamInfo XTeamInfo {
      get { return xTeamInfo_; }
      set {
        xTeamInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckCreateTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckCreateTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TeamId, other.TeamId)) return false;
      if (!object.Equals(XTeamInfo, other.XTeamInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (teamId_ != null) hash ^= TeamId.GetHashCode();
      if (xTeamInfo_ != null) hash ^= XTeamInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (teamId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TeamId);
      }
      if (xTeamInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(XTeamInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (teamId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TeamId);
      }
      if (xTeamInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(XTeamInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckCreateTeam other) {
      if (other == null) {
        return;
      }
      if (other.teamId_ != null) {
        if (teamId_ == null) {
          teamId_ = new global::AFMsg.Ident();
        }
        TeamId.MergeFrom(other.TeamId);
      }
      if (other.xTeamInfo_ != null) {
        if (xTeamInfo_ == null) {
          xTeamInfo_ = new global::AFMsg.TeamInfo();
        }
        XTeamInfo.MergeFrom(other.XTeamInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (teamId_ == null) {
              teamId_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(teamId_);
            break;
          }
          case 18: {
            if (xTeamInfo_ == null) {
              xTeamInfo_ = new global::AFMsg.TeamInfo();
            }
            input.ReadMessage(xTeamInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGMI_REQ_JOIN_TEAM                         		= 862; 	// 申请加入队伍
  ///EGMI_ACK_JOIN_TEAM								= 863; 	// 加入队伍结果
  /// </summary>
  public sealed partial class ReqAckJoinTeam : pb::IMessage<ReqAckJoinTeam> {
    private static readonly pb::MessageParser<ReqAckJoinTeam> _parser = new pb::MessageParser<ReqAckJoinTeam>(() => new ReqAckJoinTeam());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckJoinTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckJoinTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckJoinTeam(ReqAckJoinTeam other) : this() {
      TeamId = other.teamId_ != null ? other.TeamId.Clone() : null;
      XTeamInfo = other.xTeamInfo_ != null ? other.XTeamInfo.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckJoinTeam Clone() {
      return new ReqAckJoinTeam(this);
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 1;
    private global::AFMsg.Ident teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "xTeamInfo" field.</summary>
    public const int XTeamInfoFieldNumber = 2;
    private global::AFMsg.TeamInfo xTeamInfo_;
    /// <summary>
    ///队伍详细信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.TeamInfo XTeamInfo {
      get { return xTeamInfo_; }
      set {
        xTeamInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckJoinTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckJoinTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TeamId, other.TeamId)) return false;
      if (!object.Equals(XTeamInfo, other.XTeamInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (teamId_ != null) hash ^= TeamId.GetHashCode();
      if (xTeamInfo_ != null) hash ^= XTeamInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (teamId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TeamId);
      }
      if (xTeamInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(XTeamInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (teamId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TeamId);
      }
      if (xTeamInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(XTeamInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckJoinTeam other) {
      if (other == null) {
        return;
      }
      if (other.teamId_ != null) {
        if (teamId_ == null) {
          teamId_ = new global::AFMsg.Ident();
        }
        TeamId.MergeFrom(other.TeamId);
      }
      if (other.xTeamInfo_ != null) {
        if (xTeamInfo_ == null) {
          xTeamInfo_ = new global::AFMsg.TeamInfo();
        }
        XTeamInfo.MergeFrom(other.XTeamInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (teamId_ == null) {
              teamId_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(teamId_);
            break;
          }
          case 18: {
            if (xTeamInfo_ == null) {
              xTeamInfo_ = new global::AFMsg.TeamInfo();
            }
            input.ReadMessage(xTeamInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGMI_REQ_LEAVE_TEAM                        		= 864; 	// 申请离开队伍/
  ///EGMI_ACK_LEAVE_TEAM								= 865; 	// 离开队伍结果 
  /// </summary>
  public sealed partial class ReqAckLeaveTeam : pb::IMessage<ReqAckLeaveTeam> {
    private static readonly pb::MessageParser<ReqAckLeaveTeam> _parser = new pb::MessageParser<ReqAckLeaveTeam>(() => new ReqAckLeaveTeam());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckLeaveTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckLeaveTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckLeaveTeam(ReqAckLeaveTeam other) : this() {
      TeamId = other.teamId_ != null ? other.TeamId.Clone() : null;
      XTeamInfo = other.xTeamInfo_ != null ? other.XTeamInfo.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckLeaveTeam Clone() {
      return new ReqAckLeaveTeam(this);
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 1;
    private global::AFMsg.Ident teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "xTeamInfo" field.</summary>
    public const int XTeamInfoFieldNumber = 2;
    private global::AFMsg.TeamInfo xTeamInfo_;
    /// <summary>
    ///队伍详细信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.TeamInfo XTeamInfo {
      get { return xTeamInfo_; }
      set {
        xTeamInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckLeaveTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckLeaveTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TeamId, other.TeamId)) return false;
      if (!object.Equals(XTeamInfo, other.XTeamInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (teamId_ != null) hash ^= TeamId.GetHashCode();
      if (xTeamInfo_ != null) hash ^= XTeamInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (teamId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TeamId);
      }
      if (xTeamInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(XTeamInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (teamId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TeamId);
      }
      if (xTeamInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(XTeamInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckLeaveTeam other) {
      if (other == null) {
        return;
      }
      if (other.teamId_ != null) {
        if (teamId_ == null) {
          teamId_ = new global::AFMsg.Ident();
        }
        TeamId.MergeFrom(other.TeamId);
      }
      if (other.xTeamInfo_ != null) {
        if (xTeamInfo_ == null) {
          xTeamInfo_ = new global::AFMsg.TeamInfo();
        }
        XTeamInfo.MergeFrom(other.XTeamInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (teamId_ == null) {
              teamId_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(teamId_);
            break;
          }
          case 18: {
            if (xTeamInfo_ == null) {
              xTeamInfo_ = new global::AFMsg.TeamInfo();
            }
            input.ReadMessage(xTeamInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_REQ_OPRMEMBER_TEAM							= 867; 	// 操作成员
  ///	EGMI_ACK_OPRMEMBER_TEAM							= 868; 	// 操作成员 
  /// </summary>
  public sealed partial class ReqAckOprTeamMember : pb::IMessage<ReqAckOprTeamMember> {
    private static readonly pb::MessageParser<ReqAckOprTeamMember> _parser = new pb::MessageParser<ReqAckOprTeamMember>(() => new ReqAckOprTeamMember());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckOprTeamMember> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckOprTeamMember() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckOprTeamMember(ReqAckOprTeamMember other) : this() {
      TeamId = other.teamId_ != null ? other.TeamId.Clone() : null;
      MemberId = other.memberId_ != null ? other.MemberId.Clone() : null;
      type_ = other.type_;
      XTeamInfo = other.xTeamInfo_ != null ? other.XTeamInfo.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckOprTeamMember Clone() {
      return new ReqAckOprTeamMember(this);
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 1;
    private global::AFMsg.Ident teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "member_id" field.</summary>
    public const int MemberIdFieldNumber = 2;
    private global::AFMsg.Ident memberId_;
    /// <summary>
    ///被操作的ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident MemberId {
      get { return memberId_; }
      set {
        memberId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private global::AFMsg.ReqAckOprTeamMember.Types.EGTeamMemberOprType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.ReqAckOprTeamMember.Types.EGTeamMemberOprType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "xTeamInfo" field.</summary>
    public const int XTeamInfoFieldNumber = 4;
    private global::AFMsg.TeamInfo xTeamInfo_;
    /// <summary>
    ///队伍详细信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.TeamInfo XTeamInfo {
      get { return xTeamInfo_; }
      set {
        xTeamInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckOprTeamMember);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckOprTeamMember other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TeamId, other.TeamId)) return false;
      if (!object.Equals(MemberId, other.MemberId)) return false;
      if (Type != other.Type) return false;
      if (!object.Equals(XTeamInfo, other.XTeamInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (teamId_ != null) hash ^= TeamId.GetHashCode();
      if (memberId_ != null) hash ^= MemberId.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (xTeamInfo_ != null) hash ^= XTeamInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (teamId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TeamId);
      }
      if (memberId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MemberId);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
      if (xTeamInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(XTeamInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (teamId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TeamId);
      }
      if (memberId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MemberId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (xTeamInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(XTeamInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckOprTeamMember other) {
      if (other == null) {
        return;
      }
      if (other.teamId_ != null) {
        if (teamId_ == null) {
          teamId_ = new global::AFMsg.Ident();
        }
        TeamId.MergeFrom(other.TeamId);
      }
      if (other.memberId_ != null) {
        if (memberId_ == null) {
          memberId_ = new global::AFMsg.Ident();
        }
        MemberId.MergeFrom(other.MemberId);
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.xTeamInfo_ != null) {
        if (xTeamInfo_ == null) {
          xTeamInfo_ = new global::AFMsg.TeamInfo();
        }
        XTeamInfo.MergeFrom(other.XTeamInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (teamId_ == null) {
              teamId_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(teamId_);
            break;
          }
          case 18: {
            if (memberId_ == null) {
              memberId_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(memberId_);
            break;
          }
          case 24: {
            type_ = (global::AFMsg.ReqAckOprTeamMember.Types.EGTeamMemberOprType) input.ReadEnum();
            break;
          }
          case 34: {
            if (xTeamInfo_ == null) {
              xTeamInfo_ = new global::AFMsg.TeamInfo();
            }
            input.ReadMessage(xTeamInfo_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ReqAckOprTeamMember message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EGTeamMemberOprType {
        [pbr::OriginalName("EGAT_DOWN")] EgatDown = 0,
        [pbr::OriginalName("EGAT_UP")] EgatUp = 1,
        [pbr::OriginalName("EGAT_KICK")] EgatKick = 2,
        /// <summary>
        ///任命
        /// </summary>
        [pbr::OriginalName("EGAT_APPOINT")] EgatAppoint = 3,
        /// <summary>
        ///撤职
        /// </summary>
        [pbr::OriginalName("EGAT_FIRE")] EgatFire = 4,
        /// <summary>
        ///禅让
        /// </summary>
        [pbr::OriginalName("EGAT_DEMISE")] EgatDemise = 5,
        /// <summary>
        ///收人
        /// </summary>
        [pbr::OriginalName("EGAT_ACCEPTAPPLY")] EgatAcceptapply = 6,
        /// <summary>
        ///拒收
        /// </summary>
        [pbr::OriginalName("EGAT_DENYAPPLY")] EgatDenyapply = 7,
        /// <summary>
        ///开除
        /// </summary>
        [pbr::OriginalName("EGAT_KICKOUT")] EgatKickout = 8,
      }

    }
    #endregion

  }

  /// <summary>
  ///	EGMI_REQ_INVITE_TEAM							= 866; 	// 邀请加入队伍
  /// </summary>
  public sealed partial class ReqAckInviteTeam : pb::IMessage<ReqAckInviteTeam> {
    private static readonly pb::MessageParser<ReqAckInviteTeam> _parser = new pb::MessageParser<ReqAckInviteTeam>(() => new ReqAckInviteTeam());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckInviteTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckInviteTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckInviteTeam(ReqAckInviteTeam other) : this() {
      TeamId = other.teamId_ != null ? other.TeamId.Clone() : null;
      SelfId = other.selfId_ != null ? other.SelfId.Clone() : null;
      InviteTargetId = other.inviteTargetId_ != null ? other.InviteTargetId.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckInviteTeam Clone() {
      return new ReqAckInviteTeam(this);
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 1;
    private global::AFMsg.Ident teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "self_id" field.</summary>
    public const int SelfIdFieldNumber = 2;
    private global::AFMsg.Ident selfId_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident SelfId {
      get { return selfId_; }
      set {
        selfId_ = value;
      }
    }

    /// <summary>Field number for the "invite_target_id" field.</summary>
    public const int InviteTargetIdFieldNumber = 3;
    private global::AFMsg.Ident inviteTargetId_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident InviteTargetId {
      get { return inviteTargetId_; }
      set {
        inviteTargetId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckInviteTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckInviteTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TeamId, other.TeamId)) return false;
      if (!object.Equals(SelfId, other.SelfId)) return false;
      if (!object.Equals(InviteTargetId, other.InviteTargetId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (teamId_ != null) hash ^= TeamId.GetHashCode();
      if (selfId_ != null) hash ^= SelfId.GetHashCode();
      if (inviteTargetId_ != null) hash ^= InviteTargetId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (teamId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TeamId);
      }
      if (selfId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SelfId);
      }
      if (inviteTargetId_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(InviteTargetId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (teamId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TeamId);
      }
      if (selfId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelfId);
      }
      if (inviteTargetId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InviteTargetId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckInviteTeam other) {
      if (other == null) {
        return;
      }
      if (other.teamId_ != null) {
        if (teamId_ == null) {
          teamId_ = new global::AFMsg.Ident();
        }
        TeamId.MergeFrom(other.TeamId);
      }
      if (other.selfId_ != null) {
        if (selfId_ == null) {
          selfId_ = new global::AFMsg.Ident();
        }
        SelfId.MergeFrom(other.SelfId);
      }
      if (other.inviteTargetId_ != null) {
        if (inviteTargetId_ == null) {
          inviteTargetId_ = new global::AFMsg.Ident();
        }
        InviteTargetId.MergeFrom(other.InviteTargetId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (teamId_ == null) {
              teamId_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(teamId_);
            break;
          }
          case 18: {
            if (selfId_ == null) {
              selfId_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(selfId_);
            break;
          }
          case 26: {
            if (inviteTargetId_ == null) {
              inviteTargetId_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(inviteTargetId_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_REQ_TEAM_ENTER_ECTYPE					= 869; 	// 组队进副本
  /// </summary>
  public sealed partial class ReqTeamEnterEctype : pb::IMessage<ReqTeamEnterEctype> {
    private static readonly pb::MessageParser<ReqTeamEnterEctype> _parser = new pb::MessageParser<ReqTeamEnterEctype>(() => new ReqTeamEnterEctype());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqTeamEnterEctype> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqTeamEnterEctype() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqTeamEnterEctype(ReqTeamEnterEctype other) : this() {
      TeamId = other.teamId_ != null ? other.TeamId.Clone() : null;
      SelfId = other.selfId_ != null ? other.SelfId.Clone() : null;
      nEctypeID_ = other.nEctypeID_;
      nGroupID_ = other.nGroupID_;
      nResult_ = other.nResult_;
      nServerID_ = other.nServerID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqTeamEnterEctype Clone() {
      return new ReqTeamEnterEctype(this);
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 1;
    private global::AFMsg.Ident teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "self_id" field.</summary>
    public const int SelfIdFieldNumber = 2;
    private global::AFMsg.Ident selfId_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident SelfId {
      get { return selfId_; }
      set {
        selfId_ = value;
      }
    }

    /// <summary>Field number for the "nEctypeID" field.</summary>
    public const int NEctypeIDFieldNumber = 3;
    private int nEctypeID_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NEctypeID {
      get { return nEctypeID_; }
      set {
        nEctypeID_ = value;
      }
    }

    /// <summary>Field number for the "nGroupID" field.</summary>
    public const int NGroupIDFieldNumber = 4;
    private int nGroupID_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NGroupID {
      get { return nGroupID_; }
      set {
        nGroupID_ = value;
      }
    }

    /// <summary>Field number for the "nResult" field.</summary>
    public const int NResultFieldNumber = 5;
    private int nResult_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NResult {
      get { return nResult_; }
      set {
        nResult_ = value;
      }
    }

    /// <summary>Field number for the "nServerID" field.</summary>
    public const int NServerIDFieldNumber = 6;
    private int nServerID_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NServerID {
      get { return nServerID_; }
      set {
        nServerID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqTeamEnterEctype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqTeamEnterEctype other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TeamId, other.TeamId)) return false;
      if (!object.Equals(SelfId, other.SelfId)) return false;
      if (NEctypeID != other.NEctypeID) return false;
      if (NGroupID != other.NGroupID) return false;
      if (NResult != other.NResult) return false;
      if (NServerID != other.NServerID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (teamId_ != null) hash ^= TeamId.GetHashCode();
      if (selfId_ != null) hash ^= SelfId.GetHashCode();
      if (NEctypeID != 0) hash ^= NEctypeID.GetHashCode();
      if (NGroupID != 0) hash ^= NGroupID.GetHashCode();
      if (NResult != 0) hash ^= NResult.GetHashCode();
      if (NServerID != 0) hash ^= NServerID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (teamId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TeamId);
      }
      if (selfId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SelfId);
      }
      if (NEctypeID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NEctypeID);
      }
      if (NGroupID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(NGroupID);
      }
      if (NResult != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(NResult);
      }
      if (NServerID != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(NServerID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (teamId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TeamId);
      }
      if (selfId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelfId);
      }
      if (NEctypeID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NEctypeID);
      }
      if (NGroupID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NGroupID);
      }
      if (NResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NResult);
      }
      if (NServerID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NServerID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqTeamEnterEctype other) {
      if (other == null) {
        return;
      }
      if (other.teamId_ != null) {
        if (teamId_ == null) {
          teamId_ = new global::AFMsg.Ident();
        }
        TeamId.MergeFrom(other.TeamId);
      }
      if (other.selfId_ != null) {
        if (selfId_ == null) {
          selfId_ = new global::AFMsg.Ident();
        }
        SelfId.MergeFrom(other.SelfId);
      }
      if (other.NEctypeID != 0) {
        NEctypeID = other.NEctypeID;
      }
      if (other.NGroupID != 0) {
        NGroupID = other.NGroupID;
      }
      if (other.NResult != 0) {
        NResult = other.NResult;
      }
      if (other.NServerID != 0) {
        NServerID = other.NServerID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (teamId_ == null) {
              teamId_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(teamId_);
            break;
          }
          case 18: {
            if (selfId_ == null) {
              selfId_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(selfId_);
            break;
          }
          case 24: {
            NEctypeID = input.ReadInt32();
            break;
          }
          case 32: {
            NGroupID = input.ReadInt32();
            break;
          }
          case 40: {
            NResult = input.ReadInt32();
            break;
          }
          case 48: {
            NServerID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_ACK_TEAM_ENTER_ECTYPE						= 870; 	// 组队进副本
  /// </summary>
  public sealed partial class AckTeamEnterEctype : pb::IMessage<AckTeamEnterEctype> {
    private static readonly pb::MessageParser<AckTeamEnterEctype> _parser = new pb::MessageParser<AckTeamEnterEctype>(() => new AckTeamEnterEctype());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckTeamEnterEctype> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckTeamEnterEctype() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckTeamEnterEctype(AckTeamEnterEctype other) : this() {
      TeamId = other.teamId_ != null ? other.TeamId.Clone() : null;
      SelfId = other.selfId_ != null ? other.SelfId.Clone() : null;
      nEctypeID_ = other.nEctypeID_;
      nGroupID_ = other.nGroupID_;
      nResult_ = other.nResult_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckTeamEnterEctype Clone() {
      return new AckTeamEnterEctype(this);
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 1;
    private global::AFMsg.Ident teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "self_id" field.</summary>
    public const int SelfIdFieldNumber = 2;
    private global::AFMsg.Ident selfId_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident SelfId {
      get { return selfId_; }
      set {
        selfId_ = value;
      }
    }

    /// <summary>Field number for the "nEctypeID" field.</summary>
    public const int NEctypeIDFieldNumber = 3;
    private int nEctypeID_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NEctypeID {
      get { return nEctypeID_; }
      set {
        nEctypeID_ = value;
      }
    }

    /// <summary>Field number for the "nGroupID" field.</summary>
    public const int NGroupIDFieldNumber = 4;
    private int nGroupID_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NGroupID {
      get { return nGroupID_; }
      set {
        nGroupID_ = value;
      }
    }

    /// <summary>Field number for the "nResult" field.</summary>
    public const int NResultFieldNumber = 5;
    private int nResult_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NResult {
      get { return nResult_; }
      set {
        nResult_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckTeamEnterEctype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckTeamEnterEctype other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TeamId, other.TeamId)) return false;
      if (!object.Equals(SelfId, other.SelfId)) return false;
      if (NEctypeID != other.NEctypeID) return false;
      if (NGroupID != other.NGroupID) return false;
      if (NResult != other.NResult) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (teamId_ != null) hash ^= TeamId.GetHashCode();
      if (selfId_ != null) hash ^= SelfId.GetHashCode();
      if (NEctypeID != 0) hash ^= NEctypeID.GetHashCode();
      if (NGroupID != 0) hash ^= NGroupID.GetHashCode();
      if (NResult != 0) hash ^= NResult.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (teamId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TeamId);
      }
      if (selfId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SelfId);
      }
      if (NEctypeID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NEctypeID);
      }
      if (NGroupID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(NGroupID);
      }
      if (NResult != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(NResult);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (teamId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TeamId);
      }
      if (selfId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelfId);
      }
      if (NEctypeID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NEctypeID);
      }
      if (NGroupID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NGroupID);
      }
      if (NResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NResult);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckTeamEnterEctype other) {
      if (other == null) {
        return;
      }
      if (other.teamId_ != null) {
        if (teamId_ == null) {
          teamId_ = new global::AFMsg.Ident();
        }
        TeamId.MergeFrom(other.TeamId);
      }
      if (other.selfId_ != null) {
        if (selfId_ == null) {
          selfId_ = new global::AFMsg.Ident();
        }
        SelfId.MergeFrom(other.SelfId);
      }
      if (other.NEctypeID != 0) {
        NEctypeID = other.NEctypeID;
      }
      if (other.NGroupID != 0) {
        NGroupID = other.NGroupID;
      }
      if (other.NResult != 0) {
        NResult = other.NResult;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (teamId_ == null) {
              teamId_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(teamId_);
            break;
          }
          case 18: {
            if (selfId_ == null) {
              selfId_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(selfId_);
            break;
          }
          case 24: {
            NEctypeID = input.ReadInt32();
            break;
          }
          case 32: {
            NGroupID = input.ReadInt32();
            break;
          }
          case 40: {
            NResult = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ////////////////大地图/////////////////////////////////////////////////////////////////////////////////////
  /// </summary>
  public sealed partial class GridGuildBaseInfo : pb::IMessage<GridGuildBaseInfo> {
    private static readonly pb::MessageParser<GridGuildBaseInfo> _parser = new pb::MessageParser<GridGuildBaseInfo>(() => new GridGuildBaseInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GridGuildBaseInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GridGuildBaseInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GridGuildBaseInfo(GridGuildBaseInfo other) : this() {
      Id = other.id_ != null ? other.Id.Clone() : null;
      level_ = other.level_;
      count_ = other.count_;
      resource_ = other.resource_;
      icon_ = other.icon_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GridGuildBaseInfo Clone() {
      return new GridGuildBaseInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::AFMsg.Ident id_;
    /// <summary>
    ///ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private int level_;
    /// <summary>
    ///Level
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 3;
    private int count_;
    /// <summary>
    ///人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "resource" field.</summary>
    public const int ResourceFieldNumber = 4;
    private int resource_;
    /// <summary>
    ///资源
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Resource {
      get { return resource_; }
      set {
        resource_ = value;
      }
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 5;
    private string icon_ = "";
    /// <summary>
    ///Icon
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Icon {
      get { return icon_; }
      set {
        icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GridGuildBaseInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GridGuildBaseInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      if (Level != other.Level) return false;
      if (Count != other.Count) return false;
      if (Resource != other.Resource) return false;
      if (Icon != other.Icon) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (Resource != 0) hash ^= Resource.GetHashCode();
      if (Icon.Length != 0) hash ^= Icon.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Count);
      }
      if (Resource != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Resource);
      }
      if (Icon.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Icon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (Resource != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Resource);
      }
      if (Icon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GridGuildBaseInfo other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          id_ = new global::AFMsg.Ident();
        }
        Id.MergeFrom(other.Id);
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.Resource != 0) {
        Resource = other.Resource;
      }
      if (other.Icon.Length != 0) {
        Icon = other.Icon;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (id_ == null) {
              id_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(id_);
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
          case 24: {
            Count = input.ReadInt32();
            break;
          }
          case 32: {
            Resource = input.ReadInt32();
            break;
          }
          case 42: {
            Icon = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_REQ_MAP_GRID_INFO
  /// </summary>
  public sealed partial class ReqBigMapGridInfo : pb::IMessage<ReqBigMapGridInfo> {
    private static readonly pb::MessageParser<ReqBigMapGridInfo> _parser = new pb::MessageParser<ReqBigMapGridInfo>(() => new ReqBigMapGridInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqBigMapGridInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqBigMapGridInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqBigMapGridInfo(ReqBigMapGridInfo other) : this() {
      mapTitleId_ = other.mapTitleId_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqBigMapGridInfo Clone() {
      return new ReqBigMapGridInfo(this);
    }

    /// <summary>Field number for the "map_title_id" field.</summary>
    public const int MapTitleIdFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_mapTitleId_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> mapTitleId_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> MapTitleId {
      get { return mapTitleId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqBigMapGridInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqBigMapGridInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!mapTitleId_.Equals(other.mapTitleId_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= mapTitleId_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      mapTitleId_.WriteTo(output, _repeated_mapTitleId_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += mapTitleId_.CalculateSize(_repeated_mapTitleId_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqBigMapGridInfo other) {
      if (other == null) {
        return;
      }
      mapTitleId_.Add(other.mapTitleId_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            mapTitleId_.AddEntriesFrom(input, _repeated_mapTitleId_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BigMapGridBaseInfo : pb::IMessage<BigMapGridBaseInfo> {
    private static readonly pb::MessageParser<BigMapGridBaseInfo> _parser = new pb::MessageParser<BigMapGridBaseInfo>(() => new BigMapGridBaseInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BigMapGridBaseInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigMapGridBaseInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigMapGridBaseInfo(BigMapGridBaseInfo other) : this() {
      id_ = other.id_;
      GuildInfo = other.guildInfo_ != null ? other.GuildInfo.Clone() : null;
      kingwarTime_ = other.kingwarTime_;
      Kingwarrer = other.kingwarrer_ != null ? other.Kingwarrer.Clone() : null;
      hurtingTime_ = other.hurtingTime_;
      Hurter = other.hurter_ != null ? other.Hurter.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigMapGridBaseInfo Clone() {
      return new BigMapGridBaseInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///GridID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "guild_info" field.</summary>
    public const int GuildInfoFieldNumber = 2;
    private global::AFMsg.GridGuildBaseInfo guildInfo_;
    /// <summary>
    ///所属占领公会
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.GridGuildBaseInfo GuildInfo {
      get { return guildInfo_; }
      set {
        guildInfo_ = value;
      }
    }

    /// <summary>Field number for the "kingwar_time" field.</summary>
    public const int KingwarTimeFieldNumber = 10;
    private int kingwarTime_;
    /// <summary>
    ///kingwar
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KingwarTime {
      get { return kingwarTime_; }
      set {
        kingwarTime_ = value;
      }
    }

    /// <summary>Field number for the "kingwarrer" field.</summary>
    public const int KingwarrerFieldNumber = 11;
    private global::AFMsg.Ident kingwarrer_;
    /// <summary>
    ///发动者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident Kingwarrer {
      get { return kingwarrer_; }
      set {
        kingwarrer_ = value;
      }
    }

    /// <summary>Field number for the "hurting_time" field.</summary>
    public const int HurtingTimeFieldNumber = 20;
    private int hurtingTime_;
    /// <summary>
    ///hurting
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HurtingTime {
      get { return hurtingTime_; }
      set {
        hurtingTime_ = value;
      }
    }

    /// <summary>Field number for the "hurter" field.</summary>
    public const int HurterFieldNumber = 21;
    private global::AFMsg.Ident hurter_;
    /// <summary>
    ///狩猎者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident Hurter {
      get { return hurter_; }
      set {
        hurter_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BigMapGridBaseInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BigMapGridBaseInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(GuildInfo, other.GuildInfo)) return false;
      if (KingwarTime != other.KingwarTime) return false;
      if (!object.Equals(Kingwarrer, other.Kingwarrer)) return false;
      if (HurtingTime != other.HurtingTime) return false;
      if (!object.Equals(Hurter, other.Hurter)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (guildInfo_ != null) hash ^= GuildInfo.GetHashCode();
      if (KingwarTime != 0) hash ^= KingwarTime.GetHashCode();
      if (kingwarrer_ != null) hash ^= Kingwarrer.GetHashCode();
      if (HurtingTime != 0) hash ^= HurtingTime.GetHashCode();
      if (hurter_ != null) hash ^= Hurter.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (guildInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(GuildInfo);
      }
      if (KingwarTime != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(KingwarTime);
      }
      if (kingwarrer_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Kingwarrer);
      }
      if (HurtingTime != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(HurtingTime);
      }
      if (hurter_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(Hurter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (guildInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GuildInfo);
      }
      if (KingwarTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KingwarTime);
      }
      if (kingwarrer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Kingwarrer);
      }
      if (HurtingTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HurtingTime);
      }
      if (hurter_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Hurter);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BigMapGridBaseInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.guildInfo_ != null) {
        if (guildInfo_ == null) {
          guildInfo_ = new global::AFMsg.GridGuildBaseInfo();
        }
        GuildInfo.MergeFrom(other.GuildInfo);
      }
      if (other.KingwarTime != 0) {
        KingwarTime = other.KingwarTime;
      }
      if (other.kingwarrer_ != null) {
        if (kingwarrer_ == null) {
          kingwarrer_ = new global::AFMsg.Ident();
        }
        Kingwarrer.MergeFrom(other.Kingwarrer);
      }
      if (other.HurtingTime != 0) {
        HurtingTime = other.HurtingTime;
      }
      if (other.hurter_ != null) {
        if (hurter_ == null) {
          hurter_ = new global::AFMsg.Ident();
        }
        Hurter.MergeFrom(other.Hurter);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            if (guildInfo_ == null) {
              guildInfo_ = new global::AFMsg.GridGuildBaseInfo();
            }
            input.ReadMessage(guildInfo_);
            break;
          }
          case 80: {
            KingwarTime = input.ReadInt32();
            break;
          }
          case 90: {
            if (kingwarrer_ == null) {
              kingwarrer_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(kingwarrer_);
            break;
          }
          case 160: {
            HurtingTime = input.ReadInt32();
            break;
          }
          case 170: {
            if (hurter_ == null) {
              hurter_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(hurter_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BigMapLeaveMsg : pb::IMessage<BigMapLeaveMsg> {
    private static readonly pb::MessageParser<BigMapLeaveMsg> _parser = new pb::MessageParser<BigMapLeaveMsg>(() => new BigMapLeaveMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BigMapLeaveMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigMapLeaveMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigMapLeaveMsg(BigMapLeaveMsg other) : this() {
      Owner = other.owner_ != null ? other.Owner.Clone() : null;
      ownerName_ = other.ownerName_;
      msgData_ = other.msgData_;
      msgTime_ = other.msgTime_;
      ownerLevel_ = other.ownerLevel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigMapLeaveMsg Clone() {
      return new BigMapLeaveMsg(this);
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 1;
    private global::AFMsg.Ident owner_;
    /// <summary>
    ///留言者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "owner_name" field.</summary>
    public const int OwnerNameFieldNumber = 2;
    private string ownerName_ = "";
    /// <summary>
    ///留言者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OwnerName {
      get { return ownerName_; }
      set {
        ownerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "msg_data" field.</summary>
    public const int MsgDataFieldNumber = 3;
    private string msgData_ = "";
    /// <summary>
    ///留言内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MsgData {
      get { return msgData_; }
      set {
        msgData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "msg_time" field.</summary>
    public const int MsgTimeFieldNumber = 4;
    private int msgTime_;
    /// <summary>
    ///留言时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MsgTime {
      get { return msgTime_; }
      set {
        msgTime_ = value;
      }
    }

    /// <summary>Field number for the "owner_level" field.</summary>
    public const int OwnerLevelFieldNumber = 5;
    private int ownerLevel_;
    /// <summary>
    ///留言时level
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OwnerLevel {
      get { return ownerLevel_; }
      set {
        ownerLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BigMapLeaveMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BigMapLeaveMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Owner, other.Owner)) return false;
      if (OwnerName != other.OwnerName) return false;
      if (MsgData != other.MsgData) return false;
      if (MsgTime != other.MsgTime) return false;
      if (OwnerLevel != other.OwnerLevel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (owner_ != null) hash ^= Owner.GetHashCode();
      if (OwnerName.Length != 0) hash ^= OwnerName.GetHashCode();
      if (MsgData.Length != 0) hash ^= MsgData.GetHashCode();
      if (MsgTime != 0) hash ^= MsgTime.GetHashCode();
      if (OwnerLevel != 0) hash ^= OwnerLevel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (owner_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Owner);
      }
      if (OwnerName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(OwnerName);
      }
      if (MsgData.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MsgData);
      }
      if (MsgTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MsgTime);
      }
      if (OwnerLevel != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(OwnerLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (owner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Owner);
      }
      if (OwnerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OwnerName);
      }
      if (MsgData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MsgData);
      }
      if (MsgTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MsgTime);
      }
      if (OwnerLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OwnerLevel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BigMapLeaveMsg other) {
      if (other == null) {
        return;
      }
      if (other.owner_ != null) {
        if (owner_ == null) {
          owner_ = new global::AFMsg.Ident();
        }
        Owner.MergeFrom(other.Owner);
      }
      if (other.OwnerName.Length != 0) {
        OwnerName = other.OwnerName;
      }
      if (other.MsgData.Length != 0) {
        MsgData = other.MsgData;
      }
      if (other.MsgTime != 0) {
        MsgTime = other.MsgTime;
      }
      if (other.OwnerLevel != 0) {
        OwnerLevel = other.OwnerLevel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (owner_ == null) {
              owner_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(owner_);
            break;
          }
          case 18: {
            OwnerName = input.ReadString();
            break;
          }
          case 26: {
            MsgData = input.ReadString();
            break;
          }
          case 32: {
            MsgTime = input.ReadInt32();
            break;
          }
          case 40: {
            OwnerLevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BigMapWarHistory : pb::IMessage<BigMapWarHistory> {
    private static readonly pb::MessageParser<BigMapWarHistory> _parser = new pb::MessageParser<BigMapWarHistory>(() => new BigMapWarHistory());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BigMapWarHistory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigMapWarHistory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigMapWarHistory(BigMapWarHistory other) : this() {
      RedInfo = other.redInfo_ != null ? other.RedInfo.Clone() : null;
      BlueInfo = other.blueInfo_ != null ? other.BlueInfo.Clone() : null;
      WinnerId = other.winnerId_ != null ? other.WinnerId.Clone() : null;
      warTime_ = other.warTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigMapWarHistory Clone() {
      return new BigMapWarHistory(this);
    }

    /// <summary>Field number for the "red_info" field.</summary>
    public const int RedInfoFieldNumber = 1;
    private global::AFMsg.GridGuildBaseInfo redInfo_;
    /// <summary>
    ///红方	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.GridGuildBaseInfo RedInfo {
      get { return redInfo_; }
      set {
        redInfo_ = value;
      }
    }

    /// <summary>Field number for the "blue_info" field.</summary>
    public const int BlueInfoFieldNumber = 2;
    private global::AFMsg.GridGuildBaseInfo blueInfo_;
    /// <summary>
    ///蓝方	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.GridGuildBaseInfo BlueInfo {
      get { return blueInfo_; }
      set {
        blueInfo_ = value;
      }
    }

    /// <summary>Field number for the "winner_id" field.</summary>
    public const int WinnerIdFieldNumber = 10;
    private global::AFMsg.Ident winnerId_;
    /// <summary>
    ///winner
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident WinnerId {
      get { return winnerId_; }
      set {
        winnerId_ = value;
      }
    }

    /// <summary>Field number for the "war_time" field.</summary>
    public const int WarTimeFieldNumber = 11;
    private int warTime_;
    /// <summary>
    ///war时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WarTime {
      get { return warTime_; }
      set {
        warTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BigMapWarHistory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BigMapWarHistory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RedInfo, other.RedInfo)) return false;
      if (!object.Equals(BlueInfo, other.BlueInfo)) return false;
      if (!object.Equals(WinnerId, other.WinnerId)) return false;
      if (WarTime != other.WarTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (redInfo_ != null) hash ^= RedInfo.GetHashCode();
      if (blueInfo_ != null) hash ^= BlueInfo.GetHashCode();
      if (winnerId_ != null) hash ^= WinnerId.GetHashCode();
      if (WarTime != 0) hash ^= WarTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (redInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RedInfo);
      }
      if (blueInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BlueInfo);
      }
      if (winnerId_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(WinnerId);
      }
      if (WarTime != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(WarTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (redInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RedInfo);
      }
      if (blueInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BlueInfo);
      }
      if (winnerId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WinnerId);
      }
      if (WarTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WarTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BigMapWarHistory other) {
      if (other == null) {
        return;
      }
      if (other.redInfo_ != null) {
        if (redInfo_ == null) {
          redInfo_ = new global::AFMsg.GridGuildBaseInfo();
        }
        RedInfo.MergeFrom(other.RedInfo);
      }
      if (other.blueInfo_ != null) {
        if (blueInfo_ == null) {
          blueInfo_ = new global::AFMsg.GridGuildBaseInfo();
        }
        BlueInfo.MergeFrom(other.BlueInfo);
      }
      if (other.winnerId_ != null) {
        if (winnerId_ == null) {
          winnerId_ = new global::AFMsg.Ident();
        }
        WinnerId.MergeFrom(other.WinnerId);
      }
      if (other.WarTime != 0) {
        WarTime = other.WarTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (redInfo_ == null) {
              redInfo_ = new global::AFMsg.GridGuildBaseInfo();
            }
            input.ReadMessage(redInfo_);
            break;
          }
          case 18: {
            if (blueInfo_ == null) {
              blueInfo_ = new global::AFMsg.GridGuildBaseInfo();
            }
            input.ReadMessage(blueInfo_);
            break;
          }
          case 82: {
            if (winnerId_ == null) {
              winnerId_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(winnerId_);
            break;
          }
          case 88: {
            WarTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BigMapGridDetailInfo : pb::IMessage<BigMapGridDetailInfo> {
    private static readonly pb::MessageParser<BigMapGridDetailInfo> _parser = new pb::MessageParser<BigMapGridDetailInfo>(() => new BigMapGridDetailInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BigMapGridDetailInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigMapGridDetailInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigMapGridDetailInfo(BigMapGridDetailInfo other) : this() {
      GridBaseInfo = other.gridBaseInfo_ != null ? other.GridBaseInfo.Clone() : null;
      stayGuidList_ = other.stayGuidList_.Clone();
      leaveMsg_ = other.leaveMsg_.Clone();
      warHistory_ = other.warHistory_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigMapGridDetailInfo Clone() {
      return new BigMapGridDetailInfo(this);
    }

    /// <summary>Field number for the "grid_base_info" field.</summary>
    public const int GridBaseInfoFieldNumber = 1;
    private global::AFMsg.BigMapGridBaseInfo gridBaseInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.BigMapGridBaseInfo GridBaseInfo {
      get { return gridBaseInfo_; }
      set {
        gridBaseInfo_ = value;
      }
    }

    /// <summary>Field number for the "stay_guid_list" field.</summary>
    public const int StayGuidListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::AFMsg.GridGuildBaseInfo> _repeated_stayGuidList_codec
        = pb::FieldCodec.ForMessage(18, global::AFMsg.GridGuildBaseInfo.Parser);
    private readonly pbc::RepeatedField<global::AFMsg.GridGuildBaseInfo> stayGuidList_ = new pbc::RepeatedField<global::AFMsg.GridGuildBaseInfo>();
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AFMsg.GridGuildBaseInfo> StayGuidList {
      get { return stayGuidList_; }
    }

    /// <summary>Field number for the "leave_msg" field.</summary>
    public const int LeaveMsgFieldNumber = 3;
    private static readonly pb::FieldCodec<global::AFMsg.BigMapLeaveMsg> _repeated_leaveMsg_codec
        = pb::FieldCodec.ForMessage(26, global::AFMsg.BigMapLeaveMsg.Parser);
    private readonly pbc::RepeatedField<global::AFMsg.BigMapLeaveMsg> leaveMsg_ = new pbc::RepeatedField<global::AFMsg.BigMapLeaveMsg>();
    /// <summary>
    ///此地图留言(&lt;=10)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AFMsg.BigMapLeaveMsg> LeaveMsg {
      get { return leaveMsg_; }
    }

    /// <summary>Field number for the "war_history" field.</summary>
    public const int WarHistoryFieldNumber = 4;
    private static readonly pb::FieldCodec<global::AFMsg.BigMapWarHistory> _repeated_warHistory_codec
        = pb::FieldCodec.ForMessage(34, global::AFMsg.BigMapWarHistory.Parser);
    private readonly pbc::RepeatedField<global::AFMsg.BigMapWarHistory> warHistory_ = new pbc::RepeatedField<global::AFMsg.BigMapWarHistory>();
    /// <summary>
    ///此地图历史战争信息(&lt;=10)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AFMsg.BigMapWarHistory> WarHistory {
      get { return warHistory_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BigMapGridDetailInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BigMapGridDetailInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GridBaseInfo, other.GridBaseInfo)) return false;
      if(!stayGuidList_.Equals(other.stayGuidList_)) return false;
      if(!leaveMsg_.Equals(other.leaveMsg_)) return false;
      if(!warHistory_.Equals(other.warHistory_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (gridBaseInfo_ != null) hash ^= GridBaseInfo.GetHashCode();
      hash ^= stayGuidList_.GetHashCode();
      hash ^= leaveMsg_.GetHashCode();
      hash ^= warHistory_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (gridBaseInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GridBaseInfo);
      }
      stayGuidList_.WriteTo(output, _repeated_stayGuidList_codec);
      leaveMsg_.WriteTo(output, _repeated_leaveMsg_codec);
      warHistory_.WriteTo(output, _repeated_warHistory_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (gridBaseInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GridBaseInfo);
      }
      size += stayGuidList_.CalculateSize(_repeated_stayGuidList_codec);
      size += leaveMsg_.CalculateSize(_repeated_leaveMsg_codec);
      size += warHistory_.CalculateSize(_repeated_warHistory_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BigMapGridDetailInfo other) {
      if (other == null) {
        return;
      }
      if (other.gridBaseInfo_ != null) {
        if (gridBaseInfo_ == null) {
          gridBaseInfo_ = new global::AFMsg.BigMapGridBaseInfo();
        }
        GridBaseInfo.MergeFrom(other.GridBaseInfo);
      }
      stayGuidList_.Add(other.stayGuidList_);
      leaveMsg_.Add(other.leaveMsg_);
      warHistory_.Add(other.warHistory_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (gridBaseInfo_ == null) {
              gridBaseInfo_ = new global::AFMsg.BigMapGridBaseInfo();
            }
            input.ReadMessage(gridBaseInfo_);
            break;
          }
          case 18: {
            stayGuidList_.AddEntriesFrom(input, _repeated_stayGuidList_codec);
            break;
          }
          case 26: {
            leaveMsg_.AddEntriesFrom(input, _repeated_leaveMsg_codec);
            break;
          }
          case 34: {
            warHistory_.AddEntriesFrom(input, _repeated_warHistory_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_ACK_MAP_GRID_INFO
  /// </summary>
  public sealed partial class AckBigMapGridInfo : pb::IMessage<AckBigMapGridInfo> {
    private static readonly pb::MessageParser<AckBigMapGridInfo> _parser = new pb::MessageParser<AckBigMapGridInfo>(() => new AckBigMapGridInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckBigMapGridInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[72]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckBigMapGridInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckBigMapGridInfo(AckBigMapGridInfo other) : this() {
      mapData_ = other.mapData_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckBigMapGridInfo Clone() {
      return new AckBigMapGridInfo(this);
    }

    /// <summary>Field number for the "map_data" field.</summary>
    public const int MapDataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AFMsg.BigMapGridDetailInfo> _repeated_mapData_codec
        = pb::FieldCodec.ForMessage(10, global::AFMsg.BigMapGridDetailInfo.Parser);
    private readonly pbc::RepeatedField<global::AFMsg.BigMapGridDetailInfo> mapData_ = new pbc::RepeatedField<global::AFMsg.BigMapGridDetailInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AFMsg.BigMapGridDetailInfo> MapData {
      get { return mapData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckBigMapGridInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckBigMapGridInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!mapData_.Equals(other.mapData_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= mapData_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      mapData_.WriteTo(output, _repeated_mapData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += mapData_.CalculateSize(_repeated_mapData_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckBigMapGridInfo other) {
      if (other == null) {
        return;
      }
      mapData_.Add(other.mapData_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            mapData_.AddEntriesFrom(input, _repeated_mapData_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_REQ_BIG_MAP_GRID
  /// </summary>
  public sealed partial class ReqBigMapInfo : pb::IMessage<ReqBigMapInfo> {
    private static readonly pb::MessageParser<ReqBigMapInfo> _parser = new pb::MessageParser<ReqBigMapInfo>(() => new ReqBigMapInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqBigMapInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[73]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqBigMapInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqBigMapInfo(ReqBigMapInfo other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqBigMapInfo Clone() {
      return new ReqBigMapInfo(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqBigMapInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqBigMapInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqBigMapInfo other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_ACK_BIG_MAP_GRID
  /// </summary>
  public sealed partial class AckBigMapInfo : pb::IMessage<AckBigMapInfo> {
    private static readonly pb::MessageParser<AckBigMapInfo> _parser = new pb::MessageParser<AckBigMapInfo>(() => new AckBigMapInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckBigMapInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[74]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckBigMapInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckBigMapInfo(AckBigMapInfo other) : this() {
      gridBaseInfo_ = other.gridBaseInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckBigMapInfo Clone() {
      return new AckBigMapInfo(this);
    }

    /// <summary>Field number for the "grid_base_info" field.</summary>
    public const int GridBaseInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AFMsg.BigMapGridBaseInfo> _repeated_gridBaseInfo_codec
        = pb::FieldCodec.ForMessage(10, global::AFMsg.BigMapGridBaseInfo.Parser);
    private readonly pbc::RepeatedField<global::AFMsg.BigMapGridBaseInfo> gridBaseInfo_ = new pbc::RepeatedField<global::AFMsg.BigMapGridBaseInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AFMsg.BigMapGridBaseInfo> GridBaseInfo {
      get { return gridBaseInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckBigMapInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckBigMapInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!gridBaseInfo_.Equals(other.gridBaseInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= gridBaseInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      gridBaseInfo_.WriteTo(output, _repeated_gridBaseInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += gridBaseInfo_.CalculateSize(_repeated_gridBaseInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckBigMapInfo other) {
      if (other == null) {
        return;
      }
      gridBaseInfo_.Add(other.gridBaseInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            gridBaseInfo_.AddEntriesFrom(input, _repeated_gridBaseInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_REQ_HOLD_MAP_GRID
  /// </summary>
  public sealed partial class ReqHoldMapGrid : pb::IMessage<ReqHoldMapGrid> {
    private static readonly pb::MessageParser<ReqHoldMapGrid> _parser = new pb::MessageParser<ReqHoldMapGrid>(() => new ReqHoldMapGrid());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqHoldMapGrid> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[75]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqHoldMapGrid() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqHoldMapGrid(ReqHoldMapGrid other) : this() {
      mapTitleId_ = other.mapTitleId_;
      GuildId = other.guildId_ != null ? other.GuildId.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqHoldMapGrid Clone() {
      return new ReqHoldMapGrid(this);
    }

    /// <summary>Field number for the "map_title_id" field.</summary>
    public const int MapTitleIdFieldNumber = 1;
    private string mapTitleId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MapTitleId {
      get { return mapTitleId_; }
      set {
        mapTitleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "guild_id" field.</summary>
    public const int GuildIdFieldNumber = 2;
    private global::AFMsg.Ident guildId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqHoldMapGrid);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqHoldMapGrid other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MapTitleId != other.MapTitleId) return false;
      if (!object.Equals(GuildId, other.GuildId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MapTitleId.Length != 0) hash ^= MapTitleId.GetHashCode();
      if (guildId_ != null) hash ^= GuildId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MapTitleId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MapTitleId);
      }
      if (guildId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(GuildId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MapTitleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MapTitleId);
      }
      if (guildId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GuildId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqHoldMapGrid other) {
      if (other == null) {
        return;
      }
      if (other.MapTitleId.Length != 0) {
        MapTitleId = other.MapTitleId;
      }
      if (other.guildId_ != null) {
        if (guildId_ == null) {
          guildId_ = new global::AFMsg.Ident();
        }
        GuildId.MergeFrom(other.GuildId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MapTitleId = input.ReadString();
            break;
          }
          case 18: {
            if (guildId_ == null) {
              guildId_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(guildId_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_ACK_HOLD_MAP_GRID
  /// </summary>
  public sealed partial class AckHoldMapGrid : pb::IMessage<AckHoldMapGrid> {
    private static readonly pb::MessageParser<AckHoldMapGrid> _parser = new pb::MessageParser<AckHoldMapGrid>(() => new AckHoldMapGrid());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckHoldMapGrid> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[76]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckHoldMapGrid() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckHoldMapGrid(AckHoldMapGrid other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckHoldMapGrid Clone() {
      return new AckHoldMapGrid(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckHoldMapGrid);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckHoldMapGrid other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckHoldMapGrid other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_REQ_LEAVE_MSG_MAP_GRID
  /// </summary>
  public sealed partial class ReqLeaveMapMsg : pb::IMessage<ReqLeaveMapMsg> {
    private static readonly pb::MessageParser<ReqLeaveMapMsg> _parser = new pb::MessageParser<ReqLeaveMapMsg>(() => new ReqLeaveMapMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqLeaveMapMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[77]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqLeaveMapMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqLeaveMapMsg(ReqLeaveMapMsg other) : this() {
      mapTitleId_ = other.mapTitleId_;
      LeaveMsg = other.leaveMsg_ != null ? other.LeaveMsg.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqLeaveMapMsg Clone() {
      return new ReqLeaveMapMsg(this);
    }

    /// <summary>Field number for the "map_title_id" field.</summary>
    public const int MapTitleIdFieldNumber = 1;
    private string mapTitleId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MapTitleId {
      get { return mapTitleId_; }
      set {
        mapTitleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "leave_msg" field.</summary>
    public const int LeaveMsgFieldNumber = 2;
    private global::AFMsg.BigMapLeaveMsg leaveMsg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.BigMapLeaveMsg LeaveMsg {
      get { return leaveMsg_; }
      set {
        leaveMsg_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqLeaveMapMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqLeaveMapMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MapTitleId != other.MapTitleId) return false;
      if (!object.Equals(LeaveMsg, other.LeaveMsg)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MapTitleId.Length != 0) hash ^= MapTitleId.GetHashCode();
      if (leaveMsg_ != null) hash ^= LeaveMsg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MapTitleId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MapTitleId);
      }
      if (leaveMsg_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LeaveMsg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MapTitleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MapTitleId);
      }
      if (leaveMsg_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LeaveMsg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqLeaveMapMsg other) {
      if (other == null) {
        return;
      }
      if (other.MapTitleId.Length != 0) {
        MapTitleId = other.MapTitleId;
      }
      if (other.leaveMsg_ != null) {
        if (leaveMsg_ == null) {
          leaveMsg_ = new global::AFMsg.BigMapLeaveMsg();
        }
        LeaveMsg.MergeFrom(other.LeaveMsg);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MapTitleId = input.ReadString();
            break;
          }
          case 18: {
            if (leaveMsg_ == null) {
              leaveMsg_ = new global::AFMsg.BigMapLeaveMsg();
            }
            input.ReadMessage(leaveMsg_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_ACK_LEAVE_MSG_MAP_GRID
  /// </summary>
  public sealed partial class AckLeaveMapMsg : pb::IMessage<AckLeaveMapMsg> {
    private static readonly pb::MessageParser<AckLeaveMapMsg> _parser = new pb::MessageParser<AckLeaveMapMsg>(() => new AckLeaveMapMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckLeaveMapMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[78]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckLeaveMapMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckLeaveMapMsg(AckLeaveMapMsg other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckLeaveMapMsg Clone() {
      return new AckLeaveMapMsg(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckLeaveMapMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckLeaveMapMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckLeaveMapMsg other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_REQ_GET_MAP_GRID_AWARD
  /// </summary>
  public sealed partial class ReqGetMapAward : pb::IMessage<ReqGetMapAward> {
    private static readonly pb::MessageParser<ReqGetMapAward> _parser = new pb::MessageParser<ReqGetMapAward>(() => new ReqGetMapAward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqGetMapAward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[79]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqGetMapAward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqGetMapAward(ReqGetMapAward other) : this() {
      mapTitleId_ = other.mapTitleId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqGetMapAward Clone() {
      return new ReqGetMapAward(this);
    }

    /// <summary>Field number for the "map_title_id" field.</summary>
    public const int MapTitleIdFieldNumber = 1;
    private string mapTitleId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MapTitleId {
      get { return mapTitleId_; }
      set {
        mapTitleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqGetMapAward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqGetMapAward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MapTitleId != other.MapTitleId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MapTitleId.Length != 0) hash ^= MapTitleId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MapTitleId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MapTitleId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MapTitleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MapTitleId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqGetMapAward other) {
      if (other == null) {
        return;
      }
      if (other.MapTitleId.Length != 0) {
        MapTitleId = other.MapTitleId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MapTitleId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_ACK_GET_MAP_GRID_AWARD
  /// </summary>
  public sealed partial class AckGetMapAward : pb::IMessage<AckGetMapAward> {
    private static readonly pb::MessageParser<AckGetMapAward> _parser = new pb::MessageParser<AckGetMapAward>(() => new AckGetMapAward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckGetMapAward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[80]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckGetMapAward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckGetMapAward(AckGetMapAward other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckGetMapAward Clone() {
      return new AckGetMapAward(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckGetMapAward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckGetMapAward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckGetMapAward other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_REQ_MAP_GRID_HUNTING
  /// </summary>
  public sealed partial class ReqMapHunting : pb::IMessage<ReqMapHunting> {
    private static readonly pb::MessageParser<ReqMapHunting> _parser = new pb::MessageParser<ReqMapHunting>(() => new ReqMapHunting());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqMapHunting> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[81]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqMapHunting() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqMapHunting(ReqMapHunting other) : this() {
      mapTitleId_ = other.mapTitleId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqMapHunting Clone() {
      return new ReqMapHunting(this);
    }

    /// <summary>Field number for the "map_title_id" field.</summary>
    public const int MapTitleIdFieldNumber = 1;
    private string mapTitleId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MapTitleId {
      get { return mapTitleId_; }
      set {
        mapTitleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqMapHunting);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqMapHunting other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MapTitleId != other.MapTitleId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MapTitleId.Length != 0) hash ^= MapTitleId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MapTitleId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MapTitleId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MapTitleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MapTitleId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqMapHunting other) {
      if (other == null) {
        return;
      }
      if (other.MapTitleId.Length != 0) {
        MapTitleId = other.MapTitleId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MapTitleId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_ACK_MAP_GRID_HUNTING
  /// </summary>
  public sealed partial class AckMapHunting : pb::IMessage<AckMapHunting> {
    private static readonly pb::MessageParser<AckMapHunting> _parser = new pb::MessageParser<AckMapHunting>(() => new AckMapHunting());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckMapHunting> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[82]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckMapHunting() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckMapHunting(AckMapHunting other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckMapHunting Clone() {
      return new AckMapHunting(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckMapHunting);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckMapHunting other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckMapHunting other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_REQ_MAP_GRID_KING_WAR
  /// </summary>
  public sealed partial class ReqMapKingWar : pb::IMessage<ReqMapKingWar> {
    private static readonly pb::MessageParser<ReqMapKingWar> _parser = new pb::MessageParser<ReqMapKingWar>(() => new ReqMapKingWar());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqMapKingWar> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[83]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqMapKingWar() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqMapKingWar(ReqMapKingWar other) : this() {
      mapTitleId_ = other.mapTitleId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqMapKingWar Clone() {
      return new ReqMapKingWar(this);
    }

    /// <summary>Field number for the "map_title_id" field.</summary>
    public const int MapTitleIdFieldNumber = 1;
    private string mapTitleId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MapTitleId {
      get { return mapTitleId_; }
      set {
        mapTitleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqMapKingWar);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqMapKingWar other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MapTitleId != other.MapTitleId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MapTitleId.Length != 0) hash ^= MapTitleId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MapTitleId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MapTitleId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MapTitleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MapTitleId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqMapKingWar other) {
      if (other == null) {
        return;
      }
      if (other.MapTitleId.Length != 0) {
        MapTitleId = other.MapTitleId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MapTitleId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_ACK_MAP_GRID_KING_WAR
  /// </summary>
  public sealed partial class AckMapKingWar : pb::IMessage<AckMapKingWar> {
    private static readonly pb::MessageParser<AckMapKingWar> _parser = new pb::MessageParser<AckMapKingWar>(() => new AckMapKingWar());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckMapKingWar> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[84]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckMapKingWar() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckMapKingWar(AckMapKingWar other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckMapKingWar Clone() {
      return new AckMapKingWar(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckMapKingWar);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckMapKingWar other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckMapKingWar other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /////////////////////////////////////////////////////////////////////////////////////////////////////
  /// </summary>
  public sealed partial class PVPRoomInfo : pb::IMessage<PVPRoomInfo> {
    private static readonly pb::MessageParser<PVPRoomInfo> _parser = new pb::MessageParser<PVPRoomInfo>(() => new PVPRoomInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PVPRoomInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[85]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PVPRoomInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PVPRoomInfo(PVPRoomInfo other) : this() {
      nCellStatus_ = other.nCellStatus_;
      RoomID = other.roomID_ != null ? other.RoomID.Clone() : null;
      nPVPMode_ = other.nPVPMode_;
      nPVPGrade_ = other.nPVPGrade_;
      maxPalyer_ = other.maxPalyer_;
      xRedPlayer_ = other.xRedPlayer_.Clone();
      xBluePlayer_ = other.xBluePlayer_.Clone();
      serverid_ = other.serverid_;
      sceneID_ = other.sceneID_;
      groupID_ = other.groupID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PVPRoomInfo Clone() {
      return new PVPRoomInfo(this);
    }

    /// <summary>Field number for the "nCellStatus" field.</summary>
    public const int NCellStatusFieldNumber = 1;
    private int nCellStatus_;
    /// <summary>
    /// 状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NCellStatus {
      get { return nCellStatus_; }
      set {
        nCellStatus_ = value;
      }
    }

    /// <summary>Field number for the "RoomID" field.</summary>
    public const int RoomIDFieldNumber = 2;
    private global::AFMsg.Ident roomID_;
    /// <summary>
    /// 房间ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "nPVPMode" field.</summary>
    public const int NPVPModeFieldNumber = 3;
    private int nPVPMode_;
    /// <summary>
    /// 匹配模式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NPVPMode {
      get { return nPVPMode_; }
      set {
        nPVPMode_ = value;
      }
    }

    /// <summary>Field number for the "nPVPGrade" field.</summary>
    public const int NPVPGradeFieldNumber = 4;
    private int nPVPGrade_;
    /// <summary>
    /// 房间所在的阶段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NPVPGrade {
      get { return nPVPGrade_; }
      set {
        nPVPGrade_ = value;
      }
    }

    /// <summary>Field number for the "MaxPalyer" field.</summary>
    public const int MaxPalyerFieldNumber = 5;
    private int maxPalyer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxPalyer {
      get { return maxPalyer_; }
      set {
        maxPalyer_ = value;
      }
    }

    /// <summary>Field number for the "xRedPlayer" field.</summary>
    public const int XRedPlayerFieldNumber = 6;
    private static readonly pb::FieldCodec<global::AFMsg.Ident> _repeated_xRedPlayer_codec
        = pb::FieldCodec.ForMessage(50, global::AFMsg.Ident.Parser);
    private readonly pbc::RepeatedField<global::AFMsg.Ident> xRedPlayer_ = new pbc::RepeatedField<global::AFMsg.Ident>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AFMsg.Ident> XRedPlayer {
      get { return xRedPlayer_; }
    }

    /// <summary>Field number for the "xBluePlayer" field.</summary>
    public const int XBluePlayerFieldNumber = 7;
    private static readonly pb::FieldCodec<global::AFMsg.Ident> _repeated_xBluePlayer_codec
        = pb::FieldCodec.ForMessage(58, global::AFMsg.Ident.Parser);
    private readonly pbc::RepeatedField<global::AFMsg.Ident> xBluePlayer_ = new pbc::RepeatedField<global::AFMsg.Ident>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AFMsg.Ident> XBluePlayer {
      get { return xBluePlayer_; }
    }

    /// <summary>Field number for the "serverid" field.</summary>
    public const int ServeridFieldNumber = 8;
    private long serverid_;
    /// <summary>
    /// 房间副本所在的serverid	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Serverid {
      get { return serverid_; }
      set {
        serverid_ = value;
      }
    }

    /// <summary>Field number for the "SceneID" field.</summary>
    public const int SceneIDFieldNumber = 9;
    private long sceneID_;
    /// <summary>
    /// 房间副本所在的场景id	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SceneID {
      get { return sceneID_; }
      set {
        sceneID_ = value;
      }
    }

    /// <summary>Field number for the "groupID" field.</summary>
    public const int GroupIDFieldNumber = 10;
    private long groupID_;
    /// <summary>
    /// 房间副本所在的层
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GroupID {
      get { return groupID_; }
      set {
        groupID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PVPRoomInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PVPRoomInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NCellStatus != other.NCellStatus) return false;
      if (!object.Equals(RoomID, other.RoomID)) return false;
      if (NPVPMode != other.NPVPMode) return false;
      if (NPVPGrade != other.NPVPGrade) return false;
      if (MaxPalyer != other.MaxPalyer) return false;
      if(!xRedPlayer_.Equals(other.xRedPlayer_)) return false;
      if(!xBluePlayer_.Equals(other.xBluePlayer_)) return false;
      if (Serverid != other.Serverid) return false;
      if (SceneID != other.SceneID) return false;
      if (GroupID != other.GroupID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NCellStatus != 0) hash ^= NCellStatus.GetHashCode();
      if (roomID_ != null) hash ^= RoomID.GetHashCode();
      if (NPVPMode != 0) hash ^= NPVPMode.GetHashCode();
      if (NPVPGrade != 0) hash ^= NPVPGrade.GetHashCode();
      if (MaxPalyer != 0) hash ^= MaxPalyer.GetHashCode();
      hash ^= xRedPlayer_.GetHashCode();
      hash ^= xBluePlayer_.GetHashCode();
      if (Serverid != 0L) hash ^= Serverid.GetHashCode();
      if (SceneID != 0L) hash ^= SceneID.GetHashCode();
      if (GroupID != 0L) hash ^= GroupID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NCellStatus != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NCellStatus);
      }
      if (roomID_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RoomID);
      }
      if (NPVPMode != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NPVPMode);
      }
      if (NPVPGrade != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(NPVPGrade);
      }
      if (MaxPalyer != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MaxPalyer);
      }
      xRedPlayer_.WriteTo(output, _repeated_xRedPlayer_codec);
      xBluePlayer_.WriteTo(output, _repeated_xBluePlayer_codec);
      if (Serverid != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(Serverid);
      }
      if (SceneID != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(SceneID);
      }
      if (GroupID != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(GroupID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NCellStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NCellStatus);
      }
      if (roomID_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomID);
      }
      if (NPVPMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NPVPMode);
      }
      if (NPVPGrade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NPVPGrade);
      }
      if (MaxPalyer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxPalyer);
      }
      size += xRedPlayer_.CalculateSize(_repeated_xRedPlayer_codec);
      size += xBluePlayer_.CalculateSize(_repeated_xBluePlayer_codec);
      if (Serverid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Serverid);
      }
      if (SceneID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SceneID);
      }
      if (GroupID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GroupID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PVPRoomInfo other) {
      if (other == null) {
        return;
      }
      if (other.NCellStatus != 0) {
        NCellStatus = other.NCellStatus;
      }
      if (other.roomID_ != null) {
        if (roomID_ == null) {
          roomID_ = new global::AFMsg.Ident();
        }
        RoomID.MergeFrom(other.RoomID);
      }
      if (other.NPVPMode != 0) {
        NPVPMode = other.NPVPMode;
      }
      if (other.NPVPGrade != 0) {
        NPVPGrade = other.NPVPGrade;
      }
      if (other.MaxPalyer != 0) {
        MaxPalyer = other.MaxPalyer;
      }
      xRedPlayer_.Add(other.xRedPlayer_);
      xBluePlayer_.Add(other.xBluePlayer_);
      if (other.Serverid != 0L) {
        Serverid = other.Serverid;
      }
      if (other.SceneID != 0L) {
        SceneID = other.SceneID;
      }
      if (other.GroupID != 0L) {
        GroupID = other.GroupID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NCellStatus = input.ReadInt32();
            break;
          }
          case 18: {
            if (roomID_ == null) {
              roomID_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(roomID_);
            break;
          }
          case 24: {
            NPVPMode = input.ReadInt32();
            break;
          }
          case 32: {
            NPVPGrade = input.ReadInt32();
            break;
          }
          case 40: {
            MaxPalyer = input.ReadInt32();
            break;
          }
          case 50: {
            xRedPlayer_.AddEntriesFrom(input, _repeated_xRedPlayer_codec);
            break;
          }
          case 58: {
            xBluePlayer_.AddEntriesFrom(input, _repeated_xBluePlayer_codec);
            break;
          }
          case 64: {
            Serverid = input.ReadInt64();
            break;
          }
          case 72: {
            SceneID = input.ReadInt64();
            break;
          }
          case 80: {
            GroupID = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGMI_REQ_PVPAPPLYMACTCH						= 1100; 	// 申请匹配pvp
  /// </summary>
  public sealed partial class ReqPVPApplyMatch : pb::IMessage<ReqPVPApplyMatch> {
    private static readonly pb::MessageParser<ReqPVPApplyMatch> _parser = new pb::MessageParser<ReqPVPApplyMatch>(() => new ReqPVPApplyMatch());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqPVPApplyMatch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[86]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqPVPApplyMatch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqPVPApplyMatch(ReqPVPApplyMatch other) : this() {
      SelfId = other.selfId_ != null ? other.SelfId.Clone() : null;
      nPVPMode_ = other.nPVPMode_;
      score_ = other.score_;
      applyType_ = other.applyType_;
      TeamId = other.teamId_ != null ? other.TeamId.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqPVPApplyMatch Clone() {
      return new ReqPVPApplyMatch(this);
    }

    /// <summary>Field number for the "self_id" field.</summary>
    public const int SelfIdFieldNumber = 1;
    private global::AFMsg.Ident selfId_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident SelfId {
      get { return selfId_; }
      set {
        selfId_ = value;
      }
    }

    /// <summary>Field number for the "nPVPMode" field.</summary>
    public const int NPVPModeFieldNumber = 2;
    private int nPVPMode_;
    /// <summary>
    /// 匹配模式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NPVPMode {
      get { return nPVPMode_; }
      set {
        nPVPMode_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 3;
    private long score_;
    /// <summary>
    /// 分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "ApplyType" field.</summary>
    public const int ApplyTypeFieldNumber = 4;
    private int applyType_;
    /// <summary>
    /// 匹配方式，队伍申请还是个人申请
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplyType {
      get { return applyType_; }
      set {
        applyType_ = value;
      }
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 5;
    private global::AFMsg.Ident teamId_;
    /// <summary>
    /// 队伍ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqPVPApplyMatch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqPVPApplyMatch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SelfId, other.SelfId)) return false;
      if (NPVPMode != other.NPVPMode) return false;
      if (Score != other.Score) return false;
      if (ApplyType != other.ApplyType) return false;
      if (!object.Equals(TeamId, other.TeamId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (selfId_ != null) hash ^= SelfId.GetHashCode();
      if (NPVPMode != 0) hash ^= NPVPMode.GetHashCode();
      if (Score != 0L) hash ^= Score.GetHashCode();
      if (ApplyType != 0) hash ^= ApplyType.GetHashCode();
      if (teamId_ != null) hash ^= TeamId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (selfId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SelfId);
      }
      if (NPVPMode != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NPVPMode);
      }
      if (Score != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Score);
      }
      if (ApplyType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ApplyType);
      }
      if (teamId_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(TeamId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (selfId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelfId);
      }
      if (NPVPMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NPVPMode);
      }
      if (Score != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Score);
      }
      if (ApplyType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApplyType);
      }
      if (teamId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TeamId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqPVPApplyMatch other) {
      if (other == null) {
        return;
      }
      if (other.selfId_ != null) {
        if (selfId_ == null) {
          selfId_ = new global::AFMsg.Ident();
        }
        SelfId.MergeFrom(other.SelfId);
      }
      if (other.NPVPMode != 0) {
        NPVPMode = other.NPVPMode;
      }
      if (other.Score != 0L) {
        Score = other.Score;
      }
      if (other.ApplyType != 0) {
        ApplyType = other.ApplyType;
      }
      if (other.teamId_ != null) {
        if (teamId_ == null) {
          teamId_ = new global::AFMsg.Ident();
        }
        TeamId.MergeFrom(other.TeamId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (selfId_ == null) {
              selfId_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(selfId_);
            break;
          }
          case 16: {
            NPVPMode = input.ReadInt32();
            break;
          }
          case 24: {
            Score = input.ReadInt64();
            break;
          }
          case 32: {
            ApplyType = input.ReadInt32();
            break;
          }
          case 42: {
            if (teamId_ == null) {
              teamId_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(teamId_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ReqPVPApplyMatch message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EApplyType {
        /// <summary>
        /// 个人匹配
        /// </summary>
        [pbr::OriginalName("EApplyType_Single")] Single = 0,
        /// <summary>
        /// 队伍匹配
        /// </summary>
        [pbr::OriginalName("EApplyType_Team")] Team = 1,
      }

    }
    #endregion

  }

  /// <summary>
  ///EGMI_ACK_PVPAPPLYMACTCH						= 1101; 	// 返回匹配pvp
  /// </summary>
  public sealed partial class AckPVPApplyMatch : pb::IMessage<AckPVPApplyMatch> {
    private static readonly pb::MessageParser<AckPVPApplyMatch> _parser = new pb::MessageParser<AckPVPApplyMatch>(() => new AckPVPApplyMatch());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckPVPApplyMatch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[87]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckPVPApplyMatch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckPVPApplyMatch(AckPVPApplyMatch other) : this() {
      SelfId = other.selfId_ != null ? other.SelfId.Clone() : null;
      XRoomInfo = other.xRoomInfo_ != null ? other.XRoomInfo.Clone() : null;
      applyType_ = other.applyType_;
      nResult_ = other.nResult_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckPVPApplyMatch Clone() {
      return new AckPVPApplyMatch(this);
    }

    /// <summary>Field number for the "self_id" field.</summary>
    public const int SelfIdFieldNumber = 1;
    private global::AFMsg.Ident selfId_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident SelfId {
      get { return selfId_; }
      set {
        selfId_ = value;
      }
    }

    /// <summary>Field number for the "xRoomInfo" field.</summary>
    public const int XRoomInfoFieldNumber = 2;
    private global::AFMsg.PVPRoomInfo xRoomInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.PVPRoomInfo XRoomInfo {
      get { return xRoomInfo_; }
      set {
        xRoomInfo_ = value;
      }
    }

    /// <summary>Field number for the "ApplyType" field.</summary>
    public const int ApplyTypeFieldNumber = 3;
    private int applyType_;
    /// <summary>
    /// 匹配方式，队伍申请还是个人申请
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplyType {
      get { return applyType_; }
      set {
        applyType_ = value;
      }
    }

    /// <summary>Field number for the "nResult" field.</summary>
    public const int NResultFieldNumber = 4;
    private int nResult_;
    /// <summary>
    /// 匹配的结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NResult {
      get { return nResult_; }
      set {
        nResult_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckPVPApplyMatch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckPVPApplyMatch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SelfId, other.SelfId)) return false;
      if (!object.Equals(XRoomInfo, other.XRoomInfo)) return false;
      if (ApplyType != other.ApplyType) return false;
      if (NResult != other.NResult) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (selfId_ != null) hash ^= SelfId.GetHashCode();
      if (xRoomInfo_ != null) hash ^= XRoomInfo.GetHashCode();
      if (ApplyType != 0) hash ^= ApplyType.GetHashCode();
      if (NResult != 0) hash ^= NResult.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (selfId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SelfId);
      }
      if (xRoomInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(XRoomInfo);
      }
      if (ApplyType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ApplyType);
      }
      if (NResult != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(NResult);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (selfId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelfId);
      }
      if (xRoomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(XRoomInfo);
      }
      if (ApplyType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApplyType);
      }
      if (NResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NResult);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckPVPApplyMatch other) {
      if (other == null) {
        return;
      }
      if (other.selfId_ != null) {
        if (selfId_ == null) {
          selfId_ = new global::AFMsg.Ident();
        }
        SelfId.MergeFrom(other.SelfId);
      }
      if (other.xRoomInfo_ != null) {
        if (xRoomInfo_ == null) {
          xRoomInfo_ = new global::AFMsg.PVPRoomInfo();
        }
        XRoomInfo.MergeFrom(other.XRoomInfo);
      }
      if (other.ApplyType != 0) {
        ApplyType = other.ApplyType;
      }
      if (other.NResult != 0) {
        NResult = other.NResult;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (selfId_ == null) {
              selfId_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(selfId_);
            break;
          }
          case 18: {
            if (xRoomInfo_ == null) {
              xRoomInfo_ = new global::AFMsg.PVPRoomInfo();
            }
            input.ReadMessage(xRoomInfo_);
            break;
          }
          case 24: {
            ApplyType = input.ReadInt32();
            break;
          }
          case 32: {
            NResult = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGMI_REQ_CREATEPVPECTYPE					= 1102; 	// 申请pvp副本
  /// </summary>
  public sealed partial class ReqCreatePVPEctype : pb::IMessage<ReqCreatePVPEctype> {
    private static readonly pb::MessageParser<ReqCreatePVPEctype> _parser = new pb::MessageParser<ReqCreatePVPEctype>(() => new ReqCreatePVPEctype());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqCreatePVPEctype> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[88]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqCreatePVPEctype() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqCreatePVPEctype(ReqCreatePVPEctype other) : this() {
      SelfId = other.selfId_ != null ? other.SelfId.Clone() : null;
      XRoomInfo = other.xRoomInfo_ != null ? other.XRoomInfo.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqCreatePVPEctype Clone() {
      return new ReqCreatePVPEctype(this);
    }

    /// <summary>Field number for the "self_id" field.</summary>
    public const int SelfIdFieldNumber = 1;
    private global::AFMsg.Ident selfId_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident SelfId {
      get { return selfId_; }
      set {
        selfId_ = value;
      }
    }

    /// <summary>Field number for the "xRoomInfo" field.</summary>
    public const int XRoomInfoFieldNumber = 2;
    private global::AFMsg.PVPRoomInfo xRoomInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.PVPRoomInfo XRoomInfo {
      get { return xRoomInfo_; }
      set {
        xRoomInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqCreatePVPEctype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqCreatePVPEctype other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SelfId, other.SelfId)) return false;
      if (!object.Equals(XRoomInfo, other.XRoomInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (selfId_ != null) hash ^= SelfId.GetHashCode();
      if (xRoomInfo_ != null) hash ^= XRoomInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (selfId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SelfId);
      }
      if (xRoomInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(XRoomInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (selfId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelfId);
      }
      if (xRoomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(XRoomInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqCreatePVPEctype other) {
      if (other == null) {
        return;
      }
      if (other.selfId_ != null) {
        if (selfId_ == null) {
          selfId_ = new global::AFMsg.Ident();
        }
        SelfId.MergeFrom(other.SelfId);
      }
      if (other.xRoomInfo_ != null) {
        if (xRoomInfo_ == null) {
          xRoomInfo_ = new global::AFMsg.PVPRoomInfo();
        }
        XRoomInfo.MergeFrom(other.XRoomInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (selfId_ == null) {
              selfId_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(selfId_);
            break;
          }
          case 18: {
            if (xRoomInfo_ == null) {
              xRoomInfo_ = new global::AFMsg.PVPRoomInfo();
            }
            input.ReadMessage(xRoomInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGMI_ACK_CREATEPVPECTYPE					= 1103; 	// 返回pvp副本的信息，并拉人
  /// </summary>
  public sealed partial class AckCreatePVPEctype : pb::IMessage<AckCreatePVPEctype> {
    private static readonly pb::MessageParser<AckCreatePVPEctype> _parser = new pb::MessageParser<AckCreatePVPEctype>(() => new AckCreatePVPEctype());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckCreatePVPEctype> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgShareReflection.Descriptor.MessageTypes[89]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckCreatePVPEctype() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckCreatePVPEctype(AckCreatePVPEctype other) : this() {
      SelfId = other.selfId_ != null ? other.SelfId.Clone() : null;
      XRoomInfo = other.xRoomInfo_ != null ? other.XRoomInfo.Clone() : null;
      applyType_ = other.applyType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckCreatePVPEctype Clone() {
      return new AckCreatePVPEctype(this);
    }

    /// <summary>Field number for the "self_id" field.</summary>
    public const int SelfIdFieldNumber = 1;
    private global::AFMsg.Ident selfId_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.Ident SelfId {
      get { return selfId_; }
      set {
        selfId_ = value;
      }
    }

    /// <summary>Field number for the "xRoomInfo" field.</summary>
    public const int XRoomInfoFieldNumber = 2;
    private global::AFMsg.PVPRoomInfo xRoomInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AFMsg.PVPRoomInfo XRoomInfo {
      get { return xRoomInfo_; }
      set {
        xRoomInfo_ = value;
      }
    }

    /// <summary>Field number for the "ApplyType" field.</summary>
    public const int ApplyTypeFieldNumber = 3;
    private int applyType_;
    /// <summary>
    /// 匹配方式，队伍申请还是个人申请
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplyType {
      get { return applyType_; }
      set {
        applyType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckCreatePVPEctype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckCreatePVPEctype other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SelfId, other.SelfId)) return false;
      if (!object.Equals(XRoomInfo, other.XRoomInfo)) return false;
      if (ApplyType != other.ApplyType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (selfId_ != null) hash ^= SelfId.GetHashCode();
      if (xRoomInfo_ != null) hash ^= XRoomInfo.GetHashCode();
      if (ApplyType != 0) hash ^= ApplyType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (selfId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SelfId);
      }
      if (xRoomInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(XRoomInfo);
      }
      if (ApplyType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ApplyType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (selfId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelfId);
      }
      if (xRoomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(XRoomInfo);
      }
      if (ApplyType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApplyType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckCreatePVPEctype other) {
      if (other == null) {
        return;
      }
      if (other.selfId_ != null) {
        if (selfId_ == null) {
          selfId_ = new global::AFMsg.Ident();
        }
        SelfId.MergeFrom(other.SelfId);
      }
      if (other.xRoomInfo_ != null) {
        if (xRoomInfo_ == null) {
          xRoomInfo_ = new global::AFMsg.PVPRoomInfo();
        }
        XRoomInfo.MergeFrom(other.XRoomInfo);
      }
      if (other.ApplyType != 0) {
        ApplyType = other.ApplyType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (selfId_ == null) {
              selfId_ = new global::AFMsg.Ident();
            }
            input.ReadMessage(selfId_);
            break;
          }
          case 18: {
            if (xRoomInfo_ == null) {
              xRoomInfo_ = new global::AFMsg.PVPRoomInfo();
            }
            input.ReadMessage(xRoomInfo_);
            break;
          }
          case 24: {
            ApplyType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
