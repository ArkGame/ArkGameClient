// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: AFMsgMysql.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AFMsg {

  /// <summary>Holder for reflection information generated from AFMsgMysql.proto</summary>
  public static partial class AFMsgMysqlReflection {

    #region Descriptor
    /// <summary>File descriptor for AFMsgMysql.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AFMsgMysqlReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBBRk1zZ015c3FsLnByb3RvEgVBRk1zZyKfAQoOUGFja015c3FsUGFyYW0S",
            "FQoNc3RyUmVjb3JkTmFtZRgBIAEoCRIOCgZzdHJLZXkYAiABKAkSFAoMZmll",
            "bGRWZWNMaXN0GAMgASgJEhQKDHZhbHVlVmVjTGlzdBgEIAEoCRINCgViRXhp",
            "dBgFIAEoAxIOCgZucmVxaWQYBiABKAMSDAoEblJldBgHIAEoAxINCgVlVHlw",
            "ZRgIIAEoAyKuAQoTUGFja015c3FsU2VydmVySW5mbxIVCg1uUmNvbm5lY3RU",
            "aW1lGAEgASgDEhQKDG5SY29ubmVDb3VudBgCIAEoAxINCgVuUG9ydBgDIAEo",
            "AxIRCglzdHJEQk5hbWUYBCABKAkSEAoIc3RyRG5zSXAYBSABKAkSEQoJc3Ry",
            "REJVc2VyGAYgASgJEhAKCHN0ckRCUHdkGAcgASgJEhEKCW5TZXJ2ZXJJRBgI",
            "IAEoA2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.PackMysqlParam), global::AFMsg.PackMysqlParam.Parser, new[]{ "StrRecordName", "StrKey", "FieldVecList", "ValueVecList", "BExit", "Nreqid", "NRet", "EType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AFMsg.PackMysqlServerInfo), global::AFMsg.PackMysqlServerInfo.Parser, new[]{ "NRconnectTime", "NRconneCount", "NPort", "StrDBName", "StrDnsIp", "StrDBUser", "StrDBPwd", "NServerID" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PackMysqlParam : pb::IMessage<PackMysqlParam> {
    private static readonly pb::MessageParser<PackMysqlParam> _parser = new pb::MessageParser<PackMysqlParam>(() => new PackMysqlParam());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PackMysqlParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgMysqlReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackMysqlParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackMysqlParam(PackMysqlParam other) : this() {
      strRecordName_ = other.strRecordName_;
      strKey_ = other.strKey_;
      fieldVecList_ = other.fieldVecList_;
      valueVecList_ = other.valueVecList_;
      bExit_ = other.bExit_;
      nreqid_ = other.nreqid_;
      nRet_ = other.nRet_;
      eType_ = other.eType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackMysqlParam Clone() {
      return new PackMysqlParam(this);
    }

    /// <summary>Field number for the "strRecordName" field.</summary>
    public const int StrRecordNameFieldNumber = 1;
    private string strRecordName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StrRecordName {
      get { return strRecordName_; }
      set {
        strRecordName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "strKey" field.</summary>
    public const int StrKeyFieldNumber = 2;
    private string strKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StrKey {
      get { return strKey_; }
      set {
        strKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fieldVecList" field.</summary>
    public const int FieldVecListFieldNumber = 3;
    private string fieldVecList_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FieldVecList {
      get { return fieldVecList_; }
      set {
        fieldVecList_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "valueVecList" field.</summary>
    public const int ValueVecListFieldNumber = 4;
    private string valueVecList_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ValueVecList {
      get { return valueVecList_; }
      set {
        valueVecList_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bExit" field.</summary>
    public const int BExitFieldNumber = 5;
    private long bExit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BExit {
      get { return bExit_; }
      set {
        bExit_ = value;
      }
    }

    /// <summary>Field number for the "nreqid" field.</summary>
    public const int NreqidFieldNumber = 6;
    private long nreqid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Nreqid {
      get { return nreqid_; }
      set {
        nreqid_ = value;
      }
    }

    /// <summary>Field number for the "nRet" field.</summary>
    public const int NRetFieldNumber = 7;
    private long nRet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NRet {
      get { return nRet_; }
      set {
        nRet_ = value;
      }
    }

    /// <summary>Field number for the "eType" field.</summary>
    public const int ETypeFieldNumber = 8;
    private long eType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EType {
      get { return eType_; }
      set {
        eType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PackMysqlParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PackMysqlParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StrRecordName != other.StrRecordName) return false;
      if (StrKey != other.StrKey) return false;
      if (FieldVecList != other.FieldVecList) return false;
      if (ValueVecList != other.ValueVecList) return false;
      if (BExit != other.BExit) return false;
      if (Nreqid != other.Nreqid) return false;
      if (NRet != other.NRet) return false;
      if (EType != other.EType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StrRecordName.Length != 0) hash ^= StrRecordName.GetHashCode();
      if (StrKey.Length != 0) hash ^= StrKey.GetHashCode();
      if (FieldVecList.Length != 0) hash ^= FieldVecList.GetHashCode();
      if (ValueVecList.Length != 0) hash ^= ValueVecList.GetHashCode();
      if (BExit != 0L) hash ^= BExit.GetHashCode();
      if (Nreqid != 0L) hash ^= Nreqid.GetHashCode();
      if (NRet != 0L) hash ^= NRet.GetHashCode();
      if (EType != 0L) hash ^= EType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StrRecordName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StrRecordName);
      }
      if (StrKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(StrKey);
      }
      if (FieldVecList.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FieldVecList);
      }
      if (ValueVecList.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ValueVecList);
      }
      if (BExit != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(BExit);
      }
      if (Nreqid != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Nreqid);
      }
      if (NRet != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(NRet);
      }
      if (EType != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(EType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StrRecordName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StrRecordName);
      }
      if (StrKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StrKey);
      }
      if (FieldVecList.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FieldVecList);
      }
      if (ValueVecList.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ValueVecList);
      }
      if (BExit != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BExit);
      }
      if (Nreqid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Nreqid);
      }
      if (NRet != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NRet);
      }
      if (EType != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PackMysqlParam other) {
      if (other == null) {
        return;
      }
      if (other.StrRecordName.Length != 0) {
        StrRecordName = other.StrRecordName;
      }
      if (other.StrKey.Length != 0) {
        StrKey = other.StrKey;
      }
      if (other.FieldVecList.Length != 0) {
        FieldVecList = other.FieldVecList;
      }
      if (other.ValueVecList.Length != 0) {
        ValueVecList = other.ValueVecList;
      }
      if (other.BExit != 0L) {
        BExit = other.BExit;
      }
      if (other.Nreqid != 0L) {
        Nreqid = other.Nreqid;
      }
      if (other.NRet != 0L) {
        NRet = other.NRet;
      }
      if (other.EType != 0L) {
        EType = other.EType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            StrRecordName = input.ReadString();
            break;
          }
          case 18: {
            StrKey = input.ReadString();
            break;
          }
          case 26: {
            FieldVecList = input.ReadString();
            break;
          }
          case 34: {
            ValueVecList = input.ReadString();
            break;
          }
          case 40: {
            BExit = input.ReadInt64();
            break;
          }
          case 48: {
            Nreqid = input.ReadInt64();
            break;
          }
          case 56: {
            NRet = input.ReadInt64();
            break;
          }
          case 64: {
            EType = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PackMysqlServerInfo : pb::IMessage<PackMysqlServerInfo> {
    private static readonly pb::MessageParser<PackMysqlServerInfo> _parser = new pb::MessageParser<PackMysqlServerInfo>(() => new PackMysqlServerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PackMysqlServerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AFMsg.AFMsgMysqlReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackMysqlServerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackMysqlServerInfo(PackMysqlServerInfo other) : this() {
      nRconnectTime_ = other.nRconnectTime_;
      nRconneCount_ = other.nRconneCount_;
      nPort_ = other.nPort_;
      strDBName_ = other.strDBName_;
      strDnsIp_ = other.strDnsIp_;
      strDBUser_ = other.strDBUser_;
      strDBPwd_ = other.strDBPwd_;
      nServerID_ = other.nServerID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackMysqlServerInfo Clone() {
      return new PackMysqlServerInfo(this);
    }

    /// <summary>Field number for the "nRconnectTime" field.</summary>
    public const int NRconnectTimeFieldNumber = 1;
    private long nRconnectTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NRconnectTime {
      get { return nRconnectTime_; }
      set {
        nRconnectTime_ = value;
      }
    }

    /// <summary>Field number for the "nRconneCount" field.</summary>
    public const int NRconneCountFieldNumber = 2;
    private long nRconneCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NRconneCount {
      get { return nRconneCount_; }
      set {
        nRconneCount_ = value;
      }
    }

    /// <summary>Field number for the "nPort" field.</summary>
    public const int NPortFieldNumber = 3;
    private long nPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NPort {
      get { return nPort_; }
      set {
        nPort_ = value;
      }
    }

    /// <summary>Field number for the "strDBName" field.</summary>
    public const int StrDBNameFieldNumber = 4;
    private string strDBName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StrDBName {
      get { return strDBName_; }
      set {
        strDBName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "strDnsIp" field.</summary>
    public const int StrDnsIpFieldNumber = 5;
    private string strDnsIp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StrDnsIp {
      get { return strDnsIp_; }
      set {
        strDnsIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "strDBUser" field.</summary>
    public const int StrDBUserFieldNumber = 6;
    private string strDBUser_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StrDBUser {
      get { return strDBUser_; }
      set {
        strDBUser_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "strDBPwd" field.</summary>
    public const int StrDBPwdFieldNumber = 7;
    private string strDBPwd_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StrDBPwd {
      get { return strDBPwd_; }
      set {
        strDBPwd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nServerID" field.</summary>
    public const int NServerIDFieldNumber = 8;
    private long nServerID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NServerID {
      get { return nServerID_; }
      set {
        nServerID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PackMysqlServerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PackMysqlServerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NRconnectTime != other.NRconnectTime) return false;
      if (NRconneCount != other.NRconneCount) return false;
      if (NPort != other.NPort) return false;
      if (StrDBName != other.StrDBName) return false;
      if (StrDnsIp != other.StrDnsIp) return false;
      if (StrDBUser != other.StrDBUser) return false;
      if (StrDBPwd != other.StrDBPwd) return false;
      if (NServerID != other.NServerID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NRconnectTime != 0L) hash ^= NRconnectTime.GetHashCode();
      if (NRconneCount != 0L) hash ^= NRconneCount.GetHashCode();
      if (NPort != 0L) hash ^= NPort.GetHashCode();
      if (StrDBName.Length != 0) hash ^= StrDBName.GetHashCode();
      if (StrDnsIp.Length != 0) hash ^= StrDnsIp.GetHashCode();
      if (StrDBUser.Length != 0) hash ^= StrDBUser.GetHashCode();
      if (StrDBPwd.Length != 0) hash ^= StrDBPwd.GetHashCode();
      if (NServerID != 0L) hash ^= NServerID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NRconnectTime != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(NRconnectTime);
      }
      if (NRconneCount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(NRconneCount);
      }
      if (NPort != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(NPort);
      }
      if (StrDBName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(StrDBName);
      }
      if (StrDnsIp.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(StrDnsIp);
      }
      if (StrDBUser.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(StrDBUser);
      }
      if (StrDBPwd.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(StrDBPwd);
      }
      if (NServerID != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(NServerID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NRconnectTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NRconnectTime);
      }
      if (NRconneCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NRconneCount);
      }
      if (NPort != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NPort);
      }
      if (StrDBName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StrDBName);
      }
      if (StrDnsIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StrDnsIp);
      }
      if (StrDBUser.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StrDBUser);
      }
      if (StrDBPwd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StrDBPwd);
      }
      if (NServerID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NServerID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PackMysqlServerInfo other) {
      if (other == null) {
        return;
      }
      if (other.NRconnectTime != 0L) {
        NRconnectTime = other.NRconnectTime;
      }
      if (other.NRconneCount != 0L) {
        NRconneCount = other.NRconneCount;
      }
      if (other.NPort != 0L) {
        NPort = other.NPort;
      }
      if (other.StrDBName.Length != 0) {
        StrDBName = other.StrDBName;
      }
      if (other.StrDnsIp.Length != 0) {
        StrDnsIp = other.StrDnsIp;
      }
      if (other.StrDBUser.Length != 0) {
        StrDBUser = other.StrDBUser;
      }
      if (other.StrDBPwd.Length != 0) {
        StrDBPwd = other.StrDBPwd;
      }
      if (other.NServerID != 0L) {
        NServerID = other.NServerID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NRconnectTime = input.ReadInt64();
            break;
          }
          case 16: {
            NRconneCount = input.ReadInt64();
            break;
          }
          case 24: {
            NPort = input.ReadInt64();
            break;
          }
          case 34: {
            StrDBName = input.ReadString();
            break;
          }
          case 42: {
            StrDnsIp = input.ReadString();
            break;
          }
          case 50: {
            StrDBUser = input.ReadString();
            break;
          }
          case 58: {
            StrDBPwd = input.ReadString();
            break;
          }
          case 64: {
            NServerID = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
